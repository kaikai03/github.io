<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>kairnsの记事簿</title><link href="/" rel="alternate"></link><link href="/feeds/idev.atom.xml" rel="self"></link><id>/</id><updated>2013-07-11T10:16:00+08:00</updated><entry><title>social.framework</title><link href="/2013/social_framework_2013_07_11_10_16.html" rel="alternate"></link><updated>2013-07-11T10:16:00+08:00</updated><author><name>kai_kai03</name></author><id>tag:,2013-07-11:2013/social_framework_2013_07_11_10_16.html</id><summary type="html">&lt;h2&gt;UIActivityViewController&lt;/h2&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;新增的这个控件方便多了，省的去集成一堆乱七八糟的SDK。&lt;br&gt;
&amp;#160; &amp;#160; &amp;#160; &amp;#160;想起之前集成weibo sdk，特么弹出界面一堆bug，还得去覆盖它的类给它重新调界面，简直地狱。&lt;/p&gt;
&lt;p&gt;现在只要一小段，任务就完成了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;-(&lt;/span&gt;&lt;span class="kt"&gt;IBAction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;shareAction:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;sender&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;   
&lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;textToShare&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="err"&gt;”提示提示提示提示提示。”&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="bp"&gt;UIImage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;imageToShare&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;UIImage&lt;/span&gt; &lt;span class="nl"&gt;imageNamed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;img.jpg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="bp"&gt;NSURL&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;urlToShare&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSURL&lt;/span&gt; &lt;span class="nl"&gt;URLWithString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;http://www.xxx.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="bp"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;activityItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="l"&gt;@[&lt;/span&gt;&lt;span class="n"&gt;textToShare&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imageToShare&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;urlToShare&lt;/span&gt;&lt;span class="l"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="bp"&gt;UIActivityViewController&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;activityVC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="bp"&gt;UIActivityViewController&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nl"&gt;initWithActivityItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;activityItems&lt;/span&gt; &lt;span class="nl"&gt;applicationActivities&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;//不出现在活动项目   &lt;/span&gt;
&lt;span class="n"&gt;activityVC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;excludedActivityTypes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="l"&gt;@[&lt;/span&gt;&lt;span class="n"&gt;UIActivityTypePrint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UIActivityTypeCopyToPasteboard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   
&lt;span class="n"&gt;UIActivityTypeAssignToContact&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;UIActivityTypeSaveToCameraRoll&lt;/span&gt;&lt;span class="l"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="nl"&gt;presentViewController&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;activityVC&lt;/span&gt; &lt;span class="nl"&gt;animated&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;TRUE&lt;/span&gt; &lt;span class="nl"&gt;completion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;自定义也挺方便的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;-(&lt;/span&gt;&lt;span class="kt"&gt;IBAction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;shareAction:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;sender&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
&lt;span class="bp"&gt;NSURL&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;urlToShare&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSURL&lt;/span&gt; &lt;span class="nl"&gt;URLWithString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;http://xxxx.cn/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="bp"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;activityItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="l"&gt;@[&lt;/span&gt;&lt;span class="n"&gt;urlToShare&lt;/span&gt;&lt;span class="l"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="n"&gt;BookActivity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;bookActivity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;BookActivity&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="bp"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;applicationActivities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="l"&gt;@[&lt;/span&gt;&lt;span class="n"&gt;bookActivity&lt;/span&gt;&lt;span class="l"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="bp"&gt;UIActivityViewController&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;activityVC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="bp"&gt;UIActivityViewController&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="nl"&gt;initWithActivityItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;activityItems&lt;/span&gt; 
&lt;span class="nl"&gt;applicationActivities&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;applicationActivities&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="nl"&gt;presentViewController&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;activityVC&lt;/span&gt; &lt;span class="nl"&gt;animated&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;YES&lt;/span&gt; &lt;span class="nl"&gt;completion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果程序回应之后需要处理点啥，那就覆盖：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;-&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nt"&gt;activityDidFinish&lt;/span&gt;&lt;span class="o"&gt;:(&lt;/span&gt;&lt;span class="nt"&gt;BOOL&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nt"&gt;completed&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用completed来判断是否完成回应。&lt;/p&gt;</summary><category term="framework"></category><category term="iOS"></category></entry><entry><title>appstore审核</title><link href="/2012/appstore_review_2012_09_26_18_28.html" rel="alternate"></link><updated>2012-09-26T18:28:00+08:00</updated><author><name>kai_kai03</name></author><id>tag:,2012-09-26:2012/appstore_review_2012_09_26_18_28.html</id><summary type="html">&lt;h2&gt;iPhone5的原因？&lt;/h2&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;最近新上传两个app，一个多星期了没人理，还是wait for review 状态。&lt;br&gt;
&amp;#160; &amp;#160; &amp;#160; &amp;#160;也许是为支持iPhone5，全世界厂商同一时间更新app导致塞车了?&lt;/p&gt;</summary><category term="appstore"></category><category term="review"></category><category term="iOS"></category></entry><entry><title>GPS纠偏</title><link href="/2012/GPS_2012_03_06_17_47.html" rel="alternate"></link><updated>2012-03-06T17:47:00+08:00</updated><author><name>kai_kai03</name></author><id>tag:,2012-03-06:2012/GPS_2012_03_06_17_47.html</id><summary type="html">&lt;h2&gt;前情&lt;/h2&gt;
&lt;p&gt;某在android做的国家课题进入验收阶段。因内容与交通有关，有一个项目是路测。&lt;/p&gt;
&lt;p&gt;但问题来了，手机在路面上跑的时候，GPS受影响挺大的，虽然很多时候可以接受，但由于项目本身的需求，处理的数据量很大，并且不间断。在大压力计算的情况下，GPS会飘得非常厉害（也许是过热导致天线异常）。&lt;/p&gt;
&lt;p&gt;so，他们来找我做个纠偏算法来骗过评审。&lt;/p&gt;
&lt;p&gt;啊喂，关我屁事啊，android组的工作往我这边扔算啥，连作弊都不会搞毛啊.....&lt;/p&gt;
&lt;h2&gt;实现思路&lt;/h2&gt;
&lt;p&gt;最后卖个人情还是给做吧。&lt;/p&gt;
&lt;p&gt;仔细想想，其实非常简单，路线规划出来是之后是确定的，只要行径路线的卷积后的导数与线路函数（分段）求导，导数差在一定范围内，就认为在线路上。卷积权重与时间、与路程、与gps跳动幅度相关。当然这么做会导致真正的转向延迟展现，这个小问题嘛，太容易口头糊弄过去了。留给他们想口径吧。&lt;/p&gt;
&lt;p&gt;确定是否真在线路上了，然后就是把偏移的点画到线上，这其实是一个高中问题：线段外一点求垂足的问题。&lt;/p&gt;
&lt;p&gt;这里还有个问题：从图商拿回来的线路数据是由一小段一小段的离散数据组成，不光顺序不确定，小线段之间还有重叠，无序，前后颠倒，甚至在数据上还会出现“间断”，虽然视觉上看是一条线，但实际上只是“太粗”看不出来问题。&lt;/p&gt;
&lt;p&gt;于是在做这里还要对线路数据进行预处理：首先起点终点位置是固定的，先拿出这两个小线段，然后对所有线段求导，按照方向归类，接着按照“位置”关系排序，把小线段按排序结果抽出来，中间如果发生大数据跳跃，就去其他方向“类”里从“两端”找衔接线段。形象的来说就是由起点终点“生长”出来的线，最终在中间碰头，连上。最后，再在间断部分插值补全。&lt;/p&gt;
&lt;p&gt;最开始想用高斯让数据变得平滑，写了一半突然发现没多大意义，因为为了后面的效率，我需要把角度变化不大的连续的点用一个直线方程来表示。&lt;/p&gt;
&lt;p&gt;为什么不用曲线和法线来做，还是因为效率，涉及到曲线拟合和指数运算，且用效果上来说其实差别不大。&lt;/p&gt;
&lt;p&gt;生成一系列直线方程组后，提前对方程求导，算好斜率，接下来就等着gps给真实位置了。&lt;/p&gt;
&lt;p&gt;gps作为线外点出现时，利用导数的负导数与gps点联立，得到垂直于路线的方程，再与路线联立，就得到映射点。&lt;/p&gt;
&lt;p&gt;整个过程就完成了。当然这里面还有很多细节，例如转向、小夹角转向、回形针型线路，高架原盘等特殊情况的控制。这里就不一一赘述了。&lt;/p&gt;
&lt;h2&gt;结尾&lt;/h2&gt;
&lt;p&gt;因为手上现成的环境只有xcode，于是为了调试方便就在iOS上做了，当然是用c写，否则后面有麻烦。&lt;/p&gt;
&lt;p&gt;明天还要搭个交叉编译环境出个so给android同事。&lt;/p&gt;
&lt;p&gt;代码就不贴了，怎么说也算商业代码。&lt;/p&gt;
&lt;p&gt;其实很多事情并没有那么复杂，用过去小时候学的知识就能解决，并不是学校教的没用，仅仅只是不知道怎么用罢了。另外一个侧面说明是当时没学透，不会学以致用。&lt;/p&gt;</summary><category term="C"></category><category term="Object-C"></category><category term="algorithm"></category><category term="iOS"></category></entry><entry><title>SB</title><link href="/2011/SB_2011_11_23_20_47.html" rel="alternate"></link><updated>2011-11-23T20:47:00+08:00</updated><author><name>kai_kai03</name></author><id>tag:,2011-11-23:2011/SB_2011_11_23_20_47.html</id><summary type="html">&lt;h3&gt;随笔 -_-&lt;/h3&gt;
&lt;p&gt;作为4.2加入的新玩意，对我还是很有吸引力的，想到不要再维护以前那一堆xml，还真有点小兴奋。&lt;/p&gt;
&lt;p&gt;可是试用一下，嗯很方便，当然这个方便是看着demo的感觉。然后脑补了一下把公司的工程用storyboard来做的话，啊啊啊啊太可怕了，公司的项目那错综复杂的业务逻辑，那关系图都快变蜘蛛网了，对storyboard来说是噩梦。。。&lt;/p&gt;
&lt;p&gt;总结来说，storyboard适合日后拿来做玩具，绝对不会用在工作中。&lt;/p&gt;
&lt;h3&gt;笔记&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;viewdidload&lt;/code&gt;会在&lt;code&gt;modal&lt;/code&gt;切换时被调用。&lt;/li&gt;
&lt;li&gt;切出时&lt;code&gt;unload&lt;/code&gt;和&lt;code&gt;deallow&lt;/code&gt;会被调用。&lt;/li&gt;
&lt;li&gt;当使用&lt;code&gt;dismiss.....Animated&lt;/code&gt;时，&lt;code&gt;deallow&lt;/code&gt;会被调用，入口&lt;code&gt;View&lt;/code&gt;当然的无法被&lt;code&gt;dismiss&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;push&lt;/code&gt;的&lt;code&gt;dismiss&lt;/code&gt;会将整个&lt;code&gt;navigate&lt;/code&gt;的全部去除，如果&lt;code&gt;custom&lt;/code&gt;也是用&lt;code&gt;nav push&lt;/code&gt;方式的话，同样的结果。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pop&lt;/code&gt;会引起&lt;code&gt;deallow&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;custom&lt;/code&gt;方式需要重写&lt;code&gt;-(void)perform&lt;/code&gt;in&lt;code&gt;UIStoryboardSegue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;actionsheet&lt;/code&gt;需要&lt;code&gt;navigation&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;</summary><category term="xCode"></category><category term="iOS"></category></entry><entry><title>iPad软件提交</title><link href="/2011/iPad_for_review_2011_11_18_01_31.html" rel="alternate"></link><updated>2011-11-18T01:31:00+08:00</updated><author><name>stlau</name></author><id>tag:,2011-11-18:2011/iPad_for_review_2011_11_18_01_31.html</id><summary type="html">&lt;h2&gt;这几天忙着提交ipad的app，被拒，修改，再提交。。。&lt;/h2&gt;
&lt;p&gt;根据我的经验总结了一些注意事项，其实这些东东HIG里面都有提到。&lt;/p&gt;
&lt;p&gt;肯定会被拒的情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;app命名：不要用&lt;strong&gt;类似pad的名字&lt;/strong&gt;，但可以用&lt;strong&gt;xxx for iPad&lt;/strong&gt;，&lt;strong&gt;xxx iPad version&lt;/strong&gt;之类的名字；&lt;/li&gt;
&lt;li&gt;popover相关：&lt;/li&gt;
&lt;li&gt;除非处于任务编辑状态，popover应该随时可以通过点他范围之外的地方来dismiss掉，换句话说，不要用modal方式；&lt;/li&gt;
&lt;li&gt;不要太大，宽度不要超过600；&lt;/li&gt;
&lt;li&gt;pickerview啥的一定要放在popover里面，宽度不要拉长&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;alertview也要用popover的方式出来&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;尽量不要使用全屏切换效果（我用了flip导致被拒，不知道curl行不行），好像一定要用全屏的话，可以用modal的方式，这一点我也理解的不是很明白；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不会导致被拒但是建议改进的：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;尽量支持4个方向&lt;/li&gt;
&lt;li&gt;少用alertview和全屏视图切换&lt;/li&gt;
&lt;li&gt;尽量多用ipad相关的UI element，popover,splitview啥的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总的感觉，审核比较注重要体现出他和iphone app的不同之处，以及保证用户体验的流畅性。&lt;/p&gt;</summary><category term="appstore"></category><category term="iPad"></category><category term="review"></category><category term="iOS"></category></entry><entry><title>摇一摇</title><link href="/2011/shake_it_2011_06_23_23_08.html" rel="alternate"></link><updated>2011-06-23T23:08:00+08:00</updated><author><name>kai_kai03</name></author><id>tag:,2011-06-23:2011/shake_it_2011_06_23_23_08.html</id><summary type="html">&lt;h2&gt;前情&lt;/h2&gt;
&lt;p&gt;今天在做一个摇一摇，简单的if判断太lowB，体验也不好，于是用卷积和高通滤波，让用户多反复来两下，还要用点力，需要有能量的积累才能有反馈，且为Summary提到内容的留坑。&lt;/p&gt;
&lt;h2&gt;代码&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;//高通滤波器，用来生成下个函数highPassFilter中的alpha
//updateFrequency我自己用的是60，cutoff现在是5.0
//还没调到最好，目前只如果初始用用甩的力度的话还是能立马触发，没力弄了。
-(double)highPassAlpha:(double)updateFrequency pCutoffFrequency:(double)cutFreq
{
    double dt = 1.0 / updateFrequency;
    double RC = 1.0 / cutFreq;
    double filterConstant = dt / (dt + RC);

    return filterConstant;
}

//lastX  lastY  lastZ 是最后拿来用的值
-(void)highPassFilter:(UIAcceleration*)accel 
{
    x = alpha * (x + accel.x - lastX);
    y = alpha * (y + accel.y - lastY);
    z = alpha * (z + accel.z - lastZ);
    lastX = accel.x;
    lastY = accel.y;
    lastZ = accel.z;
}
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Object-C"></category><category term="algorithm"></category><category term="iOS"></category></entry><entry><title>一个objc对象的bug</title><link href="/2011/objc_bug_2011_04_21_22_13.html" rel="alternate"></link><updated>2011-04-21T22:13:00+08:00</updated><author><name>kai_kai03</name></author><id>tag:,2011-04-21:2011/objc_bug_2011_04_21_22_13.html</id><summary type="html">&lt;h2&gt;发现一只小虫子&lt;/h2&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;这两天在视频软解的调试过程中发现，objc的array对象有bug，一个array对象快速的插入、弹出dict对象，会有一定几率导致dict对象的内存泄漏，dict弹出用完后未施放。专门写了个小程序通过长时间实验，确定了，bug！！！！&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;去support页报bug时顺手搜了一下，有个外国友人也发现了这个问题。&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;这个问题应该挺难发现因为在高速、频繁的插入，弹出，删除dict时才会出现。初次发现就是对积累视频包管理业务调试的时候，在大量视频包流动的情况下，持续一个小时，内存占用才达到系统的报警线。所以这个内存泄漏几率低，也很难发现。毕竟手机上的应用都比较轻量级，会这么干的机会不多。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;&lt;strong&gt;最后：大量数据流操作不要用objc对象！！！！&lt;/strong&gt;&lt;em&gt;（我承认这段话是从上一篇里复制过来的）&lt;/em&gt;&lt;/p&gt;</summary><category term="Object-C"></category><category term="iOS"></category></entry><entry><title>软解视频，播放卡顿</title><link href="/2011/videoplay_efficiency_2011_04_21_21_40.html" rel="alternate"></link><updated>2011-04-21T21:40:00+08:00</updated><author><name>kai_kai03</name></author><id>tag:,2011-04-21:2011/videoplay_efficiency_2011_04_21_21_40.html</id><summary type="html">&lt;h2&gt;软解视频卡顿的总结&lt;/h2&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;大约两天前完成rtps的握手及rtp包拆解和重组，这两天调试过程就一个字！卡！&lt;br&gt;
&amp;#160; &amp;#160; &amp;#160; &amp;#160;调试过程使用的设备是iPhone3，iOS4.2.1，320*240的标准h264，播放时fps常会降到个位数。整个视频播放过程，画面有严重的卡顿。并且画面上自带的时间变化逐渐渐慢。&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;1，认为是绘图效率，于是把视频绘制层及相关逻辑注释掉，去操作app其他功能。依然有卡顿感。那么已经排除绘图效率问题。&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;2，ffmpeg效率问题？改了些解码参数，打开nano，虽然估计也没啥用，反正不管怎么调都没有起色，于是跳过，毕竟ffmpeg深层的效率问题我估计公司也出不起这成本去深究。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;3，最后我把目光抛向rtp的拆包组包上。&lt;br&gt;
&amp;#160; &amp;#160; &amp;#160; &amp;#160;花了点时间，在各个业务关键点上加入一个全局的耗时统计功能，日志一看，我艹，h264裸数据组包、进栈、出栈，这一套流程占用了cpu的70%运算时间。&lt;br&gt;
&amp;#160; &amp;#160; &amp;#160; &amp;#160;又用了一个下午来进一步检查这部分实现逻辑，并没有问题，查了不下10遍啊喂...我开始怀疑这个世界.....哦不，是这个系统，难道是objc数据对象的效率问题？&lt;br&gt;
&amp;#160; &amp;#160; &amp;#160; &amp;#160;反正业务逻辑已经整理完写过一遍了，重写也用不了多少时间，于是花了半天用c把这部分重新实现一般。果不其然，objc对象的效率有很严重的问题！！！用c重写后，这部分的运算时间占用降低到30%，解码和绘图占用时间比例上升。&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;至此，软解h264卡顿的问题就解决了。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;虽然再刚接触objc的时候就感觉它的这种消息机制会有一定上的执行效率浪费，但这次对数据流开发还是坚持用它，其原因是：&lt;em&gt;刚学会的东西当然要拿出来耍耍啊，是不......&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;&lt;strong&gt;总的来说就是：大量数据流操作不要用objc对象。&lt;/strong&gt;&lt;/p&gt;</summary><category term="ffmpeg"></category><category term="Object-C"></category><category term="iOS"></category></entry><entry><title>Xcode4</title><link href="/2011/xCode4_2011_03_13_14_59.html" rel="alternate"></link><updated>2011-03-13T14:59:00+08:00</updated><author><name>kai_kai03</name></author><id>tag:,2011-03-13:2011/xCode4_2011_03_13_14_59.html</id><summary type="html">&lt;p&gt;&lt;del&gt;居然收费了！&lt;/del&gt; &lt;br&gt;
刚开始看到appstore里面的价格吓了一跳，心里嘀咕着苹果这是在想什么，去dev中心翻了翻，原来开发者还是免费的.....&lt;/p&gt;
&lt;h2&gt;正文开始&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Xcode4开始使用LLVM Compiler2.0，不再建议使用GCC4.2。&lt;/li&gt;
&lt;li&gt;Framework Search path 用于指定框架路径。&lt;/li&gt;
&lt;li&gt;Generate Debug Symbols 关闭可以让 BreakPoint不可用。&lt;/li&gt;
&lt;li&gt;Bundle identifier --真机调试的证书。&lt;/li&gt;
&lt;li&gt;证书格式com.abc.def用来发布，com.abc.*可以用于泛用调试，不允许发布。&lt;/li&gt;
&lt;li&gt;Target:skip install 只能选 No。&lt;/li&gt;
&lt;li&gt;如果有link工程，子工程的skip install 选 Yes。&lt;/li&gt;
&lt;li&gt;Ad-hoc iOS4后不需设Eatielements。&lt;/li&gt;
&lt;li&gt;Ad-hoc可使用带星号的identifier。&lt;/li&gt;
&lt;li&gt;scheme&lt;/li&gt;
&lt;li&gt;Archive必是iOS device 和Release。&lt;/li&gt;
&lt;li&gt;Bundle name：程序名。&lt;/li&gt;
&lt;li&gt;desplay name：用户看到的名字。&lt;/li&gt;
&lt;li&gt;identifier：标识，就是那个com.abc.def。&lt;/li&gt;
&lt;li&gt;version：版本号。&lt;/li&gt;
&lt;li&gt;os type code：统一APPL。 &lt;/li&gt;
&lt;li&gt;creator os type code：起四个字母的短名。&lt;/li&gt;
&lt;li&gt;Executable file：可执行文件名。&lt;/li&gt;
&lt;/ul&gt;</summary><category term="xCode"></category><category term="iOS"></category></entry><entry><title>appstore 发布准备</title><link href="/2011/appstore_2011_01_20_21_12.html" rel="alternate"></link><updated>2011-01-20T21:12:00+08:00</updated><author><name>kai_kai03</name></author><id>tag:,2011-01-20:2011/appstore_2011_01_20_21_12.html</id><summary type="html">&lt;h3&gt;icon&lt;/h3&gt;
&lt;p&gt;图片格式：PNG&lt;br&gt;
iPhone3gs：57*57&lt;br&gt;
iPad：72*72&lt;br&gt;
iPhone4：114*114&lt;br&gt;
appstore界面上的：512*512&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;截图&lt;/h3&gt;
&lt;p&gt;最小竖式：320*460（不含状态栏）&lt;br&gt;
最大竖式：320*480（全屏）&lt;br&gt;
最高分辨率最小竖式640*920（不含状态栏）&lt;br&gt;
最高分辨率最大竖式640*960（全屏）&lt;br&gt;&lt;/p&gt;
&lt;p&gt;最小横式：480*300（不含状态栏）&lt;br&gt;
最大横式：480*320（全屏）&lt;br&gt;
最高分辨率最小横式960*600（不含状态栏）&lt;br&gt;
最高分辨率最大横式960*640（全屏）&lt;br&gt;&lt;/p&gt;
&lt;p&gt;其他要求：72PPi，RGB，平滑，非半透明&lt;/p&gt;
&lt;h3&gt;一些设置项&lt;/h3&gt;
&lt;p&gt;SKU：iTunes Connect系统中的唯一标识，可以随便写，只要别与别人冲突。&lt;br&gt;
keyword：注意不允许以其他app名称，其他公司名称作为关键词。用逗号分隔。&lt;br&gt;
Email：用户是不可见的，可以放心填写自己的，用于官方主动联系。&lt;br&gt;
ReviewNote：审批提醒，用来提醒测试人员注意的一些事项说明，包括提供测试ID；测试ID需要有全权限；如果是UGC需要提供后台管理页面，需保证内容可管理；如果基于视频流，必须提供测试的视频流url。&lt;br&gt;
SDK：如果选择laster SDK的话，将不提供iOS版本的前向支持。&lt;/p&gt;</summary><category term="appstore"></category><category term="iOS"></category></entry><entry><title>IDP申请</title><link href="/2011/apply_for_IDP_2011_01_18_02_52.html" rel="alternate"></link><updated>2011-01-18T02:52:00+08:00</updated><author><name>zerochocboo</name></author><id>tag:,2011-01-18:2011/apply_for_IDP_2011_01_18_02_52.html</id><summary type="html">&lt;h2&gt;APPLE STORE申请一波三折&lt;/h2&gt;
&lt;p&gt;终于在今天凌晨完成了最后付款流程，其过程真是吐血。将要点列一下 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先，要注册一个APPLE的ID。特别特别要注意的地方，在注册的时候,First Name和Last Name必须要填写个人的名字，千万不要用企业名称或随便填名字。因为这个名字之后是无法改变的。 为了这个，我的申请流程中被封了两次账号，都是在传真了企业资料后才被封的说，而每次被封账号是没有任何说明的，只有在线提交问题询问才告诉原因，并且是大喘气似的第一次不告诉我说必须填写个人的名字，第二次封账号才告知。 使整个申请流程浪费了快1个月。 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;公司传真的信息，如果公司营业执照注册地址和公司办公地址不同，需要附加一份说明，并盖公章。这份说明我是中英文混合的。随便写点，老外能看懂的英文即可。大概的格式偶是这样写的： &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Enrollment ID number : xxxxxxx &lt;br&gt;
Follow-up D:xxxxxx &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于经营地址与注册地不一致的说明 &lt;br&gt;
苹果公司： &lt;br&gt;
我公司工商行政注册登记地址为：中国上海xxxxx路x号x幢xxx-xxx室，公司实际经营地址为：中国上海xxxx路xxxxx号xxxx大厦xxxx，特此说明！ &lt;br&gt;
上海XXXXXX网络科技有限公司 &lt;br&gt;
2010年1月29日 &lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Declaration of the difference between company register address and company address &lt;br&gt;
Apple Inc.： &lt;br&gt;
This is to certify that the company address which is registered in IDP is belong to XXX Ltd. &lt;br&gt;
XXX Ltd. was registered at “Room. x-xx-xx. No.x，xxxxxxx Road，Shanghai,China”. But now the office address is Room xxxx,xxxx xxx,No.xxxx xxx xx xx xxx,Shanghai,China. &lt;br&gt;
XXXXX Ltd. &lt;br&gt;
2010-1-29 &lt;br&gt;
Enrollment ID number : xxxxxxxx &lt;br&gt;
Follow-up ID:xxxxxx &lt;br&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;传真的问题。我选择的是&lt;a href="http://www.faxzero.com"&gt;www.faxzero.com&lt;/a&gt;。哈好用。每天2次免费传真，每份传真最多3页。因为公司资料传真就两份，将传真件整在一份DOC中传真即可。需要注意传真时EMAIL地址必须填写真实的，只有点击收到的EMAIL里的链接传真才会进行。传真完成后也会收到EMAIL。 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果传真是在搞不定，也可以发送扫描件到&lt;a href="mailto:chinadev@asia.apple.com"&gt;chinadev@asia.apple.com&lt;/a&gt;，让香港那里的苹果公司工作人员协助。我在FAX付费单后曾发邮件询问过，那里的MM回邮件说也可以发邮件给那里。 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;整个流程其实如果走顺了还是很快的。APPLE ID账号审核1天内，IDP申请提交1~2天左右，公司资料传真后3天左右回复，收费单传真过去后2到3天左右最后完成。 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;信用卡可选择招行的MASTERCARD，默认是关闭的，可以再网上打开。扣费确认单上资料除了个人签名部分都用英文的。 &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;好了，可以登录了，继续研究接下去的TEAM啊CERTIFICATES之类的。 
辛苦啊。ANDROID的MARKET申请没那么复杂的说，24小时内就全部搞定的说。 &lt;/p&gt;</summary><category term="appstore"></category><category term="iOS"></category></entry><entry><title>.dylib</title><link href="/2010/dylib_2010_12_10_23_48.html" rel="alternate"></link><updated>2010-12-10T23:38:00+08:00</updated><author><name>kai_kai03</name></author><id>tag:,2010-12-10:2010/dylib_2010_12_10_23_48.html</id><summary type="html">&lt;h2&gt;当然如果要上appstore可不能这么干&lt;/h2&gt;
&lt;p&gt;appstore政策要求，app禁止使用动态加载的模块。&lt;/p&gt;
&lt;h3&gt;注意文件依赖&lt;/h3&gt;
&lt;p&gt;其实不光是不允许使用动态库，还需要注意静态库是否有第三方依赖。&lt;br&gt;
编译后的主程序会在启动时根据静态库中的依赖信息加载其他的动态库，这个用lipo可以查看和修改。&lt;/p&gt;
&lt;p&gt;模拟器上问题不大，把该有的依赖库放到该放的地方，或lipo改路径。&lt;/p&gt;
&lt;p&gt;上真机调试的话，可以在编译脚本内加入几行cp和mkdir之类的将相关文件拷如手机，否者app会在日志里留下一句"image not found"后退出。&lt;/p&gt;
&lt;p&gt;如果需要正式发布，只能用没有依赖（除系统本身framework之外）的静态库了。&lt;/p&gt;
&lt;p&gt;当然只服务越狱设备，可以无视任何限制。&lt;/p&gt;</summary><category term="Object-C"></category><category term="iOS"></category><category term="dylib"></category></entry><entry><title>iOS Folder</title><link href="/2010/iOS_Folder_2010_11_02_10_22.html" rel="alternate"></link><updated>2010-11-02T10:22:00+08:00</updated><author><name>kai_kai03</name></author><id>tag:,2010-11-02:2010/iOS_Folder_2010_11_02_10_22.html</id><summary type="html">&lt;p&gt;因为是沙盒系统，so，不能系统路径，只有app自己的一亩三分田。&lt;/p&gt;
&lt;p&gt;而且不能用常规的相对路径，即使是./也会被认为是读取系统根目录，release的包如果把手伸出沙盒会被系统kill掉。&lt;/p&gt;
&lt;p&gt;当然越狱就随便了。&lt;/p&gt;
&lt;p&gt;使用[[NSBundle mainBubundle] pathforResource:@"xx" ofType@"xx"]来抄作自己的文件。&lt;/p&gt;
&lt;p&gt;Documents文件夹只允许Runtime状态操作、可写、可复制Resourc下的文件夹过去。&lt;/p&gt;</summary><category term="Object-C"></category><category term="iOS"></category></entry><entry><title>release</title><link href="/2010/Memory_release_2010_10_29_23_05.html" rel="alternate"></link><updated>2010-10-29T23:05:00+08:00</updated><author><name>kai_kai03</name></author><id>tag:,2010-10-29:2010/Memory_release_2010_10_29_23_05.html</id><summary type="html">&lt;h2&gt;关于释放&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;multable&lt;/code&gt;的&lt;code&gt;addobject&lt;/code&gt;会导致参数对象&lt;code&gt;retain&lt;/code&gt;，施放时注意。&lt;/p&gt;
&lt;p&gt;线程中需要有自己的&lt;code&gt;autoreleasepool&lt;/code&gt;，&lt;code&gt;autorelease&lt;/code&gt;对象才会如你预期的被释放。&lt;/p&gt;
&lt;p&gt;自己写set方法，自己写retain！&lt;/p&gt;
&lt;p&gt;&lt;code&gt;removeobject&lt;/code&gt;会导致objectAtIndex出来的对象失效，注意remove的实际。（这是当然的，那个只是个指针）&lt;/p&gt;
&lt;p&gt;注意Runloop的释放问题。&lt;/p&gt;
&lt;p&gt;该死的cocoa，&lt;code&gt;release&lt;/code&gt;到真正释放效率有很大的问题。目前有两个分别是25ms、50ms的loop它就释放不过来了。&lt;/p&gt;
&lt;p&gt;自建pool是一个解决loop内存释放效率不够的好办法，当收到内存警告时，把loop和pool一起释放掉，整个大内存块会被一次性释放掉，再重建一个loop。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NSInvocationOperation&lt;/code&gt;之类的东西会使它所在的对象&lt;code&gt;retainCount&lt;/code&gt;+1。&lt;/p&gt;
&lt;p&gt;最后，不要相信NS对象的线程安全！！！！！&lt;/p&gt;</summary><category term="Object-C"></category><category term="Memory"></category><category term="iOS"></category></entry></feed>