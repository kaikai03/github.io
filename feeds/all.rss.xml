<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kairnsの记事簿</title><link>/</link><description></description><atom:link href="/feeds/all.rss.xml" rel="self"></atom:link><lastBuildDate>Fri, 27 Apr 2018 18:25:00 +0800</lastBuildDate><item><title>ZCA 的一种理解</title><link>/2018/ZCA_2018_04_27_18_25.html</link><description>&lt;h2&gt;ZCA&lt;/h2&gt;
&lt;h3&gt;唠叨&lt;/h3&gt;
&lt;p&gt;今天随手测试了下，用正态随机生成的数据，做PCA旋转原数据的时候直接旋转成近乎完美的QQ图了。几种样本基本叠加在对角线上，同时有很合理表现出“子集”的随机性，有那么点偏差，尝试用zca再转一下，果然漂亮的分开了。&lt;/p&gt;
&lt;p&gt;为什么写教程不用这么漂亮的图来做例子呢？&lt;/p&gt;
&lt;p&gt;&lt;img alt="1.jpg" src="/article_img/ZCA_2018_04_27_18_25/1.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2.jpg" src="/article_img/ZCA_2018_04_27_18_25/2.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3.jpg" src="/article_img/ZCA_2018_04_27_18_25/3.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;按照pca的定义，它是通过特征向量来投影，之后将旋转结果用特征值（标准差）去标准化数据，进而将矩阵缩放成单位为1的单位分布。&lt;/p&gt;
&lt;p&gt;zca是在pca的基础上，将数据变换回原有空间。
$$Y_{zcawhite}= U * Y_{pcawhite}$$&lt;/p&gt;
&lt;p&gt;但从今天的结果图来看，zca貌似可以这么解释：你pca不是把两个方向的特征给去掉了嘛，那么给你乘一个回去，那不不同类的数据它之间的“偏差”自然被放大。&lt;/p&gt;
&lt;p&gt;特征向量对各组的效用不一致，假设效用为$ U_i , V_i $ ,原先混在一起 $ U_i * V_i = C $ 是因为各组两个方向的乘积是同一个常数（当前用的例子中），被单位化后也是，但是$ U_i \neq  U_{i+1} $,$ V_i \neq  V_{i+1}$，所以只乘一个方向回去，便对各组产生不用效果，从表现上看就是被PCA聚到一起的各组数据沿不通方向分开了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; def zca(df):
    matrix = df.as_matrix()
    norm = (matrix-matrix.mean(axis=0))/matrix.std(axis=0)
    sigma = np.dot(norm, norm.T)/(norm.shape[1])
    U,S,V = np.linalg.svd(sigma)
    PCA_white = np.dot(U, 1.0/np.sqrt(np.diag(S) + 0.01)) 
    ZCAMat = np.dot(PCA_white, U.T)                    
    return np.dot(ZCAMat, df)
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Fri, 27 Apr 2018 18:25:00 +0800</pubDate><guid>tag:,2018-04-27:2018/ZCA_2018_04_27_18_25.html</guid><category>algorithm</category><category>ML</category><category>Math</category></item><item><title>不靠谱产品日记（23）</title><link>/2018/produce_diary_2018_02_05_17_41.html</link><description>&lt;h1&gt;2018-02-05&lt;/h1&gt;
&lt;h3&gt;略微回顾&lt;/h3&gt;
&lt;p&gt;隔了挺久没写东西了，忙是忙，更主要的原因是没啥值得记录的大事。&lt;/p&gt;
&lt;p&gt;今天这篇能够算得上是上一篇“服务的边界”的“实例化”，“照单全收”产生实际负面效果了。&lt;/p&gt;
&lt;p&gt;之前嘛，自身主导的“产品需求”比较“心虚”；市场人员没啥医疗行业经验也挺难插入医院的；so...采取了极为宽松的产品发展策略，对于能够抓到的，可明确的需求都尽量“照单全收”，能做的都做，不限于开发，还有很多“卖人力”的工作。希望通过服务，增加曝光度，积累口碑，进而能被医生、医院认可我们的科研产品。&lt;/p&gt;
&lt;h3&gt;（快？）碰壁&lt;/h3&gt;
&lt;p&gt;去年年底开始与其他科室开展合作，既扩大（疾病、患者）服务范围，那么相对应的院内数据使用范围也需要相应的扩大。于是就碰壁了（碰没上不知道，照之前的思路肯定是迎头撞上去的）&lt;/p&gt;
&lt;p&gt;以前嘛，也许是因为服务和“功能”单一，服务对象单一，去拿数据接口没太大阻力（貌似，感觉上是这样，事实如何我并不太清楚）。现在谈别的数据的时候，不光跟信息科，还有别的数据厂家都参一脚进来，并且很难推进；想直接跟厂家“勾脚”，也没什么进展。&lt;/p&gt;
&lt;p&gt;老大给出了一个合理的解释：我们不能再临床上再做更多的工作，因为那是别人的阵地，我们的科研又需要通过“他们的结果”作为前提才能开展；与“他们”开展合作的前提是不能碰人家的蛋糕。&lt;/p&gt;
&lt;p&gt;回头去看过去一年的产品成长和产品组工作，可以说外面带回来的需求很多都是临床工作需求。其实也不奇怪，科研对于大部分参与人来说都是一个“远期”目标，能够觉得“疼”的，想要赶快帮忙解决的，肯定是当前手上的麻烦事啊，临床工作才是“日常”嘛。&lt;/p&gt;
&lt;p&gt;然而这些东西做得越多，数据厂家们必然看我们越不顺眼。更何况我们在这些方面的工作上并不盈利，（对他们来说）就更可怕了。&lt;/p&gt;
&lt;h3&gt;回归科研！！&lt;/h3&gt;
&lt;p&gt;于是乎，接下来的产品组的工作指导方针便是↑这个↑。&lt;/p&gt;
&lt;p&gt;立即停止那些吃力不讨好的事，停止在弯路上狂奔的现状，重塑“我们就是干科研”，“只干科研”的形象，防止阻碍状况进一步恶化。同时也是把精力和注意力再集中到科研，既产品初衷上来。&lt;/p&gt;
&lt;p&gt;这和去年年底提出的“确定服务边界”问题方向一致，几个月下来问题却严重化了。大概是还停留在口号层面没真正执行的意思？&lt;/p&gt;
&lt;p&gt;但至少对产品本身是一个不错的信号。目前产品中的科研分析工具正接近框架搭建与实验阶段的尾声。接下来可以专心填充实际功能，让科研工具从看起像这么回事，到实际可用转变。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Mon, 05 Feb 2018 17:41:00 +0800</pubDate><guid>tag:,2018-02-05:2018/produce_diary_2018_02_05_17_41.html</guid><category>产品</category></item><item><title>不靠谱产品日记（22）</title><link>/2017/produce_diary_2017_11_18_23_17.html</link><description>&lt;h1&gt;2017-11-18&lt;/h1&gt;
&lt;h2&gt;醒悟&lt;/h2&gt;
&lt;p&gt;今年起码有四成到一半的“成本”被用于市场从医生（大多是实习的医学生）那带回来的“需求”，大部分都融合到产品功能中，甚至有部分成为新的模块。&lt;/p&gt;
&lt;p&gt;“功能”不断叠加的同时也逐渐发现，有些上线后成为一次性功能；甚至还出现推来倒去经过几次大改发现从开始就是一个不被需要的“需求”。很多需求在开发前都被评估为“不符合产品”，充其量算是从个人工作角度出发的个性需求，但为了市场的推进，硬是加到产品中。即便如此，产品的使用情况及推广问题并未好转。&lt;/p&gt;
&lt;h2&gt;服务的边界&lt;/h2&gt;
&lt;p&gt;今天老大提出来的。&lt;/p&gt;
&lt;p&gt;虽然产品组早就有意识--不是所有的需求都是产品需求；所有的需求都需要沉淀、思考；但是连产品定义都只停在口头、产品概念具像与聚像都没系统设计（也许他们开小灶做了？完全感觉不到）。所以抓到需求就跟抓到救命稻草一样，这是可以理解的，毕竟是“实物”需求，能做的都尽可能做了。&lt;/p&gt;
&lt;p&gt;这样导致了一个现象，所有人每天都围着医生（医学生）在转啊转，都忙得晕头转向，计划排得满满的，核心开发都能一推再推，结果就是无论怎么搞都感觉不到有成果的产生。&lt;/p&gt;
&lt;p&gt;随着战线拉得太长加上财务的紧张，这些无意义付出大概开始变得扎眼起来，所以老大再次明确“要有取舍”，这个取舍就便是“服务的边界”。&lt;/p&gt;
&lt;h2&gt;我的产品观&lt;/h2&gt;
&lt;p&gt;今年7月吐槽“需求”打乱数据严谨性的时候，顺便也缕过自己的产品观点，今天嘛，再顺便一下:p。&lt;/p&gt;
&lt;p&gt;至少在“服务的边界”这点上，跟我的产品观保持高度一致。&lt;/p&gt;
&lt;p&gt;不贪不乱，保持服务核心质量，不随意扩大服务对象，减少泛客户的服务以降低成本并提高核心客户的价值与体验，简而言之、言而简之，不要和傻逼“做”生意。&lt;/p&gt;
&lt;p&gt;共享大潮带来了一大堆网盘，不过现在大部分都死了。随共享大潮而起的115，闭源后活得更好。用户不需要共享，只要能下片久好。为迎合垃圾用户而改变产品，把更多用户潜移默化地也变成垃圾用户。也许的确有人开发出好的产品，但这是劣币驱逐良币。&lt;/p&gt;
&lt;p&gt;不管bp再怎么吹，再怎么扩大化，嘴上说的是用来标榜的价值观，只有用户主动聚集并为之付费，才是好的产品。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Sat, 18 Nov 2017 23:17:00 +0800</pubDate><guid>tag:,2017-11-18:2017/produce_diary_2017_11_18_23_17.html</guid><category>产品</category></item><item><title>羊群效应</title><link>/2017/Herd_Effect_2017_11_15_23_48.html</link><description>&lt;h1&gt;Herd Effect&lt;/h1&gt;
&lt;p&gt;年纪大了嘛，一个毛病就是时不时回马灯。（误&lt;/p&gt;
&lt;p&gt;一直以来的都是以抗短期波动小风险的思路来做设计，结果虽然没亏，但一直没什么收入也不是那么回事。过去唯独几次高收益率的事件都是利用泡沫爆炸临界点及炸的瞬间，靠人工操作得到的。&lt;/p&gt;
&lt;p&gt;一个是央视掺合的大妈们买金事件，一个是前年所有同事都一窝蜂涌进A股市场的时候，最近一个是去年靠“金融创新”之风撸羊毛的时候。这些时间点都有一个共通的特性，明显有“人”带节奏。但即便是非常明显的钓鱼，依旧是傻子太多骗子不够用的祥和场面。&lt;/p&gt;
&lt;p&gt;总的起来看，这不都是羊群效应的实例么。&lt;/p&gt;
&lt;h3&gt;羊群效应&lt;/h3&gt;
&lt;p&gt;在市场上看，羊群效应基本上跟吃饭一样常见：共享单车之后的各种单车，打车之后的各种打车，看到什么生意赚钱（可能）了，一堆企业领着投资钻进去，资本、生产力饱和不是终点，供需失调。&lt;/p&gt;
&lt;p&gt;生活上这些场景也不少：以前公务员收入不错还稳定，公务员都快成毕业生必考项目了；上世纪，做管理咨询赚钱，冒出了咨询公司；本世纪搞IT赚钱了，全都一股脑的“30转码农还来不来得急？在线等”。&lt;/p&gt;
&lt;p&gt;资本市场也同样，一个没有人投资的产品大概率不会有人去投资，即便前景再好；一个看起来不那么对劲的东西有个领投的，后面一窝蜂。&lt;/p&gt;
&lt;p&gt;一个人在太阳底下看天，不一会就会有别人跟这一起看；一个人在大街上跑，一会也有人跟着跑。换个更常用说法，叫从众心理。这是从心理学角度去讲问题，今天我关心的是金融问题。&lt;/p&gt;
&lt;h3&gt;乱翻书&lt;/h3&gt;
&lt;p&gt;看资料，得如下说法&lt;/p&gt;
&lt;p&gt;&lt;em&gt;金融市场中的“羊群行为”(herd behaviors)是一种特殊的非理性行为，它是指投资者在信息环境不确定的情况下，行为受到其他投资者的影响，模仿他人决策，或者过度依赖于舆论，而不考虑自己的信息的行为由于羊群行为是涉及多个投资主体的相关性行为，对于市场的稳定性效率有很大的影响，也和金融危机有密切的关系。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;经济学家们从信息的角度来解释羊群行为：&lt;/p&gt;
&lt;h4&gt;信息不完整，会产生羊群效应####&lt;/h4&gt;
&lt;p&gt;信息的增加将会带来确定性，高效准确完整的信息能直接带来高额回报或避免损失。但在实际市场上，信息获取成本实际很高，不同的投资者个人能力和经济能力各不相同，就会出现消息不对称。机构投资者，某些业内，某些专业人士手上的信息，将会（或是被认为）比一般人的信息更全更即时。&lt;/p&gt;
&lt;p&gt;个体投资者在获取有效信息总（自认为）处于不利地位。那么为了避险和增加收益，肯定对于各种“小道消息”津津乐道。即便是信息是被完全纰漏的，也会有人认为一定还有“内幕消息”的存在。这样一来，部分人对这种心理稍加利用，便能够某种程度达到操纵市场的目的。&lt;/p&gt;
&lt;p&gt;对于机构也无法充分地确认市场信息的真实有效性，或者信息的质量。那么其会根据他人的行为来增加自身决策“正确性”判断。例如前年光大误操作触发所有机构跟风引起A股的瞬时震荡。&lt;/p&gt;
&lt;h4&gt;信息“渠道”单一，会产生羊群效应&lt;/h4&gt;
&lt;p&gt;这个信息渠道指的不光是真正的数据来源，“道”其实还包括了意识对信息的主观加工。&lt;/p&gt;
&lt;p&gt;同一时期机构投资经过市场磨炼，最后生存下来的投资者具有极高的同质性。在同一个“市场”筛选出来；假设机构信息能力到顶，那么他们每天还面对相似的信息；相似的高校，相似的专业，甚至可能是同一套教程，相似的经历，产生相似的世界观与思维方式。那么机构投资者通常会更关注同样的市场信息，使用同样的技术，使用同样的模型，最终做出同样的决策。&lt;/p&gt;
&lt;h3&gt;羊群行为的影响&lt;/h3&gt;
&lt;p&gt;1.由于“羊群行为”者往往抛弃自己的私人信息追随别人，这会导致市场信息传递链的中断。但这一情况有两面的影响:第一，“羊群行为”由于具有一定的趋同性，从而削弱了市场基本面因素对未来价格走势的作用。当投资基金存在“羊群行为”时，许多基金将在同一时间买卖相同股票，买卖压力将超过市场所能提供的流动性，股票的超额需求对股价变化具有重要影响，当基金净卖出股票时，将使这些股票的价格出现一定幅度的下跃;当基金净买入股票时，则使这些股票在当季度出现大幅上涨。从而导致股价的不连续性和大幅变动，破坏了市场的稳定运行。第二，如果“羊群行为”是因为投资者对相同的基础信息作出了迅速反应，在这种情况下，投资者的“羊群行为”加快了股价对信息的吸收速度，促使市场更为有效。&lt;/p&gt;
&lt;p&gt;2.如果“羊群行为”超过某一限度，将诱发另一个重要的市场现象一一过度反应的出现。在上升的市场中(如牛市)，盲目的追涨越过价值的限度，只能是制造泡沫;在下降的市场中（如熊市），盲目的杀跌，只能是危机的加深。投资者的“羊群行为”造成了股价的较大波动，使证券市场的稳定性下降。&lt;/p&gt;
&lt;p&gt;3.所有“羊群行为”的发生基础都是信息的不完全性。因此，一旦市场的信息状态发生变化，如新信息的到来，“羊群行为”就会瓦解。这时由 “羊群行为”造成的股价过度上涨或过度下跌，就会停止，甚至还会向相反的方向过度回归。这意味着“羊群行为”具有不稳定性和脆弱性。这一点也直接导致了金融市场价格的不稳定性和脆弱性。 &lt;/p&gt;
&lt;h3&gt;羊群效应的利用&lt;/h3&gt;
&lt;p&gt;虽然从描述以及宏观来看，羊群行为往往会带来负面结果。但是只不管在市场营销还是企业管理方面，羊群效应都有大量被利用的案例。&lt;/p&gt;
&lt;p&gt;当然不想去考虑宏观（大长线）上的事，因为去改变大佬啥下的伏笔是异想天开；没有后台去市场上带节奏又是作死行为。所以像我这样的小屁民最优做法就是去跟着羊群走，大佬掉的面包屑捡一点，羊群聚集的时候摸一摸，跑掉前薅一把羊毛，就够了。&lt;/p&gt;
&lt;p&gt;要干的事大致有3点：
1.大佬下伏笔的信号捕捉
2.加入羊群队伍的时机
3.风险最低的退出时机&lt;/p&gt;
&lt;p&gt;大致思路
1.第一点的方法很多，方差标度、个股收益相对市场收益横截面绝对偏离、不同指标的波动性、马尔科夫猜行为模式然后的分类等等等等。随便想都有一大把。现在手上有些经济新闻的数据，还可以尝试section vector做因子，或者再搞个模型的判别模型来做训练控制器。&lt;/p&gt;
&lt;p&gt;2.在1）的基础上，在加入人为label（？也许分类出来还需要“训练一下人”），接着蒙特卡洛尝试最优点，最后用label和各种最优点训练交易模型。&lt;/p&gt;
&lt;p&gt;3.对于退出时机应该能跟2）放一起尝试一下。&lt;/p&gt;
&lt;h3&gt;最后&lt;/h3&gt;
&lt;p&gt;噼里啪啦的一转眼也些了不少。不早了就到这吧，等忙完这一阵，去翻翻近两年的论文，多收集点思路，在尝试之后，在继续这个话题。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Wed, 15 Nov 2017 23:48:00 +0800</pubDate><guid>tag:,2017-11-15:2017/Herd_Effect_2017_11_15_23_48.html</guid><category>Math</category><category>finance</category></item><item><title>不靠谱产品日记（21）</title><link>/2017/produce_diary_2017_10_29_22_46.html</link><description>&lt;h1&gt;2017-10-29&lt;/h1&gt;
&lt;p&gt;刚才翻了下以前的的记录，决定今天的标题是这个↙↙↙&lt;/p&gt;
&lt;h2&gt;曲线救国（2）&lt;/h2&gt;
&lt;p&gt;在早些的时候，已经用过一次的标题，今天打算再用一次。不过这次的弯有点大......&lt;/p&gt;
&lt;h3&gt;一个需求&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;医院内部分信息系统数据未打通；&lt;/li&gt;
&lt;li&gt;远古报告单文本；&lt;/li&gt;
&lt;li&gt;院外其他机构检查数据；&lt;/li&gt;
&lt;li&gt;历史随访问卷（纸质）；&lt;/li&gt;
&lt;li&gt;默写手写的临时记录；&lt;/li&gt;
&lt;li&gt;......&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;面对以上类似的诸多场景条件下，当医生需要大量运用这些数据时，就会面临一个问题：文本-&amp;gt;数据。&lt;/p&gt;
&lt;p&gt;当前医学上，&lt;a href="http://www.epidata.dk/"&gt;epidata&lt;/a&gt;算是比较广的数字化录入工具。这个工具虽然看起来简陋，但快捷输入方法、双录入对比校验、定量分析工具什么的都不少，算是专门面向数据录入的专业解决方案了吧。&lt;/p&gt;
&lt;p&gt;除了epidata剩下就是常规的excel、access了。&lt;/p&gt;
&lt;h3&gt;一个想法&lt;/h3&gt;
&lt;p&gt;em，只要我们的系统上集成这个数据录入功能，那医生就会在我们系统上工作啦；我们的友好度只要超过epidata，那医生就都不去用epidata啦，都会用我们的系统啦；&lt;/p&gt;
&lt;p&gt;什么？现在录入数据的都是学生？没关系啊，这个更好啦，只要这一代学生都使用过我们的系统，等到以后，就是我们的天下了！！！！现在就找医学生，让他们试用起来！！！&lt;/p&gt;
&lt;h3&gt;啊？？？&lt;/h3&gt;
&lt;p&gt;虽然看起来不错，但......&lt;/p&gt;
&lt;p&gt;暂且不说现在的财务状况是否能够支撑起从学生开始培养用户，等到学生进到医院成为研究主力这么个超长线投资；学生代录入数据与是否使用本平台进行科研分析之间并没有直接的逻辑关系啊。&lt;/p&gt;
&lt;p&gt;暂且不说干掉一个这么多年发展的专业软件需要付出多少；我们目前定位是科研系统，重心肯定是在科研助力上；虽然旁枝末节看起来美好，但核心不做得闪闪发光，所有的东西都是徒劳的。不只是徒劳的问题，还会四面树敌。要按照这个思路，做科研之前是不是还需要把医院里面各种信息系统的饭抢了？首先拿临床系统开刀想法子去替代它？？（现在的确有些市场要求的“额外”功能好像的确应该划分临床医疗服务范畴内）&lt;/p&gt;
&lt;h3&gt;哎&lt;/h3&gt;
&lt;p&gt;最后我们都建议不去碰这一块，不过是以技术问题为由推掉的。虽然这个长弯道是避开了，但也凸显了一个严重的问题。&lt;/p&gt;
&lt;p&gt;上次提到这个曲线救国这个词是2月份了，这意味着半年多过去了，产品负责人在产品建树方面并无长进，依然没有真正抓住业务核心、再准确点应该说是握着痛点却没有找到破壳的方法，依旧需要靠拐弯抹角的想法来支撑核心想法、来弥补“表面的空虚”。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Sun, 29 Oct 2017 22:46:00 +0800</pubDate><guid>tag:,2017-10-29:2017/produce_diary_2017_10_29_22_46.html</guid><category>产品</category></item><item><title>不靠谱产品日记（20）</title><link>/2017/produce_diary_2017_10_16_20_39.html</link><description>&lt;h1&gt;2017-10-16&lt;/h1&gt;
&lt;p&gt;今天产品例会上，对市场提出了接下来的工作要求：对产品下定义，以及做产品包装。&lt;/p&gt;
&lt;h2&gt;？？？？&lt;/h2&gt;
&lt;p&gt;ちょっと待ってで、稍微等一下......这？？？？？&lt;/p&gt;
&lt;p&gt;如果说在第一版上线前，在市场进场前，我们一帮研发在没有需求没有指导的条件下乱搞就算了。&lt;/p&gt;
&lt;p&gt;熬到一个版本，哦不，都已经2.0上线了，居然还没明确“产品”？本以为只是领导和市场撇开我们研发开小灶，把摸过的石头、过完的河落在纸面，抛向市场。万万没想到，这大半年的市场工作是在连“这是个什么产品”都不明确的情况开展的？&lt;/p&gt;
&lt;p&gt;这...怎....能.....好....&lt;/p&gt;
&lt;p&gt;话说回来，很多事情也就变得不奇怪了。大概半年前吐槽过的“产品边界”问题，在那之后的日子里还在不断的持续发生着。所有功能都经历着：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;未知-&amp;gt;摸索-&amp;gt;成型-&amp;gt;上线
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这时候数据模型与功能看起来起码还是可泛化的，称得上“产品”的（也许吧）。&lt;/p&gt;
&lt;p&gt;然后&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;上线-&amp;gt;市场需求建议-&amp;gt;定制化功能
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就都变成需要在特定场景下才能运行得起来的东西。&lt;/p&gt;
&lt;p&gt;现在回头去看，目前的产品基本上已经失去“复制”属性，脱离当前试点医院根本无法运行。&lt;/p&gt;
&lt;h2&gt;我猜&lt;/h2&gt;
&lt;p&gt;“什么样的需求才是产品需求”“整理提炼出真正的需求”类似的话一直在被提出，但从未被“执行”。所以这已经不是“知”层面上的问题了，而是“知而不行”。&lt;/p&gt;
&lt;p&gt;为什么会“知而不行”呢？故意的？当然我们团队的人没这么“坏”。&lt;/p&gt;
&lt;p&gt;现在我能想到的，也许，这是“历史”在作怪。&lt;/p&gt;
&lt;p&gt;这个团队，或者说现在这家企业，过去是做项目建设的，某种程度来讲，也算得上是“外包”公司。其从来没有对一个“产品”从宏观上整体设计与把控的经验，做的都是有基本明确框架的事情。二来常年习惯于被甲方牵着狗绳走，现在惯性地把客户当成甲方了。&lt;/p&gt;
&lt;p&gt;既没有自己明确目标及路线，或者说是对自己的目标和路线缺乏信心，又极易被外部环境景象。这也许就是这个团队转型的真正痛点所在吧？&lt;/p&gt;
&lt;h2&gt;向前看&lt;/h2&gt;
&lt;p&gt;再回头去弥补“最初的工作”，并不晚。现在各方面都在照常运转，虽然进展缓慢，但还处于“正向”发展的势头。&lt;/p&gt;
&lt;p&gt;未来，会多留心观察一个令我好奇的事：一个团队的历史究竟会对这个团队的转型产生多大阻力？团队转型后会消除早期形成的“特色”，还是会保持？&lt;/p&gt;
&lt;p&gt;说不定到时能够搞个课题发表一下呢！（并不！）&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Mon, 16 Oct 2017 20:39:00 +0800</pubDate><guid>tag:,2017-10-16:2017/produce_diary_2017_10_16_20_39.html</guid><category>产品</category></item><item><title>不靠谱产品日记（19）</title><link>/2017/produce_diary_2017_09_14_23_08.html</link><description>&lt;h1&gt;2017-09-14&lt;/h1&gt;
&lt;h2&gt;进步&lt;/h2&gt;
&lt;p&gt;一年前，面对一个全新的领域，第一次提出来需要“学习”充电，但当时充斥着一股书非借不能读的的学习心态，也没后续。&lt;/p&gt;
&lt;p&gt;时隔一年，再次提及学习问题，这会终于不再是要求“别人教”，而是强调自学。这个心态上的转变，也算重大的进步了。不过领导有进步不代表能够将这份意识传递下去成为团队思维，还需要一段时间观察。&lt;/p&gt;
&lt;h2&gt;书痴者文必工，艺痴者技必良。&lt;/h2&gt;
&lt;p&gt;这里不说兴趣爱好。&lt;/p&gt;
&lt;p&gt;不抹去乌云，何来新大路；麦克斯韦妖不会出现在没有准备的人面前现形；不把纠缠的空间拆解开来怎么救出薛定谔关在箱子里的猫；没有多到溢出的行业知识加身，在行业中永远是雾里看花。&lt;/p&gt;
&lt;p&gt;大道理大家都懂，是知而行之，还是知而不知，就看个人了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Thu, 14 Sep 2017 23:08:00 +0800</pubDate><guid>tag:,2017-09-14:2017/produce_diary_2017_09_14_23_08.html</guid><category>产品</category></item><item><title>np.Cov</title><link>/2017/COV_2017_08_23_20_30.html</link><description>&lt;h2&gt;numpy&lt;/h2&gt;
&lt;h3&gt;发现&lt;/h3&gt;
&lt;p&gt;起因是无聊，明明协方差矩阵已经拿到了，又对某变量计算了一次方差，发现和协方差矩阵对角上对应值不符。明明同一个工具，这就怪了。
先是动手写了教科书说的方法做个测试，果然结果截然不同。&lt;/p&gt;
&lt;p&gt;很久之前写了个小工具来实现，所以在自己电脑上干活时比较少用numpy提供的方法来算协方差矩阵，偶尔用一下也没注意它的结果。今天这的偶然试了一下，发现结果跟下意识里的操作方式有点不太一样。&lt;/p&gt;
&lt;h3&gt;这个Cov不一样&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;默认变量是以行作为排列的，这点与大多数教科书上的描述方法都不一样了，在计算上要么&lt;code&gt;matrix.T&lt;/code&gt;将向量转到行上,或者将参数&lt;code&gt;rowvar&lt;/code&gt;设置为False。&lt;/li&gt;
&lt;li&gt;结果默认为无偏估计，既认为数据是样本数据，而不是总体，比较令人不舒服的地方是明明&lt;code&gt;np.var&lt;/code&gt;默认却是计算总体方差的。当然如果它连&lt;code&gt;np.var&lt;/code&gt;也是无偏的，那也就没今天这篇东西了。这里嘛，可以将参数&lt;code&gt;bias&lt;/code&gt;设置为False，使用&lt;code&gt;1/n&lt;/code&gt;进行计算。&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Wed, 23 Aug 2017 20:30:00 +0800</pubDate><guid>tag:,2017-08-23:2017/COV_2017_08_23_20_30.html</guid><category>algorithm</category><category>ML</category><category>Math</category></item><item><title>Keep-Alive</title><link>/2017/Keep_Alive_2017_08_01_14_13.html</link><description>&lt;h2&gt;Alive&lt;/h2&gt;
&lt;h3&gt;前情&lt;/h3&gt;
&lt;p&gt;前段时间时间写个测试脚本验证数据时，发现服务端在密集请求一段时间后会出现短时卡顿，极少量情况会出现链接过多tomcat主动切断请求的情况。&lt;/p&gt;
&lt;p&gt;由于目前该服务运行尚无用户压力，并且向相关同事确认已经启用访问复用，就没有再深究。&lt;/p&gt;
&lt;h3&gt;抓虫&lt;/h3&gt;
&lt;p&gt;今天正好有空查查问题。&lt;/p&gt;
&lt;p&gt;测试端添加Keep-Alive标签，将访问间隔去除，十分钟后又出现tomcat主动切断的情况，之后访问处于超时状态，几分钟后恢复。&lt;/p&gt;
&lt;p&gt;将间隔设置70毫秒左右，可持续访问30分钟无异常。&lt;/p&gt;
&lt;p&gt;这就基本可以判定是服务端并没有触发复用机制，导致连接池超上线了。&lt;/p&gt;
&lt;p&gt;平台同事说过他们添加过这方面的配置，那么就从测试脚本这边找问题。&lt;/p&gt;
&lt;p&gt;去搜了下&lt;code&gt;urllib2&lt;/code&gt;和&lt;code&gt;Keep-Alive&lt;/code&gt;，果然很快就找到问题，&lt;code&gt;urllib2&lt;/code&gt;默认不支持，需要换成&lt;code&gt;urllib3&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;正好今天的机器上装了&lt;code&gt;Anaconda&lt;/code&gt;，看了下里面带了&lt;code&gt;requests&lt;/code&gt;，索性就直接用第三方的lib好了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;application/x-www-form-urlencoded;charset=UTF-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="s1"&gt;&amp;#39;User-Agent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; DigExt)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="s1"&gt;&amp;#39;Connection&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Keep-Alive&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="s1"&gt;&amp;#39;Accept-Encoding&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;gzip,deflate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;requestData&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;param&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1800.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;最后&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;requests&lt;/code&gt;挺方便的，连&lt;code&gt;urlencode&lt;/code&gt;都自动处理了。&lt;/p&gt;
&lt;p&gt;虽然python随手写算法验证很便捷，但是便捷的极限还是有的，涉及上业务，哪怕一点，同样会有一堆堆未知的问题冒出来。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Tue, 01 Aug 2017 14:13:00 +0800</pubDate><guid>tag:,2017-08-01:2017/Keep_Alive_2017_08_01_14_13.html</guid><category>Web</category><category>HTTP</category></item><item><title>不靠谱产品日记（18）</title><link>/2017/produce_diary_2017_07_18_23_17.html</link><description>&lt;h1&gt;2017-07-18&lt;/h1&gt;
&lt;h2&gt;最高安全性&lt;/h2&gt;
&lt;p&gt;医院内部信息系统存在大量各种敏感的医疗数据，如患者的个人信息、诊断信息等。除此之外，还有许多医院的机密或核心业务数据内容，如诊断方法、用药方式等，因此保证医院信息系统数据的安全是极其重要的。&lt;/p&gt;
&lt;p&gt;多年来，医院“移不动”的很大原因之一就在数据安全方面的问题。&lt;/p&gt;
&lt;p&gt;作为少有的明确需求之一，大领导从一开始就一直在强调系统安全问题。&lt;/p&gt;
&lt;h2&gt;运维系统&lt;/h2&gt;
&lt;p&gt;前几个月，由于我们的产品的目标是以科室为单位，这意味着即便是只有一家医院，都有会有N套在运行，所以用医院系统的常规方法来维护系统的话，可预见的运维压力将来会无比的大。&lt;/p&gt;
&lt;p&gt;于是需要在院外设置一套管理系统，统一管理院内系统的版本以及行为监控。&lt;/p&gt;
&lt;p&gt;但是考虑到医院的安全性要求，这套管理机制必然与传统的分布管理方式不同。&lt;/p&gt;
&lt;h4&gt;传统的&lt;/h4&gt;
&lt;p&gt;传统的系统管理都会有一个中央控制机去控制各个节点，放到医院的场景，意味着每家医院都需要开放一个向院外公开的端口，端口的背后是可操作（某种形式）院内的权限。这种端口的存在本来就是最大的风险。&lt;/p&gt;
&lt;p&gt;另外中央系统位置特征将会很明显，一个硕大的靶子，一旦被攻破那所有的子系统都成肉鸡了。&lt;/p&gt;
&lt;h4&gt;“只要解决掉有问题的人就没有问题了”&lt;/h4&gt;
&lt;p&gt;针对上述问题，其实解决起来也不算难。&lt;/p&gt;
&lt;p&gt;解决的基本思路无非是绕圈子，只要“没有”中央控制系统，这些问题不就不复存在了嘛？&lt;/p&gt;
&lt;p&gt;所有主动权交给院内，中央系统只负责发布“任务”，然后院内系统自取任务，自行定义升级包特征，自行获取升级包，并自行检验与升级。所有行为均为异步进行，流程之间没有绝对的直接关联。&lt;/p&gt;
&lt;p&gt;这样一来，医院不需要开放外向内的端口，中央系统也没有直接控制权力。完美解决问题，牺牲的也只是一点等待时间和“即时性”带来极大的安全性。这种“异步”对于黑客来说，“解析”这种非同步的东西，可以说是非常头疼了。&lt;/p&gt;
&lt;h3&gt;更好的办法？&lt;/h3&gt;
&lt;p&gt;这套升级系统以及模块开发过程坎坷。先是由一个即将离职的人接手开发，过了一个月后交给一位newbee，虽然这套东西不算复杂，但对一个新人来说足够头疼了。再加上项目经理主要经历在主要业务的开发设计上，没时间去实时跟进。以致于整个开发过程跌跌撞撞，磨了两个月终于到接近尾声即将进入测试阶段时，大领导听了运维提出“更好”的开发思路，建议采用替换原设计。&lt;/p&gt;
&lt;p&gt;我与运维一聊，得，不久是在医院开放个远程端口，手动上传文件，然后用脚本执行文件么（当然没这么直白，还是包着一层web的皮，不过对于hacker来说没啥区别吧？）。&lt;/p&gt;
&lt;p&gt;这种安全问题极大的隐患，屡次强调安全的领导既然认为可行。所以“保证安全性”到底指的是什么？反复强调的系统安全到底是哪个层度的事？我突然蒙了......&lt;/p&gt;
&lt;h2&gt;最后&lt;/h2&gt;
&lt;p&gt;既然领导认可，我当然也举双手认同，毕竟有这么一个端口在，未来做什么调试都非常方便了。&lt;/p&gt;
&lt;p&gt;另外，以后的设计某种程度上又轻松一些，可以少考虑很多安全保障方面的东西，毕竟实际并不需要那么高的安全性的嘛。&lt;/p&gt;
&lt;p&gt;以前完全是被吓唬到了（笑）。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Tue, 18 Jul 2017 23:17:00 +0800</pubDate><guid>tag:,2017-07-18:2017/produce_diary_2017_07_18_23_17.html</guid><category>产品</category></item><item><title>不靠谱产品日记（17）</title><link>/2017/produce_diary_2017_07_17_23_35.html</link><description>&lt;h1&gt;2017-07-17&lt;/h1&gt;
&lt;p&gt;（略）。。。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;回头看，发现内容有些敏感，先隐藏掉。&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Mon, 17 Jul 2017 23:35:00 +0800</pubDate><guid>tag:,2017-07-17:2017/produce_diary_2017_07_17_23_35.html</guid><category>产品</category></item><item><title>ROC Curve</title><link>/2017/ROC_2017_07_03_19_46.html</link><description>&lt;h2&gt;ROC&lt;/h2&gt;
&lt;h3&gt;哔哔哔哔&lt;/h3&gt;
&lt;p&gt;这次这个统计工具分析不管从原理还是步骤，都比之前的卡方简单好多，但是最麻烦的地方是绘图的结果，试了很多种方法，得到的结果都与SPSS不符。最后全靠蒙，把thershold均匀分1000份，啊！！！结果看起来一样了。。。。。&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="1.png" src="/article_img/ROC_2017_07_03_19_46/1.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;正文&lt;/h3&gt;
&lt;p&gt;ROC的解释是反映敏感性和特异性连续变量的综合指标。简单来说就是显示&lt;code&gt;真阳性/(真阳性+真阴性)&lt;/code&gt; 与 &lt;code&gt;假阳性/(假阳性+真阴性)&lt;/code&gt;之间的关系，用别人文章里的话说就是预测命中率与错判率之间的关系。&lt;/p&gt;
&lt;p&gt;如果曲线下面积为1，既填满整个矩形，意味着预测准确率能够达到100%！&lt;/p&gt;
&lt;p&gt;具体过程比较简单，不分段解释了，直接贴完整的实验性质的代码吧。想知道详细过程的同学参看引用，特别是&lt;code&gt;第三篇&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这里有一点需要提的是，关于ROC，在最常被引用的、最容易被搜出来的某篇论文中，把AUC的标准误差写成标准差，而这里上面提到的那个&lt;code&gt;第三篇&lt;/code&gt;则写的是标准误差，至于谁对谁错，又或是我理解错误，就没精力去深究了，至少在本文的前提下，这个&lt;code&gt;第三篇&lt;/code&gt;中所描述的，和SPSS的结果输出相符。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# coding=utf-8&lt;/span&gt;
&lt;span class="n"&gt;__author__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;kai_kai03&amp;#39;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;

&lt;span class="c1"&gt;##这里我假装我的product是sex，sample为预测值。&lt;/span&gt;
&lt;span class="kp"&gt;sample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.65432&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.65484&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.65555&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.65835&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.65841&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.65847&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.65873&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.65879&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.65919&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.65951&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66061&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66067&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66106&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66120&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66133&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66145&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66164&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66164&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66165&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66167&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66171&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66177&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66184&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66184&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66222&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66261&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66275&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66287&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66293&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66294&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66301&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66325&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66332&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66338&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66365&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66383&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66383&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66390&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66390&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66423&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66428&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66437&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66441&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66448&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66448&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66450&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66473&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66481&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66493&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66494&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.66506&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;sex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;poz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;Z_MAX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;6.0&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kp"&gt;fabs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z_MAX&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
                &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((((((((&lt;/span&gt;&lt;span class="mf"&gt;0.000124818987&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;
                        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;0.001075204047&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.005198775019&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;
                        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;0.019198292004&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.059054035642&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;
                        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;0.151968751364&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.319152932694&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;
                        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;0.531923007300&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.797884560593&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;
                &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(((((((((((((&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.000045255659&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
                        &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.000152529290&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;0.000019538132&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
                        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;0.000676904986&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.001390604284&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
                        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;0.000794620820&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;0.002034254874&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
                        &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.006549791214&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;0.010557625006&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
                        &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.011630447319&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;0.009279453341&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
                        &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.005353579108&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;0.002141268741&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
                        &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.000535310849&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.999936657524&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getROCPiont&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thershold&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kp"&gt;product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;boundary&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;sumTp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;
    &lt;span class="n"&gt;sumFn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;
    &lt;span class="n"&gt;sumFp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;
    &lt;span class="n"&gt;sumTn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;

    &lt;span class="n"&gt;tpr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;
    &lt;span class="n"&gt;fpr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;

    &lt;span class="n"&gt;leng&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;leng&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;thershold&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="kp"&gt;product&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;boundary&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;sumTp&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;thershold&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="kp"&gt;product&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;boundary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;sumFp&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;thershold&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="kp"&gt;product&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;boundary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;sumFn&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;thershold&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="kp"&gt;product&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;boundary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;sumTn&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sumTp&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;tpr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;tpr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sumTp&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sumTp&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sumFn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sumFp&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;fpr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;fpr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sumFp&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sumFp&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sumTn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tpr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;fpr&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;min_score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;max_score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;## 最大值最小值均匀分成1000份，得到一个阈值数组&lt;/span&gt;
    &lt;span class="n"&gt;thr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kp"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min_score&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_score&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;roc_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;roc_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;## 这里我认为性别为1的为真。&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;getROCPiont&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;sex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kp"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;roc_x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kp"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;roc_y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kp"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="c1"&gt;## 获取输出表格的数据选取,均匀取出50个用于输出&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;thr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;roc_y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;  &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;roc_x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;##计算曲面下的面积。&lt;/span&gt;
    &lt;span class="n"&gt;AUC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;AUCList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="c1"&gt;##对曲线进行积分&lt;/span&gt;
        &lt;span class="n"&gt;area&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;roc_x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;roc_x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;roc_y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;AUC&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;area&lt;/span&gt;
        &lt;span class="c1"&gt;##将面积分成10片分别进行记录，用于后续计算方差。&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kp"&gt;fabs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AUC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;AUCList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kp"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;AUCList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kp"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kp"&gt;fabs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AUC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kp"&gt;fabs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AUC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;##因为跟计算方向有关系，有可能会算出负的来，所以要去掉符号。&lt;/span&gt;
    &lt;span class="n"&gt;AUC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kp"&gt;fabs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AUC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;auc:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;AUC&lt;/span&gt;

    &lt;span class="n"&gt;sump&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;sumn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ttt&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ttt&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;##相当于上面getROCPiont的参数boundary，这里我假设性别为1的为真。&lt;/span&gt;
            &lt;span class="n"&gt;sump&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;sumn&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="c1"&gt;##输出SPSS对应的观察值摘要表格&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;觀察值處理摘要:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;sump&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;sumn&lt;/span&gt;

    &lt;span class="n"&gt;q1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AUC&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;AUC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;AUCPow2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AUC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;q2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;AUCPow2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;AUC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AUC&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;AUC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="o"&gt;+&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sumn&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;AUCPow2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="o"&gt;+&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sump&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;AUCPow2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="o"&gt;/&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sump&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sumn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;q:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;q1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;q2&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Error(auc):&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;error&lt;/span&gt;

    &lt;span class="c1"&gt;##标准误差&lt;/span&gt;
    &lt;span class="n"&gt;SE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kp"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;SE(auc):&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SE&lt;/span&gt;

    &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AUC&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;SE&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;z:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;p:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;poz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;

    &lt;span class="n"&gt;meanAUC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AUC&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;

    &lt;span class="c1"&gt;##标准差&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;area&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;AUCList&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;area&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;meanAUC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;SD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kp"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;##置信区间上下限&lt;/span&gt;
    &lt;span class="n"&gt;Z_Alpha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.96&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;95% CI,下限:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AUC&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SE&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Z_Alpha&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;95% CI,上限:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AUC&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;SE&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Z_Alpha&lt;/span&gt;


    &lt;span class="c1"&gt;##绘图&lt;/span&gt;
    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;duijiaoxian&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kp"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;duijiaoxian&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;duijiaoxian&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;coral&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;roc_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;roc_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;References:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://blog.csdn.net/abcjennifer/article/details/7359370"&gt;ROC曲线-阈值评价标准. &lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Receiver_operating_characteristic"&gt;Receiver operating characteristic. &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://ncss.wpengine.netdna-cdn.com/wp-content/themes/ncss/pdf/Procedures/PASS/Confidence_Intervals_for_the_Area_Under_an_ROC_Curve.pdf"&gt;Confidence_Intervals_for_the_Area_Under_an_ROC_Curve. &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Mon, 03 Jul 2017 19:46:00 +0800</pubDate><guid>tag:,2017-07-03:2017/ROC_2017_07_03_19_46.html</guid><category>algorithm</category><category>ML</category><category>Math</category></item><item><title>不靠谱产品日记（16）</title><link>/2017/produce_diary_2017_07_01_17_49.html</link><description>&lt;h1&gt;2017-06-30&lt;/h1&gt;
&lt;h2&gt;迈出第二步&lt;/h2&gt;
&lt;p&gt;自第一个正式版本出厂至今，已过去半年，这半年里有推倒重造，也有新功能的加入。在数据抓取功能上线后，这周领导宣布由研发主导阶段进入市场为主的销售阶段。&lt;/p&gt;
&lt;p&gt;本是めでたしめでたし的事，毕竟草台班子嘛，总会搞出点事。&lt;/p&gt;
&lt;h2&gt;数据脏了！！&lt;/h2&gt;
&lt;p&gt;新的里程碑上线才过两天，一个来自新需求下来，将原始数据彻底搞乱。&lt;/p&gt;
&lt;h3&gt;背景条件&lt;/h3&gt;
&lt;p&gt;说正事前有必要先介绍一下事发背景。&lt;/p&gt;
&lt;h5&gt;数据&lt;/h5&gt;
&lt;p&gt;目前已知的数据源，都无法提供一个患者完整就诊记录判别方法。当然跟现实结合起来看，这事也是非常难办的，例如一个患者今天来就诊，那么他会有一个报告会在当天出、本周出、下周出······；例如医生会随访更进并补充病例；再例如护士手工录入非本院产生检查结论等。&lt;/p&gt;
&lt;p&gt;通过固定周期抓取，抓回来后再本系统内去重，以实现“增量”更新也是一种方法。这个方法有效单不可行，一来随着系统数据的积累，查询、对比压力还会快速上升；二来目前发现存在部分数据项不存在唯一ID、时间属性、内容完全相同还是合理的，也就是说无法事后判重的。&lt;/p&gt;
&lt;h5&gt;科研工作&lt;/h5&gt;
&lt;p&gt;科研工作非临床工作，只要保证使用的数据干净并且每“系列”数据完整即可，并没有数据实时性需求。&lt;/p&gt;
&lt;h4&gt;系统设计&lt;/h4&gt;
&lt;p&gt;基于上面两点，采集系统为解决数据的问题，设计了这么个策略：每天更新来源患者，仅仅保存患者流水（既挂号）基本信息，不拉取任何医疗数据。&lt;/p&gt;
&lt;p&gt;对于门诊患者，（14）日后获取一次医疗数据；住院患者出院后（35）日后再获取医疗数据；无论门诊还是住院，仅获取一次。&lt;/p&gt;
&lt;p&gt;这里拉取滞后时间是作为配置项由外部文件读入，随时可变更。但至于为什么选的是14和35，是多方调研后得到的最优结果。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;绝大多数门诊都会在一周左右得到所有报告，也不会存在长期多次检验，因为由于医院流程，长期的多次检验都会成为各自新的流水进行跟踪。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;出院前数据一直在产生，最后一条院内数据大概就是出院小结了。但是在“某些时候”或“某些情况”时，出院后大约2～4周，医生会对患者进行出院随访。在某些机构中该随访记录会记入患者上次住院记录中成为住院数据。所以设置在出院后35天再拉取患者数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;还有什么排队机制，序列回滚机制什么的细节就不细说了。&lt;/p&gt;
&lt;p&gt;滞后拉取保证了数据的完整性，又保证了效率、不会性能爆炸。&lt;/p&gt;
&lt;h3&gt;正题&lt;/h3&gt;
&lt;p&gt;介绍完背景提要回到正题。&lt;/p&gt;
&lt;p&gt;市场带回来一个新的需求就是，要尽可能快拉取数据，因为医院数据池本来就会晚个一两天才收集到现网数据，采集系统最慢4天内必须把数据拉取到并展示出来，供医生查阅、打印输出住院小结诊断总结等。感觉某种程度上想取代医生工作站的作用。&lt;/p&gt;
&lt;p&gt;这么一来，必然会出现数据不完整的情况。但在强烈要求下，还是这么做了。&lt;/p&gt;
&lt;h3&gt;why&lt;/h3&gt;
&lt;p&gt;“玩弄”数据的都知道数据缺失是一个令人头痛的问题，特别是在未知缺失项的情况下的缺失会导致数据分布偏离预想，要么放弃预想结果，要么想办法把数据通过射影变换或仿射变换拉回“正轨”（找出缺失影响小的角度进行“观测”）。但这不是件容易的事，更何况是“医生”来做更是天方夜谭。&lt;/p&gt;
&lt;p&gt;对负责市场的人来说，科研是“未来”的工作，并不是眼前的问题，所以这些都不重要，重点是如何能“服务”好医生。&lt;/p&gt;
&lt;p&gt;这就引出另外个问题：&lt;/p&gt;
&lt;h4&gt;产品的功能边界在何处？&lt;/h4&gt;
&lt;p&gt;一个产品中的每个业务线、每个功能都有它的边界和限制，不应该是无限扩展的。强行拓展使用场景，不断的增加功能，不断深入，不仅仅是把产品变得“大而全”，而且让产品失去“适应”人群。&lt;/p&gt;
&lt;p&gt;说一个产品的功能，无非讲的是它满足谁的需求，换一句说，便是提供的是一种服务，去服务用户。那么：&lt;/p&gt;
&lt;h4&gt;产品的服务边界在何处？&lt;/h4&gt;
&lt;p&gt;是否所有的需求都要满足？什么样的需求是需要我们全力以赴，什么样的需求是伪需求，不应该纳入产品？&lt;/p&gt;
&lt;p&gt;需要去服务什么样的人群，服务到什么程度。往往越精细的服务能够覆盖的人群就越少，“量”和“度”的模型参数需要精心设计。而这个“量”与“度”便决定了服务的边界，同时它也是由产品的属性决定的。那么：&lt;/p&gt;
&lt;h4&gt;产品的定义是什么？&lt;/h4&gt;
&lt;p&gt;产品的属性由产品的定义决定。&lt;/p&gt;
&lt;p&gt;这就又回到最根本的问题。这种东西在现阶段应该是不该公开说的，但......就算要说也说不出来，现在是这个产品的定义并没有非常明确，虽然有个是似而非的，但是所有人好像都没有以它为指导思想展开工作，所以就根本不存在严格的产品定义。&lt;/p&gt;
&lt;p&gt;进一步说，没有产品定义，就必然无法包装产品。没有“包装”，没有“指导”，面对市场必然只能发挥“主观能动性”，能动啥是啥。毕竟大家都在各自方向上“摸着石头”前行。&lt;/p&gt;
&lt;h2&gt;突然结束&lt;/h2&gt;
&lt;p&gt;今天不想再深入去想该如何解决上述问题（累），毕竟这些东西都不是现在这个阶段才考虑的事情，应该是在产品组成立前就确定的东西不是么。&lt;/p&gt;
&lt;p&gt;没有统一的goal，让产品像是一辆马车，马在车的四周随心的奔跑，又累又原地打转。&lt;/p&gt;
&lt;h5&gt;突然有个想法&lt;/h5&gt;
&lt;p&gt;&lt;em&gt;本来已经结束，突然冒出来个阴暗的想法：让人人都当“产品经理”的目的，其实就是这个产品本身并不“存在”，而是拉一群人乱搞，看碰运气能不能留下什么有用，又能打开新市场的东西？？？？&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;（真@完）&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;2017-07-03&lt;/h1&gt;
&lt;p&gt;经过一番争论后，数据拉取时间改为在门诊与出院后7日拉取数据。&lt;/p&gt;
&lt;p&gt;嘛～～反正区别的大，不就漏得少点而已嘛。&lt;/p&gt;
&lt;p&gt;（这回是真@真@完）&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Mon, 03 Jul 2017 21:49:00 +0800</pubDate><guid>tag:,2017-07-01:2017/produce_diary_2017_07_01_17_49.html</guid><category>产品</category></item><item><title>Chi-Square test</title><link>/2017/ChiSquare_2017_06_28_19_29.html</link><description>&lt;h2&gt;Chi-Square&lt;/h2&gt;
&lt;h3&gt;惯例的事前唠叨&lt;/h3&gt;
&lt;p&gt;最近医疗科研平台呢要开始制作数据数据分析部分，数据准备及数据操作设计好之后，利用空档期找找统计方法库，好安排后续的事。&lt;/p&gt;
&lt;p&gt;结果一调研下来，事情可没事前那么简单，SPSS的行为核心并不是统计方法本身，而是围绕着一个统计方法的一系列检测方法。这就麻烦了，特别是不同方法的误差估计不一样，即使同一个估计方法，不同的参数（人择），也会有不同结果。&lt;/p&gt;
&lt;p&gt;更要命的是，好多stat的库都是只提供统计方法本身，而不关注相关的分析部分。&lt;/p&gt;
&lt;p&gt;另，java上好用的库更少，现在项目要求又是java。&lt;/p&gt;
&lt;p&gt;由于我只是做设计验证，为了码代码的速度，主要过程用得还是python，中间会含一部分java，因为java中有现成的统计方法，顺便测试下方法计算结果对不对。&lt;/p&gt;
&lt;h3&gt;正文&lt;/h3&gt;
&lt;p&gt;本片主要是记录一下，以拟合SPSS输出结果为目的的卡方检验实现方法。&lt;/p&gt;
&lt;p&gt;卡方检验属于非参数检验的范畴，它是计算样本的实际值与理论值之间的偏离程度，这个程度值就是卡方值，卡方值越小，偏差越小，若两个值完全相等时，卡方值就为0，表明理论值完全符合。&lt;/p&gt;
&lt;p&gt;以下照着SPSS的输出，一步步处理数据。&lt;/p&gt;
&lt;h3&gt;第一步&lt;/h3&gt;
&lt;p&gt;统计有效值，计算缺失值，显示。这一步没什么好细说的，显示一下数据概况，然后把缺失值以及对应的数去掉。&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="1.png" src="/article_img/ChiSquare_2017_06_28_19_29/1.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;第二步&lt;/h3&gt;
&lt;p&gt;绘制四格表，一般教学上是这样说的，但是SPSS支持N格表，并且支持非方阵形式的表格。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;取得自变量的分类以及因变量的分类。这时就相当于确定了这个N格表的行与列的内容了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;columeKeys = list(set(X)) ##相当于groupby，确定输出的交叉表有几列
rowKeys = list(set(Y)) ##确定输出的交叉表有几行
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算自由度&lt;code&gt;df&lt;/code&gt;，&lt;code&gt;（row-1）*（column-1）&lt;/code&gt;,这玩意后面会作为各种方法的参数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;df = (len(columeKeys)-1)*(len(rowKeys)-1)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据统计出来列的种类按行去分拣数据，简单的理解就是按行列把表格画出来，统计每个格子对应的数据一共有几个。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;resualtMap = {}
for columeKey in columeKeys:
    indexsInX = [i for i,a in enumerate(X) if a==columeKey] ##查找每个columeKey在数据中的位置
    counts = {}
    for ix in indexsInX: ##统计每个columeKey在Y中有分别有几个rowKeys
        if counts.has_key(Y[ix]):
            counts[Y[ix]] += 1
        else:
            counts[Y[ix]] = 1
    resualtMap[columeKey] = counts
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算每行的统计结果总数，每列的统计结果总数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;rowSum = {}
for rowKey in rowKeys:
    rowSum[rowKey] = len([i for i,a in enumerate(Y) if a==rowKey])
print &amp;#39;行统计的总数:&amp;#39;,rowSum

columeSum = {}
for columeKey in resualtMap.keys():
    columeSum[columeKey] = 0
    for rowkey in resualtMap[columeKey].keys():
        columeSum[columeKey] += resualtMap[columeKey][rowkey]
print &amp;#39;列统计的总数:&amp;#39;,columeSum
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接下来就可以绘制这张交叉表了。这里没做前端界面，所以以&lt;code&gt;print&lt;/code&gt;来假装自己在绘图。在绘图过程中，可以顺便把观察值和理论值（既期望）计算出来为后续分析过程做准备，免得后面再循环一遍。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;N = len(X)
observed = []
expected = []
for rowKey in rowKeys:
    for columeKey in resualtMap.keys():
        cell = resualtMap[columeKey].get(rowKey,0)##实际值
        observed.append(cell) ##顺便把每个实际值记入列队，用于后续计算
        rowRadio = float(cell)/rowSum[rowKey]##行占比
        columeRadio = float(cell)/columeSum[columeKey]##列占比
        expect = (float(columeSum[columeKey])/N)#该格对应的期望*rowSum[rowKey]
        expected.append(expect)##把每个期望值记入列队，用于后续计算

        print cell,&amp;quot;,&amp;quot;,&amp;quot;%.2f%%&amp;quot;%(rowRadio*100),&amp;quot;,&amp;quot;,&amp;quot;%.2f%%&amp;quot;%(columeRadio*100),&amp;quot;|&amp;quot;,
    print rowSum[rowKey],&amp;quot;,&amp;quot;,&amp;quot;100%&amp;quot;,&amp;quot;,&amp;quot;,&amp;quot;%.2f%%&amp;quot;%(float(rowSum[rowKey])/N*100)

for columeKey in resualtMap.keys():
    print columeSum[columeKey],&amp;quot;,&amp;quot;, &amp;quot;%.2f%%&amp;quot;%(float(columeSum[columeKey])/N*100),&amp;quot;,&amp;quot;,&amp;quot;100%&amp;quot;,&amp;quot;|&amp;quot;,
print N,&amp;quot;,&amp;quot;,&amp;quot;100%&amp;quot;,&amp;quot;,&amp;quot;,&amp;quot;100%&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="2.png" src="/article_img/ChiSquare_2017_06_28_19_29/2.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;第三步&lt;/h3&gt;
&lt;p&gt;这步开始使用java方法，顺便验证第三方库&lt;a href="https://www.ee.ucl.ac.uk/~mflanaga/java/"&gt;flanagan&lt;/a&gt;，看看好不好使。&lt;/p&gt;
&lt;p&gt;选这个库的原因仅仅只是因为之前用它来做过一次正态性检验。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;拿着观察值和理论值去计算卡方值。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.commons.math3.stat.inference.TestUtils&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;flanagan.analysis.Stat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.lang.Math&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="n"&gt;cs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Stat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chiSquareFreq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;observed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算卡方p值。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;public static double getApproxGamma(double n) {
    // RECIP_E = (E^-1) = (1.0 / E)
    double RECIP_E = 0.36787944117144232159552377016147;
    // TWOPI = 2.0 * PI
    double TWOPI = 6.283185307179586476925286766559;
    double d = 1.0 / (10.0 * n);
    d = 1.0 / ((12* n) - d);
    d = (d + n) *RECIP_E;
    d = Math.pow(d,n);
    d *= Math.sqrt(TWOPI/ n);
    return d;
}

public static double log_igf(double s, double z) {
    if (z &amp;lt; 0.0) {
        return 0.0;
    }
    double sc = (Math.log(z) * s) - z - Math.log(s);
    double k = KM(s, z);
    return Math.log(k) + sc;
}

private static double KM(double s, double z) {
    double sum = 1.0;
    double nom = 1.0;
    double denom = 1.0;
    double log_nom = Math.log(nom);
    double log_denom = Math.log(denom);
    double log_s = Math.log(s);
    double log_z = Math.log(z);
    for (int i = 0; i &amp;lt; 1000; ++i) {
       log_nom += log_z;
       s++;
       log_s = Math.log(s);
       log_denom += log_s;
        double log_sum = log_nom - log_denom;
       sum += Math.exp(log_sum);
    }
    return sum;
}

private static double chisqr2pValue(int dof, double chi_squared) {
    if (chi_squared &amp;lt; 0 || dof &amp;lt; 1) {
        return 0.0;
    }
    double k = ((double) dof) * 0.5;
    double v = chi_squared * 0.5;
    if (dof == 2) {
        return Math.exp(-1.0 * v);
    }
    double incompleteGamma = log_igf(k,v);
    // 如果过小或者非数值或者无穷
    if (Math.exp(incompleteGamma) &amp;lt;= 1e-8
           || Double.isNaN(Math.exp(incompleteGamma))
           || Double.isInfinite(Math.exp(incompleteGamma))) {
        return 1e-14;
    }
    double gamma = Math.log(getApproxGamma(k));
   incompleteGamma -= gamma;
    if(Math.exp(incompleteGamma) &amp;gt; 1){
        return 1e-14;
    }
    double pValue = 1.0 - Math.exp(incompleteGamma);
    return (double) pValue;

chisqr2pValue(df, cs));//卡方p值（Asymp 2-sided）
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;取代观察值中的0值，以及对应的理论值，计算释然比，以及相对应的p值。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;double likelihood = 0;
for(int i =0 ;i&amp;lt;20;i++){
    double tmp = observed2[i]*Math.log(observed2[i]/expected2[i]);
    likelihood += tmp;

}
likelihood = likelihood*2;//似然比 Likelihood Ratio
chisqr2pValue(df, likelihood);//似然比p值（Asymp 2-sided）
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里吐槽一下，用JDK自带&lt;code&gt;math3.stat&lt;/code&gt;的似然比计算方法算出来结果居然不对。但我按它文档中函数注释的算法来计算，却得到正确的结果，神奇。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;使用自变量与因变量的原始值计算皮尔逊相关系数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;double piersion= Stat.corrCoeff(X, Y);
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用皮尔逊相关系数计算线性关系LinearByLinearAssociation，以及对应的p值。此时自由度为1。(这理所当然嘛，是算自变量与因变量的关系，自由度自然是1。) &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;double linearByLinearAssociation= (N-1)*Math.pow(piersion,2);
//linear-By-Linear  Association 的p值（Asymp 2-sided）
chisqr2pValue(1, linearByLinearAssociation);
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="3.png" src="/article_img/ChiSquare_2017_06_28_19_29/3.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;第四步（非必要）&lt;/h3&gt;
&lt;p&gt;接下来咱回到python&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;如果当&lt;strong&gt;交叉表为方阵&lt;/strong&gt;的时候，进行kappa检验。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;columeCount = len(columeKeys) ##取得行数，这里行列一样嘛
po = 0.0
for i in range(columeCount):
    po += float(observed[columeCount*i+i])  ##取得对角，相当于真阳性真阴性的observed的总和
po  =  po/N
pc = 0.0 ##真阳性的observed对应的  行总和 * 列总和
for i in range(columeCount):
    row = 0.0
    colume = 0.0
    for irow in range(columeCount):
        row+=float(observed[columeCount*i+irow])
    for icolume in range(columeCount):
        colume+=float(observed[i+icolume*columeCount])
    pc+=(row*colume)
pc = pc/(N**2)
k =  (po - pc)/(1-pc)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算kappa值的标准误差。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$$ \sqrt{\frac{1}{(1-pc)^{2}}(Pe^{2}+Pe-\sum R_{i}C_{i}(R_{i}+C_{i})/N^{3})} $$&lt;/p&gt;
&lt;p&gt;pc 同1&lt;/p&gt;
&lt;p&gt;Ri，Ci 对应的行总和与列总和&lt;/p&gt;
&lt;p&gt;N 总样本数（去除无效值或缺失值）&lt;/p&gt;
&lt;p&gt;这里选用的计算方法如上,还有另一种计算方法，参照文章后1987的那篇引用。那篇论文是先去估计整体标准差，然后根据表格的不同大小，再进一步估计标准误差。感觉精度会更高一些，但这个估计过程太麻烦了，或者说按照论文中的做法，人的决定因数太大，暂时先不用。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    ppp = 0.0
    for i in range(columeCount):
        row = 0.0
        colume = 0.0
        for irow in range(columeCount):
            row+=float(observed[columeCount*i+irow])
        for icolume in range(columeCount):
            colume+=float(observed[i+icolume*columeCount])
        ppp+=(row*colume)*(row+colume)
    E= 1/(N*(1-pc)**2)  * ( pc**2 + pc - ( ppp/math.pow(N,3) ) )
    SE = math.sqrt(E)
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;计算kappa的标准误差的p-value&lt;div class="highlight"&gt;&lt;pre&gt;def poSE(SE):
    SE_MAX = 6.0
    if (SE == 0.0) :
        x = 0.0
    else:
        y = 0.5 * math.fabs(SE)
        if y &amp;gt;= (SE_MAX * 0.5) :
            x = 1.0
        elif y &amp;lt; 1.0:
            w = y * y
            x = ((((((((0.000124818987 * w
                    - 0.001075204047) * w + 0.005198775019) * w
                    - 0.019198292004) * w + 0.059054035642) * w
                    - 0.151968751364) * w + 0.319152932694) * w
                    - 0.531923007300) * w + 0.797884560593) * y * 2.0
        else:
            y -= 2.0
            x = (((((((((((((-0.000045255659 * y
                    + 0.000152529290) * y - 0.000019538132) * y
                    - 0.000676904986) * y + 0.001390604284) * y
                    - 0.000794620820) * y - 0.002034254874) * y
                    + 0.006549791214) * y - 0.010557625006) * y
                    + 0.011630447319) * y - 0.009279453341) * y
                    + 0.005353579108) * y - 0.002141268741) * y
                    + 0.000535310849) * y + 0.999936657524
    if SE &amp;gt; 0.0:
        return (x + 1.0) * 0.5
    else:
        return (1.0 - x) * 0.5
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="4.png" src="/article_img/ChiSquare_2017_06_28_19_29/4.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;这里的图截图的时候，交叉表并不是方阵，所以kappa为0。&lt;/p&gt;
&lt;p&gt;不过这里的&lt;code&gt;gamma&lt;/code&gt; 和 &lt;code&gt;T&lt;/code&gt; 就没做，分析员说这些东西基本不看，所以就就没贴过来。&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.ee.ucl.ac.uk/~mflanaga/java/"&gt;Michael Thomas Flanagan's Java Scientific Library.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://influentialpoints.com/Training/standard_error_of_kappa.htm"&gt;Standard Error of Kappa.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.med.mcgill.ca/epidemiology/Hanley/Reprints/Standard_Error_1987.pdf"&gt;Standard Error of The Kappa Statistic（1987）.&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Wed, 28 Jun 2017 19:29:00 +0800</pubDate><guid>tag:,2017-06-28:2017/ChiSquare_2017_06_28_19_29.html</guid><category>algorithm</category><category>ML</category><category>Math</category></item><item><title>不靠谱产品日记（15）</title><link>/2017/produce_diary_2017_05_20_23_01.html</link><description>&lt;h1&gt;2017-05-20&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;“为什么带帽子” 啪～；
“为什么不带帽子” 啪～；
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;今天又出现了横竖都是错的情况。&lt;/p&gt;
&lt;h2&gt;三周时间线&lt;/h2&gt;
&lt;p&gt;上上周，某核心的附带功能——是否要把某些东西显示给医生看，又是没有需求，项目设计“顺便”把产品一并设计的情况。&lt;/p&gt;
&lt;p&gt;一周时间过后，例会上：“为什把这些东西费功夫做这个，展示出来没有意义，医生要想看在工作站上都是。”，嗯，被否决了，也没什么问题，一个坐在办公室里闭门造车的拍脑袋设计嘛。于是，这个展示功能理所应当、理由完全地被去掉了。&lt;/p&gt;
&lt;p&gt;本周例会：“为什么不展示出来？医生都看不到东西、看不到我们工作的进展，那么花那么大劲做了有什么意义。”&lt;/p&gt;
&lt;h2&gt;快速结尾&lt;/h2&gt;
&lt;p&gt;得，虽然这不是第一次了，但这么直白的还是首次。&lt;/p&gt;
&lt;p&gt;反正我们这种没有产品经理的就这样的啦，反正都能“摸着石头过河”来自我安慰。但是人的积极性基本也就这样一点点被抹掉的，难怪在与不在最老一批人中，一部分总是满满的消极情绪。&lt;/p&gt;
&lt;p&gt;没记错的话之前有写过同样的内容，就不吐槽更多了，今天简短的写一点纯当记事。じゃあ〜&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Sat, 20 May 2017 23:01:00 +0800</pubDate><guid>tag:,2017-05-20:2017/produce_diary_2017_05_20_23_01.html</guid><category>产品</category></item><item><title>不靠谱产品日记（14）</title><link>/2017/produce_diary_2017_04_04_20_17.html</link><description>&lt;h1&gt;2017-04-04&lt;/h1&gt;
&lt;h2&gt;呵呵&lt;/h2&gt;
&lt;p&gt;经过了多次毫无意义又拦不住的“数据怎么合并”问题讨论，依然没得到任何结论。终于随着一个通用的数据中间系统的设计完成，意味着数据的“目的”将脱离数据层本身，上升至业务层，非对称数据存储问题不再是问题。明明之前都甚至出现想要改变数据关系和内容来解决数据不对称问题了，现在却恬不知耻的“我们一向坚持数据原始性原则”。&lt;/p&gt;
&lt;p&gt;吐槽点到即止，设计结束、研发已经开始干活，我的工作算是又到一个角色转换的节点。趁今天有点时间，针对设计做总结下。&lt;/p&gt;
&lt;h2&gt;前提&lt;/h2&gt;
&lt;p&gt;即便是同行，不同企业的数据存放与提供方式都不同。在医疗行业，虽然国家有统一标准，但是没见过有人遵从的。当然标准陈旧不适合时代也是一方面问题。&lt;/p&gt;
&lt;p&gt;对于资源整合角色的系统，面临的一大难题便是需要不断地、重复的开发定制化版本，以适应不同的生产系统、数据源、版本带来的数据和接口差异。大量定制系统的后续维护，不光带来大量的成本支出，还指数级地增加管理的难度。&lt;/p&gt;
&lt;h2&gt;Liasion&lt;/h2&gt;
&lt;p&gt;我们把这个中间系统叫接口机。&lt;/p&gt;
&lt;p&gt;它设计的初衷就是为了解决上面提到的问题，做一个万能数据中转站，为业务系统提供统一的接口和数据。&lt;/p&gt;
&lt;p&gt;系统分为三层及一个控制器：&lt;/p&gt;
&lt;h3&gt;通信层&lt;/h3&gt;
&lt;p&gt;将通信方式模块化，集成常见的通信方式。控制器将根据所要对接的资源系统，选择对应的通讯方式，并根据配置初始化通讯协议并注入通信层。&lt;/p&gt;
&lt;h3&gt;逻辑层&lt;/h3&gt;
&lt;p&gt;提供什么样的业务接口；要去访问什么资源接口，怎么访问，需要几次+几种访问组合才能够满足一个业务接口的需要，资源访问顺序等。&lt;/p&gt;
&lt;p&gt;以上这些工作由逻辑层完成，但是逻辑层内并不含任何“现实逻辑”，而是由控制器注入来得到。&lt;/p&gt;
&lt;h3&gt;转换层&lt;/h3&gt;
&lt;p&gt;获取到资源系统的数据后需要将其映射成业务系统的数据，简单的说就是需要一张数据字典，来“认识”资源数据，然后与业务数据一一对应，并丢弃掉多余数据。这个“数据字典”同样也是由控制器提供。&lt;/p&gt;
&lt;h3&gt;控制器&lt;/h3&gt;
&lt;p&gt;读取配置文件，分配资源，初始化系统，登陆资源系统，建立整体工作流程等，以及其他系统升级啥的细碎工作。&lt;/p&gt;
&lt;h2&gt;工作原理&lt;/h2&gt;
&lt;p&gt;从上面可以看出来，三个工作层，其本身并不含任何与实际业务有关的业务逻辑，仅仅是一个“框”，真正的业务逻辑都是由外部提供的。&lt;/p&gt;
&lt;p&gt;三个工作层对应着三个配置文件，分别称为&lt;code&gt;接口定义字典&lt;/code&gt;、&lt;code&gt;流程定义字典&lt;/code&gt;、&lt;code&gt;数据字典&lt;/code&gt;（当然还有另一个系统资源配置文件用来记录ip端口啥的）。&lt;/p&gt;
&lt;p&gt;接口机真正核心的地方就是将这三个字典转换为业务逻辑和程序逻辑，让每一个接口机的看起来都像是专门开发的，但实际上却没开发人员什么事！！&lt;/p&gt;
&lt;h2&gt;优势&lt;/h2&gt;
&lt;p&gt;通过把“现实业务”从系统中剥离出去，实现“统一”。这个“统一”带来的好处就是一旦开发完成并稳定后，去对接任何资源系统，都无需研发干涉，只要运维人员在图形工具上对着资源系统的文档将三个字典配置完成即可。&lt;/p&gt;
&lt;p&gt;另一个优势就是，接口机这种工作思路促成了业务系统在设计初最大化数据存储，不用再纠结数据怎么组织与合并，只需要将所有数据最大化的存下来即可，也就保证了数据原则问题。&lt;/p&gt;
&lt;h2&gt;最后&lt;/h2&gt;
&lt;p&gt;接口机的这种工作模式用“函数式”来开发再适合不过了，而且还简单。&lt;/p&gt;
&lt;p&gt;哎，由于现有研发人员的水平不足，很多机制和原理上的东西解释了一天了，都还听得云里雾里的，也没给点反馈，看来接下来只能想办法找替代方案简化开发了（苦笑。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Tue, 04 Apr 2017 20:17:00 +0800</pubDate><guid>tag:,2017-04-04:2017/produce_diary_2017_04_04_20_17.html</guid><category>产品</category></item><item><title>不靠谱产品日记（13）</title><link>/2017/produce_diary_2017_03_31_17_00.html</link><description>&lt;h1&gt;2017-03-31&lt;/h1&gt;
&lt;p&gt;之前不是被削测试时间了嘛。然后还逼着运维去医院部署了。结果就是光部署都花了很长时间，不管现场还是远程配合的技术人员，都手忙脚乱的，不断的涌现出新问题。最长一次花了大约3天才部署完成。即便部署完成后的日常运行中依旧高密度涌现各种bug。&lt;/p&gt;
&lt;p&gt;期间经历3次大版本升级，每次升级都重复着上边的悲剧。&lt;/p&gt;
&lt;p&gt;经过两个月多月的折磨，领导们终于决定放开测试时间，不再将测试纳入研发周期，完全独立由质管部门控制，并在测试周期中加入集成测试、发布测试及市场验收环节。&lt;/p&gt;
&lt;p&gt;嘛，这回算是第一次，真正地把质量控制从嘴里说说，到实际落实了。管理流程的一大进步啊。希望能坚持下去。&lt;/p&gt;
&lt;p&gt;不过有点心虚的就是现在还是研发工作在占主要地位，未来转到市场主导的时候，悲剧是否会继续上演？&lt;/p&gt;
&lt;p&gt;只能说：可能性ある。&lt;/p&gt;
&lt;p&gt;－完－&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Fri, 31 Mar 2017 17:00:00 +0800</pubDate><guid>tag:,2017-03-31:2017/produce_diary_2017_03_31_17_00.html</guid><category>产品</category></item><item><title>不靠谱产品日记（12）</title><link>/2017/produce_diary_2017_03_16_22_08.html</link><description>&lt;h1&gt;2017-03-16&lt;/h1&gt;
&lt;h2&gt;发现问题&lt;/h2&gt;
&lt;p&gt;医院的各种并行系统，新老数据，还有我们产品使用方式等几个方面，综合起来，会有一定概率出现一个问题：出现多套不同的数据难以判断是否真正属于同一个患者。&lt;/p&gt;
&lt;h2&gt;办法陈列&lt;/h2&gt;
&lt;p&gt;解决这种问题的方法无非这几种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;强制人为干预，检查是否数据的关系项是否存在人为错误。如果通过其他证据可判断数据属于同一归属，那么执行数据合并；如果发现数据属于其他，且关系可修正，执行补正需要的操作，并将数据放入其该存在的地方。&lt;/li&gt;
&lt;li&gt;或找个角落放着等着执行（1）。&lt;/li&gt;
&lt;li&gt;以无归属属性存放，数据仅用于研究个例无关的宏观分析。&lt;/li&gt;
&lt;li&gt;系统自动抛弃。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;讨论决策&lt;/h2&gt;
&lt;p&gt;基于“方便用户”：人为干预不友好；&lt;/p&gt;
&lt;p&gt;基于“数据完整性（？）”：数据是宝贵的，不能丢。&lt;/p&gt;
&lt;p&gt;基于“方便我们”：开发太复杂，并且这是“小概率事件”，没关系，等出问题再说；“科研只研究大样本”，一点错误没啥关系啦；（？？？我都不知道这产品什么时候确定了只做群体性研究这么个定位了）&lt;/p&gt;
&lt;p&gt;产品组的最终讨论结果：不用考虑太多，只要数据间稍微有点联系，就当做确定的关系，进行合并。&lt;/p&gt;
&lt;h2&gt;最后&lt;/h2&gt;
&lt;p&gt;已经不知道数据完整性的定义到底是啥了。这种通过概率制造人为脏数据来维持的“完整性”。。。。&lt;/p&gt;
&lt;p&gt;哎，可选方法有不少，偏偏做出了最烂的决定。在数据在使用前，任何倒手过程中都不应该改变其内容。危害有哪些之前提到过，这回就不再啰嗦了。没被数据坑过的人真的难以想象“数据有毒”个什么概念。不仅有毒，特么的是剧毒。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Thu, 16 Mar 2017 22:15:00 +0800</pubDate><guid>tag:,2017-03-16:2017/produce_diary_2017_03_16_22_08.html</guid><category>产品</category></item><item><title>不靠谱产品日记（11）</title><link>/2017/produce_diary_2017_02_20_20_52.html</link><description>&lt;h1&gt;2017-02-20&lt;/h1&gt;
&lt;h2&gt;盖呀盖呀盖房子&lt;/h2&gt;
&lt;h3&gt;曲线救国？&lt;/h3&gt;
&lt;p&gt;两周前，市场从医院带回来新的需求。沉淀了两个礼拜后，今天正式确定要做进产品中。&lt;/p&gt;
&lt;p&gt;做个什么东西呢？－－“标本管理”，简单的说，就是对临床上的一样血样之类的采样标本进行管理，类进销存的一套工作流程。&lt;/p&gt;
&lt;p&gt;虽然标本最后会产生数据，但是数据我们都将会直接从院内系统中取得，也就是说，这玩意和核心－－科研没有半毛钱关系。要做进产品的理由是：哎呀，有这个东西医生日常就会用我们产品啦（科研一般是先确定课题才有人想到数据，跟我们玩金融数据的日常不太一样），用啦这个他们就有机会进一步去使用核心功能啦，我们就能完全融入工作环节啦，云云。&lt;/p&gt;
&lt;h3&gt;功能堆砌罢了&lt;/h3&gt;
&lt;p&gt;我们这些没有行业经验的做产品就这样啦。&lt;/p&gt;
&lt;p&gt;开个玩笑。&lt;/p&gt;
&lt;p&gt;现在早过了堆功能时代，现代人生活节奏如此之快，导致“浮躁”已经成为人们对待事物的方式。所以功能堆砌这种产品制作方式徒增误操作机会和接受成本，仅仅是在浪费资源，每增加一个特性、功能，步骤都增加体验失败的机会，反而难以提供良好的体验。&lt;/p&gt;
&lt;p&gt;当然也有特例，就是产品功能多元化能增加产品的抗风险和抗打击能力，体现出刺猬优势。不过这明显不适用于产品初期，即便是产品大后期，也不乏有些控制力不足的企业被多元化把自己玩死的例子。&lt;/p&gt;
&lt;h3&gt;简约&lt;/h3&gt;
&lt;p&gt;自从20世纪后，不管是互联网产品、家用电器，甚至是工业工具，逐步的在往“简约”方向在进化。&lt;/p&gt;
&lt;p&gt;某广告词这样说的：“简约，不简单”，ソ〜，简约不是简单的代名词，它反而代表着更高的要求，突出核心，仅表达想要传达的理念思想，以温和优雅的形态，进行高度融合，让用户直接沐浴在核心理念的光辉下，却能同时得到更多收获。&lt;/p&gt;
&lt;p&gt;如果产品依赖用户主动性，在简约的基础上，还需要考虑将核心附带上“娱乐性”，即使是面对严谨工业、生产、科研，也需要融入广义上的“趣味性”设计（主观以外，非原始诉求，但又不意外，例如知识，例如围绕结果的辅助决策等等）。让用户是“参与”到产品中，而不是“使用工具”。&lt;/p&gt;
&lt;h3&gt;那科研还能怎么玩？&lt;/h3&gt;
&lt;p&gt;通过借用现实例子，来讲讲我个人认为围绕科研分析这个核心，提升“趣味”的“设计”应该是什么样的。&lt;/p&gt;
&lt;p&gt;先摆几个前提，虽然之前有些都提到过：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;大部分医生（统称医生啦，有可能是护士也可能是研究生实习生临时工等，下同）的统计、数据方面的基础很差。&lt;/li&gt;
&lt;li&gt;大部分医生的数据直觉并不强，分析内容的选择从临床经验来。&lt;/li&gt;
&lt;li&gt;临床科研都是先经过诸多流程把课题立项再把课题当工作去解决的。这个解决的过程，才是医生对临床科研的“定义”。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下将围绕以上，看如何将科研变得“有趣”。&lt;/p&gt;
&lt;h4&gt;分析&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;不能去模拟现实，不能按照“选题”－&amp;gt;“立项”－&amp;gt;“建立课题”－&amp;gt;“分析”这个现实流程去进行实现。毕竟“课题”的存在，对于医生的整个生命周期过程中，占比非常低。按照先有课题再有科研建设，便无论怎么搞，都一定会违背了想要用户更高参与度的目的。&lt;br /&gt;“课题”这个东西在“前”，将成为隐形的门槛。在没有课题要研究的情况，用户需要去思考“要做什么”，“要分析什么”，“怎么分析”，都想清楚后才能参与到产品使用中来（否则的话只能靠别的东西来让用户“提前”参与了）。这对用户来说就有很大的负担了。&lt;br /&gt;虽然能随便编一个课题就能继续使用，但这终究只是一个理想化的一厢情愿，大多数用户都不会有这种跳跃思维，特别是在面对一个“严谨”、“大型”的系统的时候。更何况还有现实流程作为“经验”在束缚着思想。&lt;/li&gt;
&lt;li&gt;不能（一开始就）让用户面临选择。将要说的第二个门槛来自于参与医生的临床经验不足。实际参与“科研”的很大可能都是些实习生、助理之类的角色，甚至是一些医疗无关的人。”课题“被领导立项后，科研工作跟普通杂活一样被分配给下边人来实施。我们产品的实际参与人很大可能就是这样的一群人。&lt;br/&gt;那么对于这些用户，让他们选择所要研究的细节内容（数据），将会成为一道高槛。他们会面对着大量参数、指标数据、医嘱数据、用药数据，一脸懵逼，体验极差。&lt;/li&gt;
&lt;li&gt;不能（一开始）让用户直接处理数据。理由是由于医生们的数据分析、统计方面能力都比较弱（其实对于能力强的用户，在分析部分，我们是没法提供服务的，因为数据中的隐变量的发现和消除与被分析实体和所处环境有关，无法做成统一工具。而初级数据分析者不会考虑这方面的问题。），存在统计方法乱用、滥用的现象，导致诸多分析结果表面上看似分析完成的到结论，但实际上毫无意义。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;这么玩！这样玩！&lt;/h3&gt;
&lt;p&gt;其实&lt;code&gt;分析&lt;/code&gt;部分说的，反过来做便是功能设计的方向。没有课题，那么就把课题往后放；不知道怎么选数据项，那么就不选；不会处理数据，那就不要处理，直接给出结果。当然不是给最终结果，毕竟没有“课题”的情况下并不存在研究目的嘛。而且，最终阶段的数据处理与结论还是需要人来做的。&lt;/p&gt;
&lt;p&gt;那么我们还能干什么呢？&lt;/p&gt;
&lt;p&gt;第一眼，给他看当前现有数据与疾病相关性；作为医生，研究的对象肯定是疾病。一个疾病会产生的相关数据总类也会很多，系统先自动做一次初筛，将正相关性强的直接提炼出来，负相关的标记出来，用相关性系数构建出疾病的“高维网络拓扑图”。毕竟看图比看别的任何形式的内容展示方式都要“舒服”。进一步，提供不同“观测视角”，通过用户主动切换，系统将拓扑图根据用户的需要，映射到不同维度上。&lt;/p&gt;
&lt;p&gt;接下来用户就能挑选出一些数据来，这时候就已经不是盲目的去选，因为系统已经挑出来疾病相关性强的数据项来。&lt;/p&gt;
&lt;p&gt;接下来就是根据用户选择出来的数据项综合展示其数据分布状态，及联合关系。在此基础上，自动选定（或推荐）数据清洗和预处理方法，以及基本分析方法。接着用户可以锁定预处理和基本统计方法，数据项换玩，每次更换都对比历史的结果，看怎样选取会得到一个比较好的数据关联状态。&lt;/p&gt;
&lt;p&gt;这一步完成之后，基本上可以根据选出来的数据，结合现实，看看能做什么课题了。当然也可以再进一步，设计建模、训练模型。最后如果觉得选出来的能进行描述、作为课题发表，再去建立课题，归档数据，便于日后回归测试、进一步细化分析啥的。&lt;/p&gt;
&lt;p&gt;至此，一个低门槛，可以“玩”的“科研”平台的核心部分就设计完了。&lt;/p&gt;
&lt;p&gt;这里，还有一个问题解决的不算好，就是“更高参与度”的问题，现在虽然门槛低，但毕竟数据积累后，难有大的变化。也就是说“好用”的数据项都挑了一遍之后，很快又进入到“日常没事可做”的状态。&lt;/p&gt;
&lt;p&gt;为解决这个问题，引入个例分析的分析方式。顾名思义，就是研究单个患者。因为患者是每天都在增加的，而每个患者都会有差别，当然也会出现“特异”的病例，这可是非常稀有和珍贵的。系统每天帮忙把某疾病下患者的“特征向量”提取出来，显示与个体的距离（差异）、与群体的距离（差异）、评估总和方向的差别有多大、它的出现对原群体（数据）的影响有多大，之前有多少类似“特异”病例等等等等。（这个地方再扩展下不就成辅助诊断系统了么 ˊ_&amp;gt;ˋ）&lt;/p&gt;
&lt;h3&gt;总的来说&lt;/h3&gt;
&lt;p&gt;这样一来，低门槛、轻松的数据使用方式，让更多的人更容易加入进来。再通过“帮忙选处理方法”、“推荐统计工具”的形式，其实也是在告诉“门外汉”什么情况下，该怎么变换数据；什么时候，该怎么分析。通过引导来起到教育作用，进而建立其数据使用和处理的思维。通过简单的操作展现数据之美，美还能“胜收”，说不定能以此培养起一些人的兴趣爱好呢。&lt;/p&gt;
&lt;p&gt;当然对高手来说起到的帮助并不大ˊ_&amp;gt;ˋ。但直接帮忙展示所有数据状态，动手分析前看一眼也挺方便的不是么。&lt;/p&gt;
&lt;h2&gt;最后&lt;/h2&gt;
&lt;p&gt;从到构思开始，断断续续花了一个礼拜终于完成这篇文章。&lt;/p&gt;
&lt;p&gt;仔细想来现在的产品组必然不会接纳这个设计，至少整体思维转变（提升？）前是不会接受的。&lt;/p&gt;
&lt;p&gt;一来全员都是项目建设制出身，很多想法都还停留在项目建设那种思维上。在有现实参照的情况下，会认为所有不匹配现实的东西必然是错误的，除非现实能跟着一起优化（不可能）。&lt;/p&gt;
&lt;p&gt;二来缺乏数据使用经验。对数据的理解都停留在浅表，没感受过数据的魅力。这几年“大数据”的炒作，多了数据很“值钱”的概念，但依旧提到“值钱”，能想到仅仅是“倒卖”。所以无法想象数据自身能够展现出来的东西，还是要“下锅”然后“炒熟”才能“上菜”（而且目前“上菜”上的是什么都完全没概念）。&lt;/p&gt;
&lt;p&gt;最后，一切从简（对自己，不是用户视角）的思维习惯，怎么可能会接受这么复杂的系统嘛。&lt;/p&gt;
&lt;p&gt;所以嘛，本文只是作者的一个思维练习的纪录而已。权当为几个月（估计）之后开始的工作做一个预热。&lt;/p&gt;
&lt;p&gt;－完－&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Sat, 25 Feb 2017 14:03:00 +0800</pubDate><guid>tag:,2017-02-20:2017/produce_diary_2017_02_20_20_52.html</guid><category>产品</category></item><item><title>不靠谱产品日记（10）</title><link>/2017/produce_diary_2017_01_11_11_46.html</link><description>&lt;h1&gt;2017-01-10&lt;/h1&gt;
&lt;h2&gt;提要&lt;/h2&gt;
&lt;p&gt;由于产品的关系，产品组最近开始触及到医疗科研的实例。&lt;/p&gt;
&lt;p&gt;现在的临床医疗科研和很多学科一样，通过统计学的应用转进为实证科学。于是乎，都开始接触到概率这个东西。&lt;/p&gt;
&lt;p&gt;但是不得不说，对于没经过专门学习和练习的人，对概率本身存在极大误解。思考概率问题既不考虑先验、后验，也不考虑多条件联合，当然更不会从后果倒回来进行加权，判断结果与实际情况有着极大偏差。&lt;/p&gt;
&lt;p&gt;例如空难事件：一年发生3次空难的概率约是亿分之一，而加上飞机寿命、经济因素，政治因数，那它出意外的还是小概率事件吗？那么多人直接目睹撞第一架飞机撞击双子楼，已经是极小概率了，按照频率派的思考方式，未来很长时间内都不太可能再发生了，结果咧？另外小概率意味着事件的发生，与不可能事件是对立关系，但大部分人在感受上将其放在等同关系的位置上。&lt;/p&gt;
&lt;p&gt;本来嘛，饭要一口一口吃，对与新事物的吸收也得慢慢来，一点点积淀。但大家学以致用的功力很强，很快就把“概率”用在工作中。&lt;/p&gt;
&lt;h2&gt;出问题的是小概率，不需要考虑&lt;/h2&gt;
&lt;p&gt;这是最近经常出现一句话。&lt;/p&gt;
&lt;p&gt;一个实际例子就是，现在产品在使用过程中会出现患者判断的问题。需要将来源于手工的数据和从旧系统拉取的数据归于同一个患者下。产品组提出了一个解决方案：系统中，患者姓名＋性别＋生日，合成一个为一个患者判断依据，且唯一，既系统中不允许“一个人”出现两次。&lt;/p&gt;
&lt;h4&gt;问题在哪？&lt;/h4&gt;
&lt;p&gt;这种方式存在诸多风险，这里挑两个严重的来说：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当出现三个变量相同，但实际并非同一个人的时候，数据将会被错误的归结到一起，成为一个难以察觉的错误数据。&lt;/li&gt;
&lt;li&gt;当出现三个变量相同，但实际并非同一个人的时候，第二个患者无法进入系统享受服务，同时医生也无法获取其数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一眼看过去，条件挺多，同名同姓同生日同性别，同时出现的概率应该不高。&lt;/p&gt;
&lt;p&gt;但细看又如何呢？&lt;/p&gt;
&lt;h4&gt;问题在这&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;姓名与性别很大程度是共线的，所以性别这个变量存在没什么意义。&lt;/li&gt;
&lt;li&gt;我们的主要试点单位会是儿科医院，所以拿儿科医院来说，特别是针对婴幼儿的疾病，基本上都在一定出生天数范围内发生。对应的治疗科室起到筛选器的作用，把相近生日的患者归集到一起（注：当前系统是以科室为单位进行建设的）。&lt;/li&gt;
&lt;li&gt;姓名这个即使从全国数据来看，重名的概率本身就不低。这里说一下，姓名的分布是明显可根据年份区间进行群分的，简单的来讲，就是同一个时期出生的孩子得到名字更相近。例如：50s的建国、援朝，60s的卫红、志红，近年来的子轩、梓涵、梓萱等。所以重名的概率在儿科医院这么一个筛选器做后验，会往正向进行大幅度修正。&lt;/li&gt;
&lt;li&gt;还有医院多系统并行产生的问题，新旧系统过度的问题，医生的特殊目的等等。。。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;再回过头来看看那两个风险。&lt;/p&gt;
&lt;p&gt;第一个风险事件发生，如果不留意的话可能不会发现，但是这类“人为”的错误数据会对某些研究方式的结果造成影响。其可能影响数据边界，在使用SVM之类的工具时，support vector的选取过程有可能会放大这个错误。特别时在做特异性研究时，会把研究引向错误的方向，检验时发现错误再回头，浪费科研人员时间和精力。&lt;/p&gt;
&lt;p&gt;第二个风险事件的发生，会直接影响临床医生的工作：眼前的患者无法加入到系统中。作为工作会使用到的系统，出现无法解决的问题，会产生很强的负面情绪，这问题就非常严重了。&lt;/p&gt;
&lt;p&gt;也可能还没等到进入实际工作就出问题了：在系统建设初期，从旧系统导入数据。用户不太放心的话稍微进行对比验证，就会发现跟原数据对不上（比如患者数量），这问题同样严重。因为从数据角度，数据原始性被破坏，是没有任何理由能够圆得过去的。&lt;/p&gt;
&lt;h4&gt;总之&lt;/h4&gt;
&lt;p&gt;两个风险事件可以归纳为两个问题：数据完整性与数据原始性。&lt;/p&gt;
&lt;p&gt;经常使用“数据”的人都知道数据质量的重要性。我相信对科研上心的医生同样也会对任何影响数据的“东西”感到深恶痛绝。&lt;/p&gt;
&lt;p&gt;数据方面，不局限于本文提到的，任何风险事件一旦发生，对其产品都将是致命的打击。&lt;/p&gt;
&lt;h2&gt;最后&lt;/h2&gt;
&lt;p&gt;首先，事发概率可不低，算不上小概率事件。&lt;/p&gt;
&lt;p&gt;其次，从自身经验，也是从数据使用者角度来看，后果极度严重。所以这就根本不是一个小概率事件问题，而是需要尽一切可能去避开的事情。这里想到&lt;code&gt;墨菲定律&lt;/code&gt;：“如果你担心某种情况发生，那么它就很可能会发生。会出错的事情总是会出错。”&lt;/p&gt;
&lt;p&gt;最后，也算见识到什么叫半桶水晃荡的可怕。&lt;/p&gt;
&lt;p&gt;这回就不去猜测以后发生什么事情了，说不定这回真的是我想太多。&lt;/p&gt;
&lt;p&gt;因为接触下来，发现整个医疗行业的科研素养的平均水平并不怎么样…………呃…………这么说也许地图炮范围太大。打击稍微精确点来说：临床医生的数据分析及统计（狭义）思维的平均水平，真的太低了。当然不是没有原因，在中国，可能医生都已经忙到－－“门外一堆病人要死了你还让我写论文”的地步，应付了事就拉倒了。（开个玩笑&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Wed, 11 Jan 2017 11:46:00 +0800</pubDate><guid>tag:,2017-01-11:2017/produce_diary_2017_01_11_11_46.html</guid><category>产品</category></item><item><title>不靠谱产品日记（9）</title><link>/2016/produce_diary_2016_12_28_21_57.html</link><description>&lt;h1&gt;2016-12-28&lt;/h1&gt;
&lt;h2&gt;市场需要2.0&lt;/h2&gt;
&lt;p&gt;这是老板上个礼拜跑完市场后回来的一句话。&lt;/p&gt;
&lt;p&gt;现在的产品被认为太low，界面简陋，功能藏得太深等等。&lt;/p&gt;
&lt;p&gt;和之前的估计一致，没想到这来的这么快，才刚迈向市场，就立马出现。但这第一脚都没算完全踏入市场就升级2.0的产品，也算是一只奇行种了。（苦笑&lt;/p&gt;
&lt;h2&gt;那么到底要啥&lt;/h2&gt;
&lt;p&gt;今天下午，正式展开产品优化讨论，但是所谓要优化的部分和优化思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据显示往上层提；&lt;/li&gt;
&lt;li&gt;工作操作往上层提；&lt;/li&gt;
&lt;li&gt;数据的动态需要表现出来；&lt;/li&gt;
&lt;li&gt;工作台概念。&lt;/li&gt;
&lt;li&gt;。。。。。。忘了，好像还有框架什么的。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一次刚开完会就忘内容，整个人一直都是心不在焉的状态。不断的脑中在整理项目启动前的各种设计讨论会。&lt;/p&gt;
&lt;p&gt;等等。。。这些，特么，完完全全就是半年前在设计时以“怎么简单怎么来”、“这么复杂做出来又问题你负责啊”之类的、认为不合适产品的理由，是被投票否决的建设思路么？连“工作台”字眼都与当时一摸一样。&lt;/p&gt;
&lt;p&gt;。。。。。。&lt;/p&gt;
&lt;h2&gt;就先这样吧&lt;/h2&gt;
&lt;p&gt;不太打算再说太多，要总结起来，内容感觉跟之前的全部日记都重复了。&lt;/p&gt;
&lt;p&gt;这状况，不管对产品，还是对个人，表面上是一个消极的打击。&lt;/p&gt;
&lt;p&gt;但是却在另一方面体现出了它正面的价值：&lt;/p&gt;
&lt;p&gt;每天时间都处于根本不够用状态，虽然不多却要花时间来整理这些文字。回头去读，看起来通篇抱怨，反而有一种全是偏见的感觉。不时的在想，码下这些字有意义吗？？我这些“少数人”的观点真的是对的么？&lt;/p&gt;
&lt;p&gt;这次事件给了我一个铿锵有力的肯定。嗯，产品观よし，价值观よし，世界观よし。今后，将继续坚持自己的三观，将本系列写继续下去。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Wed, 28 Dec 2016 21:57:00 +0800</pubDate><guid>tag:,2016-12-28:2016/produce_diary_2016_12_28_21_57.html</guid><category>产品</category></item><item><title>不靠谱产品日记（8）</title><link>/2016/produce_diary_2016_12_08_01_39.html</link><description>&lt;h1&gt;2016-12-07&lt;/h1&gt;
&lt;h2&gt;会议简要&lt;/h2&gt;
&lt;p&gt;先贴个会议结论，既决策。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;今后，所有计划由市场时间进行倒推，必须要保证市场的blablabla。
研发发生延误，那么从测试阶段把时间抢回来。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;ps：以上及以下”市场“等同于”销售“、”客户服务“和”运营“相关的行为。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;今天就来说说这个看起来就本末倒置问题。&lt;/p&gt;
&lt;h2&gt;时间问题&lt;/h2&gt;
&lt;p&gt;总的来说，一切可以归结成时间问题。&lt;/p&gt;
&lt;h4&gt;项目设计&lt;/h4&gt;
&lt;p&gt;即便没有”市场时间倒推计划“这事，所有计划本身从一开始，便是能赶则赶。&lt;/p&gt;
&lt;p&gt;当然项目设计这点不好量化，没有明确精细度，进一步来说就是没有统一评判标准。所以到底怎么样不好说，即便带着各种漏洞和错误，在开发过程中通过实时跟进、干涉及调整，依旧可以有挽回的余地。虽然这个不是key piont，但却会对下一阶段造成致命的影响。(这里还有一点设计人员的精力问题没说，因为who care～)&lt;/p&gt;
&lt;h4&gt;开发&lt;/h4&gt;
&lt;p&gt;接下来到开发计划，依旧能压则缩，开发周期基本上被压到girigiri能完成的程度，加上上一点提到的问题，需要花时间进行修正设计上的失误，开发正常按时完成几乎成了不可能的事情。几次下来，研发也形成逆来顺受的习惯，不在对计划有异议，反正都是mission impossible。&lt;/p&gt;
&lt;p&gt;结果就是认真规划的计划必然的延误。虽然现在还没有出现随意编编应付了事的情况。但是如此以往，估计快了。&lt;/p&gt;
&lt;p&gt;同时一直的“赶工”状态，对质量带来的负面影响，又会将问题传导到下一个阶段。&lt;/p&gt;
&lt;h4&gt;测试&lt;/h4&gt;
&lt;p&gt;准确的说来，是质管中心对产品质量的监管。但这里不想多谈，就片面的说“软件测试”这件事。&lt;/p&gt;
&lt;p&gt;研发不对自己的产出进行严格检查，把问题推给测试，最终导致测试经常遇到严重的系统级bug，“测不下去”而暂停测试，严重影响测试进度。&lt;/p&gt;
&lt;p&gt;这一系列连锁反应，最终所有压力都被甩到测试这端，看起来就像是测试不断在“延期”似的。&lt;/p&gt;
&lt;p&gt;这里再倒回头说说测试本身存在的问题。一个软件项目，资源富余足条件下的开发测试比1:1是最合理的情况。当然非大型企业很难有如此富裕宽松的条件，那么测试比例在一定条件下进行缩减也是情有可原的。从经验上看，3:1基本就接近极限了（不进行集成测试及白盒测试，仅作使用测试，撑死能到6:1）。&lt;/p&gt;
&lt;p&gt;而我司的情况是：无论研发周期多长，研发人数多少，常配备的测试资源就1人，并且计划测试周期为1周，含多轮回归测试。&lt;/p&gt;
&lt;p&gt;在测试资源严重匮乏的情况下，不是延长测试周期，反而是进行缩缩减，那么结果可想而之。根据“系统熵是常数”的定理 (自称&lt;code&gt;&amp;gt;_,&amp;lt;&lt;/code&gt;)，那么问题必然继续传导下去，下一棒将是运维？市场？或是用户？&lt;/p&gt;
&lt;p&gt;&lt;em&gt;ps:顺带说下，近期的测试预计被缩短为2～3天，1人，emmmmm&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;市场倒逼&lt;/h2&gt;
&lt;p&gt;在非紧急特殊情况下，由市场倒推生产这是一种愚蠢的行为。&lt;/p&gt;
&lt;p&gt;这个情况现在互联网行业倒是挺常见的。特别是手游。&lt;/p&gt;
&lt;p&gt;绝大部分手游由于运营研发高度分离，完全分成两个企业。运营根据市场制订计划，反过来为研发确立开发节点。这些时间点的确定与研发工作本身是毫无关系的，所以我们看到手游公司好像经常出现通宵工作的概率非常高。但是每次新的イベント(event)上线，各种error、停机维护、道歉、赔偿、&lt;em&gt;&lt;small&gt;制作人滚出来土下座（开个玩笑，但kmr去死）；&lt;/small&gt;&lt;/em&gt;几乎都成为日常定番。但手游完全是卖方市场，人家爱怎么玩怎么玩，无非面上不好听而已，不影响捞钱。&lt;/p&gt;
&lt;p&gt;企业级、应用型、专业领域作业用等，这些字眼综合起来，就是完全买方市场。手游卖方市场的那套钓着用户的玩法根本行不通，不仅仅是直观满意度的问题，作业用的系统会带来的损失可以量化。一辆常抛锚的货船肯定会被立马回炉，防止损失扩大。&lt;/p&gt;
&lt;p&gt;在正常情况下，过分的压缩必要的时间，无非就是kpi上看起来漂亮而已。在资源不足的情况下，还需分一部分精力去掩盖问题，想尽办法在让一个不合理的东西看起来合理，更近一步加剧产品质量下降。把所有问题都推向“事后修补”。企业应用这么玩，不说会被当垃圾扔掉，市场及服务人员的脸在现场也挂不住啊。&lt;/p&gt;
&lt;p&gt;作为市场人员，一般来说都必须在心理优势和信息不对称方面，有绝对优势，才开展销售、推广行为，否则也只是浪费机会。&lt;/p&gt;
&lt;p&gt;那么研发周期与市场本不应该是一对矛盾，而是共同协调（梯度上升Y(^_^)Y），求得当前实际局部最优解得过程。&lt;/p&gt;
&lt;h2&gt;最后&lt;/h2&gt;
&lt;p&gt;今天就不扯太远，计划着还有个模式识别算法需要调整，得赶紧开工，否则太阳公公出来前没法睡觉了。&lt;/p&gt;
&lt;p&gt;总之，最开始贴的那段对近期工作的决策，应该不会持续很长时间，几次现场出问题后，市场自己就会让流程回到正轨了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Thu, 08 Dec 2016 01:39:00 +0800</pubDate><guid>tag:,2016-12-08:2016/produce_diary_2016_12_08_01_39.html</guid><category>产品</category></item><item><title>不靠谱产品日记（7）</title><link>/2016/produce_diary_2016_11_18_20_02.html</link><description>&lt;h1&gt;2016-11-18&lt;/h1&gt;
&lt;h2&gt;向前迈了一步&lt;/h2&gt;
&lt;p&gt;不计其数的bug，煎熬了三个礼拜，终于测试通过拿到质管部门的测试通过报告，虽然只是girigiri的擦边通过，仍有些小bug，但不影响上线使用的前提下，算是正式出厂了。&lt;/p&gt;
&lt;p&gt;同时产品组的工作开始转变，由原来的设计与软件建设（从来都没觉得全员都注意力都在这），向销售、医生服务展开，确定新的阶段为开发、销售、服务并行的阶段。&lt;/p&gt;
&lt;h2&gt;只有小半步的一步&lt;/h2&gt;
&lt;p&gt;走向市场了，明明时里程碑上浓重的一笔，为什么会有这个标题？&lt;/p&gt;
&lt;h3&gt;理由非常简单，但也都有它自身的道理。&lt;/h3&gt;
&lt;h4&gt;熵&lt;/h4&gt;
&lt;p&gt;太多东西简化的太过份，产品组一味以“怎么简单怎么来”、“不用纠结，快速上线”作为决策指导。&lt;/p&gt;
&lt;p&gt;这有个问题：任何事物的“熵”在最初形成时就已经是一个确定的“常数”，那么一方简单，必然就有一方（或其他多方）复杂；厂商偷懒，意味着用户通过产品的使用达到其目的，需要付出更多的精力（接受成本、学习成本、使用阻碍等等）。&lt;/p&gt;
&lt;p&gt;往好的方面想，这种指导思想的确对各方面都起到的加速作用都十分明显。&lt;/p&gt;
&lt;p&gt;并且当前的现实情况，有不少医生（特别是主任或被称为大医生的角色）的课题并非自己完成的，基本上都工作指令式地下发工作任务，由研究生、实习生或者助理（很多情况下这三者是一体三面）完成所有流程。这样一来，“屎也必须给我吃下去”这也不是没有可能，毕竟能够付钱的、我们的销售对象肯定是科室领导嘛。&lt;/p&gt;
&lt;h4&gt;需求？&lt;/h4&gt;
&lt;p&gt;目前的产品需求，基本来源于一线临床工作者（还不一定是医生），仅少量来自医疗科研工作者。&lt;/p&gt;
&lt;p&gt;在没有真正产品经理的领导，这些零散需求每一个对我们来说就像是救命稻草一般，没有抽象，没有提炼（也可以说是没办法），直接地东拼西凑，然后大量插入经由生活经验的猜测，形成让我们自己看起来像是那么回事的产品。&lt;/p&gt;
&lt;p&gt;这里存在的问题就是：这些人的需求是真正的需求吗？&lt;/p&gt;
&lt;p&gt;个人认为，是，它们都是需求，与他们日常的工作息息相关，而且是迫切需要解决的问题，这毋庸置疑。&lt;/p&gt;
&lt;p&gt;但是从被调研者身份来看，这些信息大多包含浓厚的个人色彩，他们只是在反应他们工作上遇到的问题，通过个人价值观润色提出来的问题。通常来说，这种底层工作人员的需求是无法形成行业需求，进一步说是没法通过通用型产品去进行解决。这类需求是一个无底洞，将产品带入无限功能实现的深渊，永远没法展现产品的可复制性。&lt;/p&gt;
&lt;p&gt;更可怕的是，这些需求还不是科研人员角度提供的需求。&lt;/p&gt;
&lt;p&gt;所以至此，即使产品上线了，科研直接相关的模块反而是一个被无限弱化的部分，这与产品初衷就已经背道而驰了。&lt;/p&gt;
&lt;h2&gt;结&lt;/h2&gt;
&lt;p&gt;关于第一点的解决，没办法，只能等，等到某天所有人的责任心都起来了才能解决，也许。&lt;/p&gt;
&lt;p&gt;第二点，没法子。要么空降个有足够能力的产品经理；要么被坑得太多，在坑中总结。直到某天终于开窍，主动从微观上去积累，达到一定程度后从宏观上再进行抽象与挖掘。&lt;/p&gt;
&lt;p&gt;以上。&lt;/p&gt;
&lt;p&gt;写到这，突然意识到，其实今天的内容与上个月写的东西完全一致，无非是老问题跟现实事件结合起来又重提说一遍。&lt;/p&gt;
&lt;h2&gt;结2&lt;/h2&gt;
&lt;p&gt;嘛，最后又要来预测点东西。既然开始走向市场，那么。。。就说说产品自身吧。&lt;/p&gt;
&lt;p&gt;在没有任何改变的情况下，市场出去了，将会源源不断的带回“个人需求”，按照现在的状态，我们（只能）认为“啊，这是一个丰富产品功能的需求”，“啊，这是一个弥补缺陷的需求”，不断进行下去；另一方面，由于团队对这个行业的认知，不足以快速地进行核心功能挖掘与迭代，一来为了“逃避现实”，二来为了“有事做”，便加重这个问题，以至于投入人力物力越来越大，却离目的越来越远。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“下一步”应该会很难踏出去，未来很长一段时期（半年？一年？）都将会原地踏步，甚至可能会出现忍不住了往后跳一步，旧阶段与新阶段并行的尴尬场面&lt;/strong&gt; &lt;em&gt;（苦笑&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;最近总有个既视感：会为了讨好医生，会不断出现类oa，类进销存，或现有系统中末端工作自动化替代品之类的“需求”，然后再灌上为了将用户“引导向科研”、“引导向产品核心”这种不负责任、自欺欺人且南辕北辙的借口。曾经见到不少的产品都是以这样的方式逃避现实的，号称曲线救国（hmmmm。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Fri, 18 Nov 2016 20:02:00 +0800</pubDate><guid>tag:,2016-11-18:2016/produce_diary_2016_11_18_20_02.html</guid><category>产品</category></item><item><title>不靠谱产品日记（6）</title><link>/2016/produce_diary_2016_10_28_23_12.html</link><description>&lt;h1&gt;2016-10-28&lt;/h1&gt;
&lt;h2&gt;心态&lt;/h2&gt;
&lt;p&gt;产品功能设计告一段落，以及研发部分表面工作的开发近乎完成，于是应产品组要求，进行一次实际产品演示与体验会。这个会上面暴露出来严重的根本性问题。今天就来谈谈这个。&lt;/p&gt;
&lt;h3&gt;关于产品心态&lt;/h3&gt;
&lt;p&gt;产品演示过程中发现，先不说操作细节，产品组的其他人对功能分布，功能意义及目的，如果不详细说的话，就一头雾水，不明所以。明明大多数上层需求也是通过头脑风暴出来的，从原型设计到高保真原型（几乎和成品无异的设计图）都全员参与讨论与决策。全员对设计进行定型后才开始开发。拍板时间距今也才一个多月。&lt;/p&gt;
&lt;p&gt;前情提一下，就是产品组成员的根本定位是：每个人都是产品负责人，都均分地肩负的产品经理职责（相当于某些团队的产品总监）。&lt;/p&gt;
&lt;p&gt;在这种情况下出现“蒙圈”的情况，就意味着开发前的共同讨论、粗设计、拍版等同于毫无意义的工作，因为从事后看，每个人都不知道自己当时在说什么，在做什么，每看到一个事物是什么，每一个决定与想法的目的与意义是什么，纯粹的为开会而开会。&lt;/p&gt;
&lt;p&gt;同时也暴露出来了这个产品组团队的实际分工为［市场］与［项目设计、项目管理］两个部分，［产品经理］部分也因大伙都有责任变成大家都不去担责任。&lt;/p&gt;
&lt;p&gt;对于产品设计，产品组在等着市场带回来需求，项目组在等着产品组总结需求，但现状是市场等着先出产品，然后去找客户，让客户提意见才能总结需求。而目前市场计划在远未来，眼前却有项目设计及开发启动及结束节点。相当于逼迫着项目必须拿出东西。&lt;/p&gt;
&lt;p&gt;于是乎产品经理部分职责便直接包含于项目设计中，变成了两个项目经理负责“产品”设计，因为项目设计需要看起来合理，就必须去对需求进行猜测，并融合进项目设计中，否者项目就言之无物了。那么项目经理们为了完成自己的任务，只能硬着去编造需求了。&lt;/p&gt;
&lt;p&gt;拿着编造需求，开会讨论，既然没人上心，自然实际对设计无法进行正确判断，进一步，甚至无法理解当时在讨论的是什么，为了所谓的“赶时间，快速完成产品”，进行决策、拍板，“赶紧”开始进入开发。&lt;/p&gt;
&lt;p&gt;至此，在最后产品演示后出现“蒙圈”的情况也就合理了。&lt;/p&gt;
&lt;h4&gt;总结1&lt;/h4&gt;
&lt;p&gt;人人有责＝人人无责。我们正在亲身的在验证这个定理。&lt;/p&gt;
&lt;p&gt;大家都在完成着自己的工作，但是作为产品工作的核心－－产品组，即便不说所谓把产品当做“事业”、当做“养育孩子”这种常情，对产品完全不上心，这是一个多严重的问题。&lt;/p&gt;
&lt;p&gt;目前公司虽然情况在往“下”走，但还有余力，这个由产品组领导同时也是老板，在一开始埋下的问题，估计得到火烧眉毛、临近濒死的状况才有可能改正过来。极大可能结果是由老板跳出市场人员的自我定位，一肩担起领头羊的角色，之后才会有改善。&lt;/p&gt;
&lt;p&gt;为什么猜得那么极端，得到公司濒死才有可能发生转变，就是我接下来要说的另一个问题。&lt;/p&gt;
&lt;h3&gt;关于学习心态&lt;/h3&gt;
&lt;p&gt;做过人事招聘或带过团队的人应该都有这种结论：学习能力高于一切。学习能力0的人即便经验再丰富，都无法完全掌控所负责工作；学习能力强的人，即便是新人，也能很快上手并独当一面。&lt;/p&gt;
&lt;p&gt;这里不说学习能力，而是一切的前提－－关于学习方面的心态，心态不正，即便学习能力再强，也毫无意义。&lt;/p&gt;
&lt;p&gt;产品中有个模块是选择统计方法对数据进行描述，当然作为产品雏形，仅仅含有作为演示用的描述性方法，无非是显示计算一下均值、方差、中位数之类的。在体验演示过程中，一致提出了一个要求：要求培训统计方法。&lt;/p&gt;
&lt;p&gt;如果是在未来，集成比较进阶的数据处理方法，例如深层网络，升维降维，空间变换之类的，专门培训是有必要的。但目前这个情况，均值？方差？这种基础中的基础，说起来简单，同时也非常难，就像要跟高级人才讲明白1+1，反而不容易。这些基本的玩意，随便搜搜都一大片资料、文献、教材、甚至是别人总结的百科，根据自己理解去吸收才是正道。&lt;/p&gt;
&lt;p&gt;“没有资料”、“看不懂”、“买教材浪费钱”，“你既然都做了就教一下我们啊”。当时整个会议室充斥着&lt;code&gt;书非借不能读&lt;/code&gt;、&lt;code&gt;不教我们就不知道啦怎么办&lt;/code&gt;的二逼气氛。明明一个个都是名校理工科高材生，却都恬着脸让一个三流学院文科生去给他们准备理工科基础知识的培训。真是万万妹想到啊，原来名校的思维方式方面的培养也不怎么样啊。&lt;/p&gt;
&lt;h4&gt;总结2&lt;/h4&gt;
&lt;p&gt;对于公司，对于团队，现在面对的是一个完全全新的领域，甚至是整个行业从未涉及到的处女地。在这样的前提下，要走得下去，要在行业里划出一块地盘，最根本的技能便是－－自学，也是唯一的办法。行业的开垦，意味着，所要面对的是原行业的人都未触及东西，也就是说，没有人有（真正的）经验，只能靠自己，只有专业性比原行业的人高，才可能总结出”原系统框架漏洞“，针对性进行改进优化；再配合其他行业知识的整合，将”系统“升华，才有可能在新领域中站得住脚。&lt;/p&gt;
&lt;p&gt;然而现在团队中的学习主动性近乎为零，可以预见未来初期市场推广时的一大碰壁原因是无法交流。毕竟我们都离医疗科研非常远，却需要直接与医疗科研（临床）的一线人员进行沟通。不用医疗知识以及科研分析方法武装自己，太容易陷入牛头难对马嘴的境地。&lt;/p&gt;
&lt;h3&gt;真@总结&lt;/h3&gt;
&lt;p&gt;归根结底还是角色并不真正明确，带来的后果便是让人一点点的卸掉责任心，团队变得没有凝聚力。久而久之，大家都习惯原地等着工作的到来。没有人走在”产品“的前面，没有牵引力，团队就像失去动力的飞船，撞上拦路石才知道石头在哪，更别说穿梭的能力，只能随波逐流。&lt;/p&gt;
&lt;p&gt;哎呀呀，是不是搞数据预测多的人都有去预测未来的毛病？&lt;/p&gt;
&lt;p&gt;那最后，来做个预言做收尾：老板应该会是最先发现自己该补课啦，接着，未来某天，某次老板与市场出去跑客户后，结果老板看不下去，要求所有人（应该更偏向市场人员？）去补1.自己产品的课，2.医疗科研的课。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Fri, 28 Oct 2016 23:12:00 +0800</pubDate><guid>tag:,2016-10-28:2016/produce_diary_2016_10_28_23_12.html</guid><category>产品</category></item><item><title>不靠谱产品日记（5）</title><link>/2016/produce_diary_2016_10_19_20_27.html</link><description>&lt;h1&gt;2016-10-19&lt;/h1&gt;
&lt;h2&gt;原地爆炸了&lt;/h2&gt;
&lt;p&gt;从开始记录产品进程，这是第一次这么及时写日记，以前都是拖一段时间来写总结，但今天发生的事情实在是让人想快点写下来。&lt;/p&gt;
&lt;h3&gt;数据的问题&lt;/h3&gt;
&lt;p&gt;这个问题在上上一篇日记中提到。这里不再废话，虽然有点想复制一份过来，但想想算了，过几天研究下pelican的artical之间的连接怎么做。&lt;/p&gt;
&lt;h3&gt;一定会推倒重做的（2）&lt;/h3&gt;
&lt;p&gt;因为数据存储、合并展示相关的问题一直没有结果，设计上直接是默认认为不是问题而没有进行设计，但研发开发到这一步了，发现无法做下去，拉上产品组进行讨论上边提到的问题。&lt;/p&gt;
&lt;p&gt;最后一次，也就是产品开发过程中的对这个问题进行的最后一次讨论，也是当前最后一次的调整。产品组做了一个对我来说可谓是感天憾地的决定。&lt;/p&gt;
&lt;p&gt;产品组长提出，一项研究只应该在一个表单内进行，而该表单的频率在最开始时就确定的。不可能出现两个表单联合进行分析，如果本来是要一起研究的，那么开始就不应该分成两个表单。所以一切都在最开始的时候就确定的，只需要一张数据表就够了。进一步，就医疗而言，不可能出现同时研究两种病，两种情况，一次研究就一个研究对象，混合起来是不可能的。&lt;/p&gt;
&lt;p&gt;的确，这个想法完美的解决非常多的问题。这突破常识的想法，相当于，确认了所有课题研究在一开始就是明确的，确定了所有的研究开始于数据数据开始收集，否认了所有关联性的研究，甚至也排除了部分研究过程中实施的对照组分析或双盲实验中某些验证步骤。&lt;/p&gt;
&lt;p&gt;要说这是外行人一次大胆、张开就来的探险，也仅仅是笑笑就过了。但接下来一名本身长期从事医疗科研的兼职顾问的附和让我真吓掉瓜子，研究顾问明确确认该方法可行。也就是他从多年研究经验出发，确认了医疗行业没有任何关联性的研究。&lt;/p&gt;
&lt;p&gt;这完全颠覆我的世界观，让我相信，的确，我对医疗知之甚少，特别是医疗科研这么有深度的行业，不能用一般世界的科研方法取看待，所有的惊讶来自于我的无知。&lt;/p&gt;
&lt;p&gt;自嘲的废话就写这么些，这是第二个可以断言的地方，等到本系统真正开始运作，这部分一定会推倒重新来，要不然这世界真的不会好。&lt;/p&gt;
&lt;h2&gt;最后的牢骚，也是给路过看客一点提醒&lt;/h2&gt;
&lt;p&gt;数据的原始性非常重要。非常重要。非常重要。&lt;/p&gt;
&lt;p&gt;不过这点很容易被大多数设计者忽略，很多时候并没有往更大更远的层面去考虑，因为设计者更多的只关心当前业务的实现，都可能忙不过来。&lt;/p&gt;
&lt;p&gt;大概是因为做金融数据分析的时候被数据坑了太多次，有几次被坑的是见血露肉的，所以对数据的原始性特别重视。&lt;/p&gt;
&lt;p&gt;为什么数据原始性重要呢？&lt;/p&gt;
&lt;p&gt;1.未来要对数据做什么，要怎么做，可以说是现在无法百分之百确定。保留最原始的数据就是为了应对未来的不确定。一旦出现意外，或者有其他想法，只要改变分析策略即可，因为数据还在。&lt;/p&gt;
&lt;p&gt;2.人为处理过（包括含有主观意识的筛选、过滤）的数据很可怕，比数据发生错误还可怕，数据错误的发生不过是产生噪声，跟白噪声一样的零均值单位方差的噪声。但人为处理过的数据一定是带偏的，有很强的指向性。如果未来的再对数据进行分析时，未意识到这个数据偏置，并进行消除，那么对结果将会带来毁灭性的打击。&lt;/p&gt;
&lt;p&gt;所以数据原则，未来在这个产品的项目设计上还是会继续提，不管是否听的进去，也算是尽责了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Wed, 19 Oct 2016 20:27:00 +0800</pubDate><guid>tag:,2016-10-19:2016/produce_diary_2016_10_19_20_27.html</guid><category>产品</category></item><item><title>不靠谱产品日记（4）</title><link>/2016/produce_diary_2016_09_24_01_03.html</link><description>&lt;h1&gt;2016-09-23&lt;/h1&gt;
&lt;h2&gt;前情&lt;/h2&gt;
&lt;p&gt;上一轮测试问题很多，bug很多，与此同时开发延期问题严重。引发了本次像拨洋葱似的，一层层的发现问题。&lt;/p&gt;
&lt;h3&gt;研发&lt;/h3&gt;
&lt;p&gt;研发是最开始暴露出问题的。因为研发人员分工明确，任务明确，一切按计划来，不管是研发自身有问题，还是计划有问题，肯定是第一个出问题的层面。&lt;/p&gt;
&lt;p&gt;出问题后，产品肯定问责，到底怎么回事。&lt;/p&gt;
&lt;p&gt;研发甩锅：需求不断修改；数据库表设计没有人确定都是研发自行解决，需要什么创建什么，一旦有工作交叉容易出问题；界面不周全；接口逻辑不周全。&lt;/p&gt;
&lt;h3&gt;项目、产品&lt;/h3&gt;
&lt;p&gt;先不说开发细节的质量，从项目组来看研发提出的问题都是不可否认其存在的。但是再整理，发现需求不断变更，跟产品组渐渐接触市场，对市场有新的认识，发现旧需求不满足有关，更进一步来说，产品的具体设计前期并没有明确的需求作为支撑。至于数据库表设计文档有问题，产品细节设计不清晰，业务逻辑不完整，项目也能找到甩锅的理由。&lt;/p&gt;
&lt;p&gt;先说说，本来是研发、项目、产品三方面的问题，但此处小标题却把产品和项目写到一块，原因是：产品组5人，其中3人的定位是市场服务人员，市场人员和，剩下2人负责产品设计、项目设计、项目管理。&lt;/p&gt;
&lt;p&gt;也就是说这两人如果在职责范围内，承担着从头至尾的工作，先从需求开始设计。注意，是需求设计，现在并没有明确给过来的需求。完整的需求设计既要考虑市场，考虑战略，同时还要考虑研发可行性。需求设计完了到产品设计，先设计系统，再设计功能。这公司还没有设计师（设计师是有的，但是他给自己的定位是美工，只关心颜色大小边距之类的，其他的需要产品组来给），这意味着在设计完功能后还要进行交互设计，再之后是界面设计。设计提交给产品组内反复确认，最后才确定了，再开始项目设计。&lt;/p&gt;
&lt;p&gt;与此同时，还需要承担来自市场的压力－－时间节点。无论复杂还是简单，无论需求是否明确，都必须在一个确定的时间交出设计、交出项目计划并且按照市场节点交出开发成品。&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;从现在的产品组架构来看，能够给出一套完整的产品设计和开发手册几乎是不可能的。虽然所谓的分工明确，但是基本就分为对内和对外，对内的把产品总监（部分），产品经理，结构策划，功能策划，设计师，项目经理等等的岗位进行整合。从精力上来看，需要关心的东西实在太多。&lt;/p&gt;
&lt;p&gt;在这种情况下还需要去关心细节，就成了不可能的任务。像一棵树一样，树干是最原始的需求，往上是需求分解、再上一层是产品设计、再往上......一层层往上，每一层的复杂度都以指数级展开，不用到细枝末节，几层过后就开始不在精力可控范围内了。&lt;/p&gt;
&lt;p&gt;那么设计者不去操这个心（准确的说是无法去操心），但问题是客观地在那摆着，不会消失，于是这些不明确引起的问题就会被摊到研发人员身上，带到研发过程中去，开发就会出岔子，接下来就是开篇的研发甩锅着么个循环。&lt;/p&gt;
&lt;p&gt;虽然在产品组例会上提出来，进行讨论，问题也被认可，但被一笔带过：这是现阶段没法解决的，人力不足，人才也不足。在近未来，这些问题还会不断的重复下去。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Sat, 24 Sep 2016 01:03:00 +0800</pubDate><guid>tag:,2016-09-24:2016/produce_diary_2016_09_24_01_03.html</guid><category>产品</category></item><item><title>不靠谱产品日记（3）</title><link>/2016/produce_diary_2016_09_10_23_58.html</link><description>&lt;h1&gt;2016-09-10&lt;/h1&gt;
&lt;h2&gt;初版开发进程过半&lt;/h2&gt;
&lt;p&gt;虽说第一阶段开发完成，但是这是一个前不着村后不着店的节点。这个分段仅仅是为了让测试进场进行部分功能测试，目的是充分利用一个本来就很紧俏的资源——测试。&lt;/p&gt;
&lt;p&gt;在这个时候开一篇日记，原因是随着这个节点的抵达，意味着只要没有致命错误，不会再大手调整，是时候对早期设计进行盖棺定论了。&lt;/p&gt;
&lt;h2&gt;途中的小结&lt;/h2&gt;
&lt;h3&gt;设计的问题&lt;/h3&gt;
&lt;p&gt;太简陋了，完全是小学生级别的设计。&lt;/p&gt;
&lt;p&gt;由于我进场的时机，平台的大体框框都已经设计完成了。说实话，一切藏太深了，所有工作按模块并行排在菜单内，对于一个可能会用于日常工作的平台，这十分不合理，也不友好。&lt;/p&gt;
&lt;p&gt;当时发现还有挽救的余地，因为平台首页基本上完全空着，毫无作用，孤零零的放着几个数字指示器，也是没有多大意义的数字。&lt;/p&gt;
&lt;p&gt;我的意见是：将所有工作以数据的形式透到首页上，在首页上能够直接跳到对应的工作模块，简单的工作可以直接在首页上操作完成。&lt;/p&gt;
&lt;p&gt;根据不同工作角色，部分数据还进一步可以以图表进行展现，不光看到数据的变化，还能从结果跟踪数据的变化。&lt;/p&gt;
&lt;p&gt;这一点十分重要，因为在供分析的数据收集阶段，有一个重要的点是“我的数据什么时候收集算完成”：数据什么时候才符合心理预期；这数据带偏的，但好像在往好的方向移动；不对越来越偏离中心了；这个分布，得调整分析方式呢...等等，可以说数据收集工作是一个无法事前估计的无底洞，并且会带动研究者进行着变化。&lt;/p&gt;
&lt;p&gt;当然我认为大部分医生已经习惯了时候研究分析，那么上面所说的也就不那么重要了，因为这样一来就不考虑过程成本了呢。&lt;/p&gt;
&lt;p&gt;但同样的做法其实不光有益于过程，可以直接从结果出发，例如展现出这堆数据什么时候“能够证明研究者的预设结论”。因为能够达到这点的时候就是可以写论文的时候。&lt;/p&gt;
&lt;p&gt;这也意味着，我们不光把数据透出来，甚至把数据分析模块的功能都进行自动化处理，直接结合到日常上去了。再加上分析模块的可配置，让每个研究员都有自己工作台。&lt;/p&gt;
&lt;h3&gt;一定会推倒重做的&lt;/h3&gt;
&lt;p&gt;但上述更改建议被产品组否决了。
&lt;br&gt;理由是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;1.功能重复：功能模块已经能够做到的，没必要一个功能分两个地方。
2.太复杂了，一切从简。多做一点意味着问题也多一点。
3.市场等不及了，研发不能及时出东西你能负责么？
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;由少数服从多数的产品组工作原则，还是一切从简的好。&lt;/p&gt;
&lt;p&gt;但基本可以下断言，在未来某次产品演示后，一定会有市场人员或融资负责人回来拍桌子：这东西卖不出去。&lt;/p&gt;
&lt;p&gt;真的，现在这个设计真的太简陋了。&lt;/p&gt;
&lt;p&gt;ps：（T_T）不光工作平台，我全新设计的客户端也以同样的理由拔除了所有快捷工作功能。没办法，他们人多。&lt;/p&gt;
&lt;h3&gt;数据的问题&lt;/h3&gt;
&lt;p&gt;现在的产品设计目前还存在这么个问题：&lt;/p&gt;
&lt;p&gt;当数据表单频率不对等时，如果整合成一张表单来进行展示和分析。&lt;/p&gt;
&lt;p&gt;当然我认为这仅仅是展示层的问题，无非是取均值／中位数 进行合并，又或者按概率分布／回归方程 来进行插值生成 等等等等。但这些方式的选择应该由未来的研究员来完成。更准确的来说，应该是说由未来各自的分析方式来决定的，而不是程序偷偷的做掉。&lt;/p&gt;
&lt;p&gt;但不知道为什么，产品组一直执着于把这些问题规划为一个确定的解决办法和方式，设计进数据库，作为初期设计，定死在程序内。经过多次讨论，都无解而终，而我的建议每次一提出来话没几句就被塞上抹布，他们继续讨论着数据表的设计问题......然后，这个问题现在依旧还存在着，就等着研发测试碰到问题再推动了。&lt;/p&gt;
&lt;p&gt;数据原始性的原则，这个东西直接影响着未来，不管他们听不听得进去，我都会坚持下去，因为过去我在这上面吃过太多的亏。&lt;/p&gt;
&lt;h2&gt;待续&lt;/h2&gt;
&lt;p&gt;看来从现在就要开始做好产品开发完成后来自市场人员的冲击的心理准备了。（笑）&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Sat, 10 Sep 2016 23:58:00 +0800</pubDate><guid>tag:,2016-09-10:2016/produce_diary_2016_09_10_23_58.html</guid><category>产品</category></item><item><title>不靠谱产品日记（2）</title><link>/2016/produce_diary_2016_08_24_22_40.html</link><description>&lt;h1&gt;2016-08-24&lt;/h1&gt;
&lt;h2&gt;不靠谱的医疗科研&lt;/h2&gt;
&lt;p&gt;近一个月来，通过一个医疗外包项目的理解，大概掌握这个产品的思路和目的。&lt;/p&gt;
&lt;p&gt;虽然说不打算深入医疗科研这个行业，但论文——作为科研行为的第一个产出品，还是有必要去读一下。找了个医学生朋友借到个临时的医院vpn和数据库访问权限，简略的翻看了几百篇论文。不得不说，医疗圈，准确的是医疗科研圈，充斥着大量应付作品，从严谨程度上来说，甚至还不如一些为了应付毕业的本科论文。大量预设前提，沿着预设搞出几个无量冈量，通过这几个无量冈量直接就下结论；没有反向验证，少有宏观全局比对验证；还有一个感觉已经成为普遍共识的默契，就是无论怎样的数据都默认符合高斯分布，这点虽然有点像金融，但是很多情况下样本仅有几十例，上手不管怎样，直接用高斯分布为前提的分析方法，然后就得到结论。从数量上看，大量的医疗科研结论看起来比经济学的还要玄学。&lt;/p&gt;
&lt;p&gt;咳咳，上边哪个标题地图炮范围有点过大了。这段话针对的是国内中文期刊发表的论文，换句话就是说是低端科研部分几乎都是滥竽充数。当然往外文期刊发的质量还是挺高的。这也和了解到的行业状态吻合。&lt;/p&gt;
&lt;p&gt;医生日常工作，我们大致都知道是干嘛的。&lt;/p&gt;
&lt;p&gt;医生们还有一个任务：输出科研成果。这项工作从某种角度来讲，比“救死扶伤”还要重要，因为它关系到职称提高、职位晋升，当然还有收入。&lt;/p&gt;
&lt;p&gt;我们都知道的一个事实：资源问题，导致现在的医生们的长期工作负荷几乎远超所有行业，并且有些偶尔会超过健康工作负荷边界。&lt;/p&gt;
&lt;p&gt;一个眼前急需完成的工作，一个需要长时间准备的任务，在现在的行业背景下，自然而然的后项会被忽略，而等到deadline的时候突击完成（研究代做，论文代写、发布，已经成为一个行业，这个另说了）。&lt;/p&gt;
&lt;h2&gt;融资&lt;/h2&gt;
&lt;p&gt;本次产品早早启动融资行为，基于前段时间来自外部的行业分析资料，融资材料准备的非常顺利（虽然不是我处理的），所有东西看起来比之前做交通产品的材料看起来靠谱多了。&lt;/p&gt;
&lt;p&gt;资料准备完成之后，配合组长进行几次模拟路演练习，有公司内自我练习、修正，也有借助外部小路演进行练手。&lt;/p&gt;
&lt;p&gt;跑了几次路演后明显感觉到国内的融资环境跟前几年比冷淡了太多。真跌入L型经济的横部了（笑）？同时也感觉到，给一个完全行业外的人介绍一个业内的痛点，是一件多么难的事情。&lt;/p&gt;
&lt;p&gt;另外，一来没资深行业背景的人，即便是站台的人。二来这个产品描绘的链条太长：虽然从画饼的角度来说，未来能有很多事可做，可以从不同角度着手，利益空间也很大。但反过来就是说对链条的控制力，前期投资成本等方面也需要更大，投资回收风险更大。结合冷却了的融资环境，配合近几年都没几个医疗行业投资捷豹的背景....前路漫漫啊！&lt;/p&gt;
&lt;p&gt;也有值得安心的地方：路演场上见到的“对手”都太烂（笑&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Wed, 24 Aug 2016 22:40:00 +0800</pubDate><guid>tag:,2016-08-24:2016/produce_diary_2016_08_24_22_40.html</guid><category>产品</category></item><item><title>不靠谱产品日记</title><link>/2016/produce_diary_2016_07_29_23_52.html</link><description>&lt;h1&gt;2016-07-29&lt;/h1&gt;
&lt;h2&gt;前情&lt;/h2&gt;
&lt;p&gt;上一个产品，合奏直播舞台，作为争抢最后一波直播市场资本资源的产品，错过去年的窗口期，在今年年初基本已经宣告死亡。&lt;/p&gt;
&lt;p&gt;遗留的技术嘛，虽然心里已经“盖棺定论”的把这些当成（应该）沉默的成本了，但是领导的风格嘛，公司还是认为它在其他方面有用武之地，所以前半年一来完善技术方面的东西，另一方面在硬靠其他业务希望能盘活已经泼出去的水。于是过了个拖泥带水的半年。&lt;/p&gt;
&lt;p&gt;上上个月，最后一次技术的演示会，上个月唯一一个“全职”开发人员释放。合奏产品终于落下帷幕。&lt;/p&gt;
&lt;h2&gt;新征程&lt;/h2&gt;
&lt;h3&gt;医疗产品&lt;/h3&gt;
&lt;p&gt;随着合奏直播舞台的落幕，受公司之命，加入了公司的医疗产品组－－这是一个存在很长时间的“组织”，只不过之前并不是“组”，而是一种离散的存在，主要工作是负责外部医疗相关的项目建设，之前弄的webRtc相关技术也是为他们服务的。&lt;/p&gt;
&lt;p&gt;半年前，真正意义上的产品组才成立，原因是公司开始决定做自己的医疗产品。&lt;/p&gt;
&lt;p&gt;这是一款面向医疗科研，服务于医生科研工作的工具型产品，再辅以“人”的服务，“数据”的服务，来形成产品服务的全貌。这里面将会设计到统计学方法，数据聚合方法，科研课题立项方法，分析方法，以及数据采集手段等方面。细节就不说了，本日记无关，也涉及到商业上的问题。&lt;/p&gt;
&lt;h3&gt;震惊&lt;/h3&gt;
&lt;p&gt;为什么会有这么一个标题，因为我真的惊呆了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;“产品经理（总监）是谁？”
“每个人都是产品经理！”
“哦，。。。啊？？？？？”
“产品组所有成员都是产品经理，每人20%的智慧构成这个产品。”
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如上就是入组时产品时的对话。顺带一提，组长主要负责的是市场。&lt;/p&gt;
&lt;p&gt;没有一个懂医疗，没有一个接触过科研，没有一个会数值分析，甚至我还发现，居然连基本的“方差”都没一个人知道是什么东西，这样的一群人凑到一块来做一个医疗科研产品。当然这样本来也不是什么大问题，能找一个会的人来领导团队或甚至指定一个负责人，临时进行全面学习也行啊。但现在这团队对产品责任进行平分，人人都有都有责任，也就意味着人人都没有责任。&lt;/p&gt;
&lt;h3&gt;未来&lt;/h3&gt;
&lt;p&gt;团队请了商业咨询师做了份行业、市场分析报告。虽然目前的领导人在以前的接触中，发现其对资讯信息中的私货与煽动性文字接受程度相当高，但介于我也是对这个行业知之甚少，只能接受这个产品现在是有一个已确定光明的前景的说法。&lt;/p&gt;
&lt;p&gt;但对于产品研发之路来说，没有一个核心的需求设计着作为领头羊，现在已经可以预见到下面这些场景一定会发生。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;1.“为什么带帽子” 啪～；
  “为什么摘下帽子” 啪～；
2.“需求是什么？”
  “现在不知道，以后一定会知道。”
3.“这怎么办呢？”
  “先这样，这样，以后就知道怎么做了。”
4.“你们这个东西啊，拿不出手／人家看不上 啊”
  “。。。”
  “我们要从新设计，全面改进！”
  “怎么改进？”
  “。。。”
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;不靠谱产品日记&lt;/h2&gt;
&lt;p&gt;一来与产品组沟通下来的工作方向－－作为需求接受者为前提的设计及进度控制，二来生活上的一些问题，除去本职工作，也不再可能有额外精力去对一个完全无知的行业进行全面深入。&lt;/p&gt;
&lt;p&gt;斟酌了小半个月，此次工作，我对产品组最大的贡献应该是在数据科学方面给予支持和研究开展的基本原则把控，控制数据层面的产品不走歪路，毕竟这几年搞算法，sc和生物方面的论文读了不下千篇，加上长期收集、处理金融数据，相对于组内其他人，离科研工作的距离更近。但预计这同样也是件困难的事。因为“外行”往往靠直觉去判断事物，而越专业的事情，越反直觉，更可怕的是这样的人（合起来）对产品有绝对的话语权。&lt;/p&gt;
&lt;p&gt;产品本身是好产品，但基于以上，我认为这次能以一个完全第三人角度（尽量）去观察这个产品的发展，一群无头苍蝇的坎坷产品路：怎么从乱猜步入到醒悟，是什么契机让产品觉醒而达到那个光明的未来；又或者。。。。&lt;/p&gt;
&lt;p&gt;于是今天决定blog新增一个Category：“不靠谱产品日记”，用来记录这个产品的进程。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Sat, 30 Jul 2016 02:54:00 +0800</pubDate><guid>tag:,2016-07-29:2016/produce_diary_2016_07_29_23_52.html</guid><category>产品</category></item><item><title>turnserver</title><link>/2016/webRtc_2016_06_06_11_13.html</link><description>&lt;h2&gt;过程概要&lt;/h2&gt;
&lt;p&gt;安装过程就不赘述了，反正都是 configure、make、install；&lt;/p&gt;
&lt;h4&gt;1.数据库&lt;/h4&gt;
&lt;p&gt;支持mysql，Redis，MongoDB；&lt;/p&gt;
&lt;p&gt;以MongoDB为例：编译安装，然后，新建mongodb.conf并写入&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;dbpath=/usr/local/mongodb/db
logpath=/usr/local/mongodb/logs/mongodb.log
port=27017
fork=true
nohttpinterface=true
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;启动&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/usr/local/mongodb/bin/mongod --bind_ip localhost -f /usr/local/mongodb/bin/mongodb.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;2.数据库驱动&lt;/h4&gt;
&lt;p&gt;编译安装 MongoDB-C-Drive；&lt;/p&gt;
&lt;h4&gt;3.coturn&lt;/h4&gt;
&lt;p&gt;编译安装coturn；&lt;/p&gt;
&lt;h4&gt;4.turnserver配置&lt;/h4&gt;
&lt;p&gt;拷贝coturn里的演示配置覆盖工程配置，内含演示用的签名证书；&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo cp coturn/example/* /usr/local/etc/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改配置文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;vim /usr/local/etc/turnserver.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;打开、修改以下选项：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;listening-port=3478
listening-ip=140.112.xxx.xxx
relay-ip=140.112.xxx.xxx
relay-threads=5
lt-cred-mech
mongo-userdb=&amp;quot;mongodb://localhost:27017/coturn&amp;quot; 
realm=junze.com
max-bps=10000000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中&lt;code&gt;lt-cred-mech&lt;/code&gt;，该加密方式为必须打开选项、因为webRtc要求的，否则不会产生reply的&lt;code&gt;candidate&lt;/code&gt;；&lt;/p&gt;
&lt;h4&gt;5.启动turnserver&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;turnserver
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不带任何参数启动它会去加载那一堆etc里的默认文件；&lt;/p&gt;
&lt;h4&gt;7.创建turn帐号&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;turnadmin -a --mongo-userdb=&amp;quot;mongodb://localhost:27017/coturn&amp;quot; -u userid -r junze.com -p pwd
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;8.完&lt;/h4&gt;
&lt;p&gt;以上，基本就完成了，接着是在前端js里写入turn地址了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;iceServer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                                                            
        &lt;span class="s"&gt;&amp;quot;iceTransportPolicy&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;relay&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                       
        &lt;span class="s"&gt;&amp;quot;iceServers&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;                                                      
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;urls&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stun:180.153.xxx.xxx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;urls&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;turn:userid@180.153.xxx.xxx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;credential&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pwd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;                                                                    
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;其他&lt;/h3&gt;
&lt;p&gt;非关键的东西：&lt;/p&gt;
&lt;p&gt;1.查看帐号密码信息：
进入mongo shell&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/usr/local/mongodb/bin/mongo coturn                                                                                                      
db.turnusers_lt.find()db.turnusers_lt.find()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;返回大概如下数据： &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;57441b21c89507f577071401&amp;quot;), &amp;quot;name&amp;quot; : &amp;quot;userid&amp;quot;, &amp;quot;realm&amp;quot; : &amp;quot;junze.com&amp;quot;, &amp;quot;hmackey&amp;quot; : &amp;quot;6e1c2b0553be00ee9f09ca46f46xxxxxxx}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2.turnsrver自带的测试工具&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;turnutils_stunclient -p 3478 140.112.xxx.xx                
turnutils_uclient -v -t -T -u userid -w pwpwd80.153.xxx.xxx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3.修改防火墙  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;vi /etc/sysconfig/iptables

-A INPUT -p tcp -m state --state NEW -m tcp --dport 30000:65000 -j ACCEPT
#随便写的端口范围

service iptables restart
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Mon, 06 Jun 2016 11:13:00 +0800</pubDate><guid>tag:,2016-06-06:2016/webRtc_2016_06_06_11_13.html</guid><category>webRtc</category></item><item><title>音频对比</title><link>/2016/audioCompress_2016_05_29_20_49.html</link><description>&lt;h4&gt;前言&lt;/h4&gt;
&lt;p&gt;最近在玩一个新玩具--用火纹提取的live2d模型搞个直播向的聊天机器人，其中对话部分需要用到TTS转换语音。&lt;/p&gt;
&lt;p&gt;但那TTS嘛，总随机带上一段语音广告。比较头疼的还是它没有价目表，说是永久免费的，这么一来想去掉广告也就只能走商务合作一条路了。这玩法个人屌丝玩不起。&lt;/p&gt;
&lt;p&gt;但是呢，广告语音的内容前半部分基本上是相同的，SO.....那就想办法去掉。&lt;/p&gt;
&lt;h4&gt;过程&lt;/h4&gt;
&lt;h3&gt;最简单的方法&lt;/h3&gt;
&lt;p&gt;生成的语言再发给同厂的语音识别API，让它告诉我这段是不是广告。。。。简单是简单，问题是语音识别使用有数量限制，我的业务场景肯定不适合。再说了，不想整个过程有太多的网络交互（宏观上的效率问题）。&lt;/p&gt;
&lt;h3&gt;简单小学生路子的尝试&lt;/h3&gt;
&lt;p&gt;最开始的想法：我猜它合成语音的原理是文字查表得到发音，发音有固定音频，然后拼接起来。这么一来，其实我只要找到起始点对比固定点位就好了。&lt;/p&gt;
&lt;p&gt;试了下，果然想得太简单，把多次产生的广告音频截出来，放工具里看波形，结果是一模一样的内容，它的实际数据是有差别的，也就是说它语音合成并不是简单拼接，而是实时演算，而且是通过某种概率模型来生产语音的。&lt;/p&gt;
&lt;p&gt;（其实后来又发现个问题，TTS会根据网络状态切换网络合成和本地合成，而两种合成形式产生的声音其实是不一样的。）&lt;/p&gt;
&lt;h3&gt;比前面稍微高级点的尝试&lt;/h3&gt;
&lt;p&gt;简单的想法玩不通，那就玩高级点的。&lt;/p&gt;
&lt;p&gt;从频谱上看、它的波形，它虽然实际微观数据没有相同的，但是它的包络还是很相似的嘛。&lt;/p&gt;
&lt;p&gt;思维惯性：那就是扫描做多项式、然后拟合。&lt;/p&gt;
&lt;p&gt;但仔细想想，这玩法貌似挺麻烦的，一来数据量不算少、二来广告长度虽然差不多，再怎么截，偶尔会截到实际数据，拟合过程会变得不靠谱。&lt;/p&gt;
&lt;p&gt;所以必须得是一个笼统模糊的特征抽取。那么做统计好了，用概率来判断截出来的某一段是否是广告。&lt;/p&gt;
&lt;p&gt;先把时域数据转成频域看看
&lt;center&gt;&lt;img alt="" src="/article_img/audioCompress_2016_05_29_20_49/1.jpg" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/audioCompress_2016_05_29_20_49/2.jpg" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;上图左右两边可以明显看出来广告语音内容在频域上的差异，这样一来特征就明显且统一了。&lt;/p&gt;
&lt;h3&gt;实际做法&lt;/h3&gt;
&lt;p&gt;当然嘛，越高效越好，所以决定对截取的音频部分做抽样，只做了2^10的傅立叶变换，其实上边的图就是1024个点的结果。&lt;/p&gt;
&lt;p&gt;拿到频谱计算振幅，利用振幅来算特征。&lt;/p&gt;
&lt;p&gt;1.peak位置特征。&lt;/p&gt;
&lt;p&gt;然后计算手动抽取样本的特征与动态计算的特征的距离，作为判断是否是广告的依据。&lt;/p&gt;
&lt;p&gt;最开始只用peak位置特征来识别广告，经过实验，确定为广告的音频有8%的可能被判为不含广告，全部音频有3%的误判率。&lt;/p&gt;
&lt;p&gt;2.为了降低误差，再加上频响特征。&lt;/p&gt;
&lt;p&gt;让peak特征距离与频响特征距离以某种形式混合计算出最后的值，以那个值作为判断依据。&lt;/p&gt;
&lt;p&gt;测试下来，误判率降到千分之几，误判出现在非广告判断为含广告，而真广告识别率100%。&lt;/p&gt;
&lt;p&gt;最后的处理办法：当判断为广告再运行一次语音合成，因为广告是不会连续出现两次的。也就是说，即使出现误判也无所谓了。&lt;/p&gt;
&lt;h3&gt;最后&lt;/h3&gt;
&lt;p&gt;其实呢，从上面的最后一句话可以看出来，有一个办法避开广告，就是所有的语音合成都合成两次，以第二次的结果作为输出。&lt;/p&gt;
&lt;p&gt;但我这还是算了，因为现在在弄的这个玩具，又有音视频采集、又有3d渲染、又有视频实时渲染、又有语音合成、又有多路混音、又有直播、又有......还是个手机上的玩具、而且我看性能监控，每次TTS合成十几个字的语音，cpu和fps都要抖一抖，所以这种捷径还是免了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Sun, 29 May 2016 20:49:00 +0800</pubDate><guid>tag:,2016-05-29:2016/audioCompress_2016_05_29_20_49.html</guid><category>algorithm</category><category>iOS</category><category>Math</category></item><item><title>librtmp h264hw AAC</title><link>/2016/librtmp_2016_04_17_19_43.html</link><description>&lt;h3&gt;开篇废话&lt;/h3&gt;
&lt;p&gt;最近有个脑洞想搞个漫画特效和换脸的直播，C++代码看着太烦，懒得在OBS上做，于是自己弄一个iOS上的直播环境。&lt;/p&gt;
&lt;p&gt;发现居然没有现成的开源库，有几个半开源的拿来一看，哎哟，大家都还在玩assetWrite啊，硬编接口去年apple不是大发慈悲的不再私有了么，你们居然.......虽然说性能是无所谓了，但这种写入磁盘再去监听变化来的方案实在太傻逼了，加上我要干的事应该运算资源需求挺大的，能省则省的原则，自己写一套基础环境好了。（其实是软编解腻了，想玩玩硬解.....）&lt;/p&gt;
&lt;h3&gt;注意事项&lt;/h3&gt;
&lt;p&gt;这里将描述这几天掉进的坑：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;VTCompressionSession&lt;/code&gt;务必手动设置位率，这玩意如果你不设置位率它将把（&lt;code&gt;CVPixelBufferGetWidth&lt;/code&gt;*&lt;code&gt;CVPixelBufferGetHeigh&lt;/code&gt;t）当成默认位率.........我说苹果你也太看得起你那压缩率了吧。在这卡了一个晚上时间，编码后一直都全屏马赛克，开始没往码率上想，调了一堆质量啊，其他的参数，都无效，最后无意间扫一眼Elecard的info才发现。&lt;/li&gt;
&lt;li&gt;AAC硬编码的效率很奇怪，反正我是换成软编了。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kAudioFormatMPEG4AAC&lt;/code&gt;对应的是AAC-LC。然后它有个叫LD的，虽然按照解释它也是low的一种，但是iOS上用会出现错误。&lt;/li&gt;
&lt;li&gt;介于&lt;code&gt;VTCompressionSession&lt;/code&gt;的问题，我给AAC也手动设BitRate了，44.1KHz的对应的大概是64000。&lt;/li&gt;
&lt;li&gt;AAC硬编出来的裸数据不带描述信息，需要自己去写adts头或AAC sequence header。当然这个不算是坑，只是我对它不太熟。&lt;/li&gt;
&lt;li&gt;librtmp的很多参数会因为&lt;code&gt;RTMP_Close&lt;/code&gt;重置，所以统一一劳永逸的设置不现实。例如需要Reconnect的时候，会因为&lt;code&gt;RTMP_EnableWrite&lt;/code&gt;没设置而找不到流。&lt;/li&gt;
&lt;li&gt;调试&lt;code&gt;RTMP_ConnectStream&lt;/code&gt;的时候不要对其使用断点，因为会出现收不到RTMP header而connect失败。&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Sun, 17 Apr 2016 19:43:00 +0800</pubDate><guid>tag:,2016-04-17:2016/librtmp_2016_04_17_19_43.html</guid><category>RTMP</category><category>iOS</category></item><item><title>360公共前端CDN</title><link>/2016/360CDN_2016_02_04_10_47.html</link><description>&lt;p&gt;今天更新blog发现卡在mathjax加载，开着https和ss都不行，还以为他们服务器挂了，准备去吐槽，打开官网，啊咧？不对啊，什么都正常啊，js也打得开啊。。。&lt;/p&gt;
&lt;p&gt;进一步发现原来是google的字体库，等等。。。什么情况，一直全局VPN的啊，上海局这边的墙更新了？256-cfb的加密不够用了？&lt;/p&gt;
&lt;p&gt;算了，换国内源吧。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fonts.googleapis.com&lt;/code&gt; - &amp;gt; &lt;code&gt;fonts.useso.com&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;呃......怎么有总360的阴谋实现了的感觉....&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Thu, 04 Feb 2016 10:47:00 +0800</pubDate><guid>tag:,2016-02-04:2016/360CDN_2016_02_04_10_47.html</guid><category>JavaScript</category></item><item><title>手机Date()出现转换错误</title><link>/2016/Date_isNaN_2016_01_27_10_34.html</link><description>&lt;h3&gt;new Date('2016-01-27 10:34:34');&lt;/h3&gt;
&lt;p&gt;一直在markdown的文件meta信息里面是这么来写日期格式的。&lt;/p&gt;
&lt;p&gt;已经成为一种习惯，当然也就想当然的认为：“就应该这样”。&lt;/p&gt;
&lt;p&gt;结果今日发现在手机端上有些浏览器访问页面，全部返回空了，虽然在pc上执行都正常。&lt;/p&gt;
&lt;p&gt;去搜了搜，原因是这个并不是标准写法&lt;/p&gt;
&lt;h3&gt;new Date('2016/01/27 10:34:34');&lt;/h3&gt;
&lt;p&gt;这个才是正确的写法（或者应该说是适用范围更广的写法？）&lt;/p&gt;
&lt;h3&gt;其他&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;new Date(&amp;quot;1/27/2016&amp;quot;)
new Date(&amp;quot;Janurary 27 2016&amp;quot;)
new Date(&amp;quot;Janurary 27,2016&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Wed, 27 Jan 2016 10:34:00 +0800</pubDate><guid>tag:,2016-01-27:2016/Date_isNaN_2016_01_27_10_34.html</guid><category>JavaScript</category></item><item><title>三和弦</title><link>/2016/stave_2016_01_25_13_52.html</link><description>&lt;h2&gt;stave&lt;/h2&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/stave_2016_01_25_13_52/3.png" /&gt;&lt;/center&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Mon, 25 Jan 2016 13:52:00 +0800</pubDate><guid>tag:,2016-01-25:2016/stave_2016_01_25_13_52.html</guid><category>Chord</category></item><item><title>大小调及音程</title><link>/2016/Scale_2016_01_19_20_04.html</link><description>&lt;h2&gt;大调&lt;/h2&gt;
&lt;p&gt;升号调分为：G调、D调、A调、E调、B调、#F调、#C调。 &lt;br&gt;
G大调1个升号,升的是F （4） &lt;br&gt;
D大调2个升号,升的是F、C （4、1） &lt;br&gt;
A大调3个升号,升的是F、C、G （4、1、5） &lt;br&gt;
E大调4个升号,升的是F、C、G、D （4、1、5、2） &lt;br&gt;
B大调5个升号,升的是F、C、G、D、A （4、1、5、2、6） &lt;br&gt;
&lt;em&gt;#F大调6个升号,升的是F、C、G、D、A、E （4、1、5、2、6、3） &lt;br&gt;
&lt;/em&gt;#C大调7个升号,升的是F、C、G、D、A、E、B （4、1、5、2、6、3、7）&lt;br&gt;&lt;/p&gt;
&lt;p&gt;降号调分为F调、bB调、bE调、bA调、bD调、bG调、bC调。 &lt;br&gt;
F大调1个降号，降的是B （7） &lt;br&gt;
bB大调2个降号，降的是B、E （7、3） &lt;br&gt;
bE大调3个降号，降的是B、E、A （7、3、6） &lt;br&gt;
bA大调4个降号，降的是B、E、A、D （7、3、6、2） &lt;br&gt;
bD大调5个降号，降的是B、E、A、D、G （7、3、6、2、5） &lt;br&gt;
bG大调6个降号，降的是B、E、A、D、G、C （7、3、6、2、5、1） &lt;br&gt;
bC大调7个降号，降的是B、E、A、D、G、C、F （7、3、6、2、5、1、4）&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;小调&lt;/h2&gt;
&lt;p&gt;自然小调一共有15个&lt;br&gt;
1.a小调：没有任何升降号。&lt;br&gt;
2.e小调：一个升号。升（f）。&lt;br&gt;
3.b小调：两个升号。升f、c。&lt;br&gt;
4.升f小调：三个升号。升f、c、g。&lt;br&gt;
5.升c小调：四个升号。升f、c、g、d。&lt;br&gt;
6.升g小调：五个升号。升f、c、g、d、a。&lt;br&gt;
7.升d小调：六个升号。升f、c、g、d、a、e。&lt;br&gt;
8.升a小调：七个升号。升f、c、g、d、a、e、b。&lt;br&gt;
9.d小调：一个降号。降b。&lt;br&gt;
10.g小调：两个降号。降b、e。&lt;br&gt;
11.c小调：三个降号。降b、e、a。&lt;br&gt;
12.f小调：四个降号。降b、e、a、d。&lt;br&gt;
13.降b小调：五个降号。降b、e、a、d、g。&lt;br&gt;
14.降e小调：六个降号。降b、e、a、d、g、c。&lt;br&gt;
15.降a小调：七个降号。降b、e、a、d、g、c、f。&lt;br&gt;&lt;/p&gt;
&lt;p&gt;距离0个半音：纯一度（DO-DO、MI-MI） &lt;br&gt;
距离1个半音：小二度（MI-FA）、增一度（DO-#DO） &lt;br&gt;
距离2个半音：大二度（DO-RE）、减三度（＃RE-FA） &lt;br&gt;
距离3个半音：小三度、增二度 &lt;br&gt;
距离4个半音：大三度、减四度 &lt;br&gt;
距离5个半音：纯四度 &lt;br&gt;
距离6个半音：增四度、减五度 &lt;br&gt;
距离7个半音：纯五度 &lt;br&gt;
距离8个半音：小六度 &lt;br&gt;
距离9个半音：大六度 &lt;br&gt;
距离10个半音：小七度 &lt;br&gt;
距离11个半音：大七度 &lt;br&gt;
距离12个半音：纯八度 &lt;br&gt;&lt;/p&gt;
&lt;p&gt;具体一点说Do-Mi就是大三度，因为中间间隔了两个全音。Re-Fa就是小三度，因为中间间隔了1.5个全音，也就是三个半音。 &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Tue, 19 Jan 2016 20:04:00 +0800</pubDate><guid>tag:,2016-01-19:2016/Scale_2016_01_19_20_04.html</guid><category>Chord</category></item><item><title>圆形上标</title><link>/2016/CircleBadge_2016_01_08_17_48.html</link><description>&lt;p&gt;就你们主页看到tag的数量（如果我还没把这块改掉的话），今天更新了下pelican，标签云出问题了，索性去掉tag_cloud插件，还原会最原始的tag读取方式，但样式看着太单调，于是把tag_cloud的badge改成圆形上标（第一反应就是这样，iOS用多了.....）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="nc"&gt;.tagcloud&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nc"&gt;.badge&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;vertical-align&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;font-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;text-align&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;text-indent&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;background-position&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-30px&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;display&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Fri, 08 Jan 2016 17:48:00 +0800</pubDate><guid>tag:,2016-01-08:2016/CircleBadge_2016_01_08_17_48.html</guid><category>JavaScript</category><category>CSS</category></item><item><title>flask_socketio</title><link>/2015/flask_socketio_2015_12_31_17_05.html</link><description>&lt;h2&gt;牢骚&lt;/h2&gt;
&lt;p&gt;因为在线舞台产品--咪啪中有一个弹幕的需求，平台开发的同事那边实在搞不定rtmp的信息流。为了效果演示，我先将就用html5的canvas来做一个临时的。&lt;/p&gt;
&lt;p&gt;这里面需要用到web通信，突然就想到年初做webRtc demo用的WebSocket了。&lt;/p&gt;
&lt;p&gt;之前WebSocket的后台用Node.js来做，而现在咪啪这个产品正式后台是java的、临时测试及调试后台是python的，于是去搜了搜，Flask加上Flask-SocketIO后可以支持WebSocket。前端用socket.io，可以简化开发。&lt;/p&gt;
&lt;h2&gt;正文&lt;/h2&gt;
&lt;p&gt;Flask-SocketIO用起来真是超方便。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;@socketio.on(&amp;#39;event&amp;#39;) #指定监听的时间
def foo(data): #data是前端发来的一个json
    pass
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;前端发来一个加入房间的事件消息&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;socket&lt;/span&gt;&lt;span class="nc"&gt;.emit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;join&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;平台这边通过设定时间监听，执行对应函数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;@socketio.on(&amp;#39;join&amp;#39;)
def on_join(data):
    # 加入到socketio提供的一个“用户列队”中
    join_room(data[&amp;#39;room&amp;#39;]) 
    # 返回消息，告知用户“你加入xxxx号房间成功”
    emit(&amp;#39;you have joined room&amp;#39;, {&amp;#39;data&amp;#39;: data[&amp;#39;room&amp;#39;]})
    # 广播一条消息，告知所有房间内的用户“谁谁谁来了”
    emit(&amp;#39;broadcast&amp;#39;,str(data[&amp;#39;id&amp;#39;]) + &amp;#39; has entered the room.&amp;#39;, room = data[&amp;#39;room&amp;#39;], broadcast = True)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;弹幕消息广播呢，我这么写，其实就比上面多一个&lt;code&gt;include_self&lt;/code&gt;,看过弹幕站的都知道，自己肯定可以看到自己的发言啦&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;@socketio.on(&amp;#39;say&amp;#39;)
def on_say(data):
    emit(&amp;#39;broadcast&amp;#39;, data[&amp;#39;content&amp;#39;], room = data[&amp;#39;room&amp;#39;], broadcast = True, include_self = True)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后用户掉线的时候别忘了用户退出或者掉线的时候，让用户“退出房间”&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;@socketio.on(&amp;#39;disconnect&amp;#39;)
@socketio.on(&amp;#39;leave&amp;#39;)
def on_leave(data):
    leave_room(data[&amp;#39;room&amp;#39;])
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;flask-socketio 开发手册&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://flask-socketio.readthedocs.org/en/latest/"&gt;地址&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Thu, 31 Dec 2015 17:05:00 +0800</pubDate><guid>tag:,2015-12-31:2015/flask_socketio_2015_12_31_17_05.html</guid><category>Flask-SocketIO</category><category>Flask</category><category>JavaScript</category><category>WebSocket</category><category>Web</category><category>Python</category></item><item><title>推销电话...</title><link>/2015/Sales_calls_2015_11-05_15_53.html</link><description>&lt;h2&gt;kaikai03.com入手后&lt;/h2&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;买了域名后的周一，baidu的销售上班第一时间来电话询问后续推广事宜。&lt;br&gt;
&amp;#160; &amp;#160; &amp;#160; &amp;#160;跟着昨天早上再接到一个，刚才又再次接到，可是我根本没想要推广，而且今年vps到期后，日志都拉回本地在本地写了。我说baidu的销售部门没有统一工作平台的么？一个空挂的、还明确没上线计划的客户，每天换着销售来问候一下多浪费人力啊。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Thu, 05 Nov 2015 15:53:00 +0800</pubDate><guid>tag:,2015-11-05:2015/Sales_calls_2015_11-05_15_53.html</guid><category>network</category><category>life</category></item><item><title>域名</title><link>/2015/domain_2015_10-29_15_23.html</link><description>&lt;h2&gt;买了个新域名&lt;/h2&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;某马来西亚网络商万圣节活动，只要3点几个马币就能买个域名1年，换过来大概6块RMB，于是顺手把域名买了。&lt;br&gt;
&amp;#160; &amp;#160; &amp;#160; &amp;#160;想到这么多年的日志都没给这服务上个域名，怪对不起它滴。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Thu, 29 Oct 2015 15:23:00 +0800</pubDate><guid>tag:,2015-10-29:2015/domain_2015_10-29_15_23.html</guid><category>network</category><category>life</category></item><item><title>Convolutional neural network</title><link>/2015/Convolutional_neural_network_2015_10_22_23_18.html</link><description>&lt;h2&gt;卷积神经网络全面解析&lt;/h2&gt;
&lt;p&gt;最近仔细学习了一下卷积神经网络（CNN，Convolutional Neural Network），发现各处资料都不是很全面，经过艰苦努力终于弄清楚了。为了以后备查，以及传播知识，决定记录下来。本文将极力避免废话，重点聚焦在推导过程上，为打算从零开始的孩纸说清楚“为什么”。&lt;/p&gt;
&lt;p&gt;另外，因本人才疏学浅（是真的才疏学浅，不是谦虚），肯定会有很多谬误，欢迎大家指出！&lt;/p&gt;
&lt;h2&gt;卷积神经网络（CNN）概述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;由来：神经元网络的直接升级版&lt;/li&gt;
&lt;li&gt;相关：Yann LeCun和他的LeNet&lt;/li&gt;
&lt;li&gt;影响：在图像、语音领域不断突破，复兴了神经元网络并进入“深度学习”时代&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;卷积神经网络沿用了普通的神经元网络即多层感知器的结构，是一个&lt;strong&gt;前馈网络&lt;/strong&gt;。以应用于图像领域的CNN为例，大体结构如图1。&lt;/p&gt;
&lt;p&gt;&lt;img alt="cnn_structure.png" src="/article_img/Convolutional_neural_network_2015_10_22_23_18/cnn_structure.png" /&gt;&lt;/p&gt;
&lt;p&gt;很明显，这个典型的结构分为四个大层次&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入图像I。为了减小复杂度，一般使用灰度图像。当然，也可以使用RGB彩色图像，此时输入图像有三张，分别为RGB分量。输入图像一般需要归一化，如果使用sigmoid激活函数，则归一化到[0, 1]，如果使用tanh激活函数，则归一化到[-1, 1]。&lt;/li&gt;
&lt;li&gt;多个卷积（C）-下采样（S）层。将上一层的输出与本层权重W做卷积得到各个C层，然后下采样得到各个S层。怎么做以及为什么，下面会具体分析。这些层的输出称为Feature Map。&lt;/li&gt;
&lt;li&gt;光栅化（X）。是为了与传统的多层感知器全连接。即将上一层的所有Feature Map的每个像素依次展开，排成一列。&lt;/li&gt;
&lt;li&gt;传统的多层感知器（N&amp;amp;O）。最后的分类器一般使用Softmax，如果是二分类，当然也可以使用LR。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来，就开始深入探索这个结构吧！&lt;/p&gt;
&lt;h2&gt;从多层感知器（MLP）说起&lt;/h2&gt;
&lt;p&gt;卷积神经网络来源于普通的神经元网络。要了解个中渊源，就要先了解神经元网络的机制以及缺点。典型的神经元网络就是多层感知器。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;摘要：本节主要内容为多层感知器（MLP，Multi-Layer Perceptron）的原理、权重更新公式的推导。熟悉这一部分的童鞋可以直接跳过了~但是，一定一定要注意，&lt;strong&gt;本节难度比较大&lt;/strong&gt;，所以不熟悉的童鞋一定一定要认真看看！如果对推导过程没兴趣，可直接在本节最后看结论。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;感知器&lt;/h3&gt;
&lt;p&gt;感知器（Perceptron）是建立模型&lt;/p&gt;
&lt;p&gt;$$ f(x) = act(\theta^Tx + b) $$&lt;/p&gt;
&lt;p&gt;其中激活函数 &lt;em&gt;act&lt;/em&gt; 可以使用{&lt;em&gt;sign, sigmoid, tanh&lt;/em&gt;}之一。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;激活函数使用符号函数 &lt;em&gt;sign&lt;/em&gt; ，可求解损失函数最小化问题，通过梯度下降确定参数&lt;/li&gt;
&lt;li&gt;激活函数使用 &lt;em&gt;sigmoid&lt;/em&gt; （或者 &lt;em&gt;tanh&lt;/em&gt; ），则分类器事实上成为Logistic Regression（个人理解，请指正），可通过梯度上升极大化似然函数，或者梯度下降极小化损失函数，来确定参数&lt;/li&gt;
&lt;li&gt;如果需要多分类，则事实上成为Softmax Regression&lt;/li&gt;
&lt;li&gt;如要需要分离超平面恰好位于正例和负例的正中央，则成为支持向量机（SVM）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;感知器比较简单，资料也比较多，就不再详述。&lt;/p&gt;
&lt;h3&gt;多层感知器&lt;/h3&gt;
&lt;p&gt;感知器存在的问题是，对线性可分数据工作良好，如果设定迭代次数上限，则也能一定程度上处理近似线性可分数据。但是对于非线性可分的数据，比如最简单的异或问题，感知器就无能为力了。这时候就需要引入多层感知器这个大杀器。&lt;/p&gt;
&lt;p&gt;多层感知器的思路是，尽管原始数据是非线性可分的，但是可以通过某种方法将其映射到一个线性可分的高维空间中，从而使用线性分类器完成分类。图1中，从X到O这几层，正展示了多层感知器的一个典型结构，即输入层-隐层-输出层。&lt;/p&gt;
&lt;h4&gt;输入层-隐层&lt;/h4&gt;
&lt;p&gt;是一个全连接的网络，即每个输入节点都连接到所有的隐层节点上。更详细地说，可以把输入层视为一个向量 $ x $ ，而隐层节点 $j$ 有一个权值向量 $ \theta_j $ 以及偏置 $ b_j $ ，激活函数使用 &lt;em&gt;sigmoid&lt;/em&gt; 或 &lt;em&gt;tanh&lt;/em&gt; ，那么这个隐层节点的输出应该是&lt;/p&gt;
&lt;p&gt;$$ f_j(x) = act(\theta_j^Tx + b_j) $$&lt;/p&gt;
&lt;p&gt;也就是每个隐层节点都相当于一个感知器。每个隐层节点产生一个输出，那么隐层所有节点的输出就成为一个向量，即&lt;/p&gt;
&lt;p&gt;$$ f(x) =  act({\Theta}x + b) $$&lt;/p&gt;
&lt;p&gt;若输入层有 $ m $ 个节点，隐层有 $ n $ 个节点，那么 $ \Theta = [\theta^T] $ 为 $ n×m $ 的矩阵， $ x $  为长为$ m $ 的向量，$ b $ 为长为 $ n $ 的向量，激活函数作用在向量的每个分量上， $ f(x) $ 返回一个向量。&lt;/p&gt;
&lt;h4&gt;隐层-输出层&lt;/h4&gt;
&lt;p&gt;可以视为级联在隐层上的一个感知器。若为二分类，则常用Logistic Regression；若为多分类，则常用Softmax Regression。&lt;/p&gt;
&lt;h3&gt;Back Propagation&lt;/h3&gt;
&lt;p&gt;搞清楚了模型的结构，接下来就需要通过某种方法来估计参数了。对于一般的问题，可以通过求解损失函数极小化问题来进行参数估计。但是对于多层感知器中的隐层，因为无法直接得到其输出值，当然不能够直接使用到其损失了。这时，就需要将损失从顶层反向传播（Back Propagate）到隐层，来完成参数估计的目标。&lt;/p&gt;
&lt;p&gt;首先，约定标量为普通小写字母，向量为加粗小写字母，矩阵为加粗大写字母；再约定以下记号：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入样本为$ \mathbf x $ ，其标签为 $ \mathbf t $&lt;/li&gt;
&lt;li&gt;对某个层$ Q $ ，其输出为 $ \mathbf o_Q $ ，其第 $ j $ 个节点的输出为 $ o_Q^{(j)} $ ，其每个节点的输入均为上一层 $ P $ 的输出 $ \mathbf o_P $ ；层 $ Q $ 的权重为矩阵 $ \mathbf \Theta_Q $ ，连接层 $ P $ 的第 $ i $ 个节点与层 $ Q $ 的第 $ j $ 个节点的权重为 $ \theta_Q^{(ji)} $ &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在可以定义损失函数&lt;/p&gt;
&lt;p&gt;$$\left \lbrace \begin {aligned} E &amp;amp; = \frac {1} {2} \sum_{y \in Y}(t^{(y)} - o_Y^{(y)})^2 \\ o_Q^{(j)} &amp;amp; = \phi(n_Q^{(j)}) \\ n_Q^{(j)} &amp;amp; = \sum_{i \in P} \theta_Q^{(ji)} o_P^{(i)} + b_Q^{(j)} \end {aligned} \right. $$&lt;/p&gt;
&lt;p&gt;其中， $ \phi $ 为激活函数。我们依旧通过极小化损失函数的方法，尝试进行推导。则&lt;/p&gt;
&lt;p&gt;$$ \left \lbrace \begin {aligned} \frac {\partial E} {\partial \theta_Q^{(ji)}} &amp;amp; = \frac {\partial E} {\partial o_Q^{(j)}} \frac {\partial o_Q^{(j)}} {\partial n_Q^{(j)}} \frac {\partial n_Q^{(j)}} {\partial \theta_Q^{(ji)}} \\ \frac {\partial E} {\partial b_Q^{(j)}} &amp;amp; = \frac {\partial E} {\partial o_Q^{(j)}} \frac {\partial o_Q^{(j)}} {\partial n_Q^{(j)}} \frac {\partial n_Q^{(j)}} {\partial b_Q^{(j)}} \end{aligned}\right. $$&lt;/p&gt;
&lt;p&gt;上边两个式子的等号右边部有三个导数比较容易确定&lt;/p&gt;
&lt;p&gt;$$ \left \lbrace \begin {aligned} \frac {\partial o_Q^{(j)}} {\partial n_Q^{(j)}} &amp;amp; = \phi'(n_Q^{(j)}) \\ \frac {\partial n_Q^{(j)}} {\partial \theta_Q^{(ji)}} &amp;amp; = o_P^{(i)} \\ \frac {\partial n_Q^{(j)}} {\partial b_Q^{(j)}} &amp;amp; = 1 \end {aligned} \right. $$&lt;/p&gt;
&lt;p&gt;然后再看剩下的比较复杂的一个偏导数。考虑层 $ Q $ 的下一层 $ R $ ，其节点 $ k $ 的输入为层 $ Q $ 中每个节点的输出，也就是为 $ o_Q^{(j)} $ 的函数，考虑逆函数，可视 $ o_Q^{(j)} $ 为 $ o_R^{(k)} $ 的函数，也为 $ n_R^{(k)} $ 的函数。则对每个隐层&lt;/p&gt;
&lt;p&gt;$$ \begin {aligned} \frac {\partial E} {\partial o_Q^{(j)}} &amp;amp; = \frac {\partial E(n_R^{(1)}, n_R^{(2)}, ..., n_R^{(k)}, ..., n_R^{(K)})} {\partial o_Q^{(j)}} \\ &amp;amp; = \sum_{k \in R} \frac {\partial E} {\partial n_R^{(k)}} \frac {\partial n_R^{(k)}} {\partial o_Q^{(j)}} \\ &amp;amp; = \sum_{k \in R} \frac {\partial E} {\partial o_R^{(k)}} \frac {\partial o_R^{(k)}} {\partial n_R^{(k)}} \frac {\partial n_R^{(k)}} {\partial o_Q^{(j)}} \\ &amp;amp; = \sum_{k \in R} \frac {\partial E} {\partial o_R^{(k)}} \frac {\partial o_R^{(k)}} {\partial n_R^{(k)}} \theta_R^{(kj)} \end {aligned} $$&lt;/p&gt;
&lt;p&gt;令 $ \delta_Q^{(j)} = \frac {\partial E} {\partial o_Q^{(j)}} \frac {\partial o_Q^{(j)}} {\partial n_Q^{(j)}} $&lt;/p&gt;
&lt;p&gt;则对每个隐层&lt;/p&gt;
&lt;p&gt;$$ \frac {\partial E} {\partial o_Q^{(j)}} = \sum_{k \in R} \frac {\partial E} {\partial o_R^{(k)}} \frac {\partial o_R^{(k)}} {\partial n_R^{(k)}} \theta_R^{(kj)} = \sum_{k \in R} \delta_R^{(k)} \theta_R^{(kj)} $$&lt;/p&gt;
&lt;p&gt;考虑到输出层，有&lt;/p&gt;
&lt;p&gt;$$ \frac {\partial E} {\partial o_Q^{(j)}} = \left \lbrace \begin {aligned} \sum_{k \in R} \delta_R^{(k)} \theta_R^{(kj)}, &amp;amp; \qquad k\ has\ input\ node\ j \\ o_Y^{(j)} - t^{(j)}, &amp;amp; \qquad j\ is\ an\ output\ node,\ i.e.\ Q = Y \end {aligned} \right . $$&lt;/p&gt;
&lt;p&gt;故有&lt;/p&gt;
&lt;p&gt;$$ \delta_Q^{(j)} = \frac {\partial E} {\partial o_Q^{(j)}} \frac {\partial o_Q^{(j)}} {\partial n_Q^{(j)}} = \frac {\partial E} {\partial o_Q^{(j)}} \phi'(n_Q^{(j)}) = \left \lbrace \begin {aligned} (\sum_{k \in R} \delta_R^{(k)} \theta_R^{(kj)}) \phi'(n_Q^{(j)}), &amp;amp; \qquad k\ has\ input\ node\ j \\ (o_Y^{(j)} - t^{(j)}) \phi'(n_Y^{(j)}), &amp;amp; \qquad j\ is\ an\ output\ node,\ i.e.\ Q = Y \end {aligned} \right. $$&lt;/p&gt;
&lt;p&gt;综合以上各式，有梯度结果&lt;/p&gt;
&lt;p&gt;$$ \begin {aligned} \frac {\partial E} {\partial \theta_Q^{(ji)}} &amp;amp; = \frac {\partial E} {\partial o_Q^{(j)}} \frac {\partial o_Q^{(j)}} {\partial n_Q^{(j)}} \frac {\partial n_Q^{(j)}} {\partial \theta_Q^{(ji)}} = \delta_Q^{(j)} o_P^{(i)} \\ \frac {\partial E} {\partial b_Q^{(j)}} &amp;amp; = \frac {\partial E} {\partial o_Q^{(j)}} \frac {\partial o_Q^{(j)}} {\partial n_Q^{(j)}} \frac {\partial n_Q^{(j)}} {\partial b_Q^{(j)}} = \delta_Q^{(j)} \end {aligned} $$&lt;/p&gt;
&lt;p&gt;本来到这里应该就结束了，不过同正向的时候一样，为了计算方便，我们依然希望能够以矩阵或者向量的方式来表达。&lt;strong&gt;结论在这里&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;假设有层 $ P, Q, R $ ，分别有 $ l, m, n $ 个节点，依序前者输出全连接到后者作为输入。层 $ Q $ 有权重矩阵
$ [\mathbf \Theta_Q]&lt;em m_1="m×1"&gt;{m×l} $ ，偏置向量 $ [\mathbf b_Q]&lt;/em&gt; $ ，层 $ R $ 有权重矩阵 $ [\mathbf \Theta_R]&lt;em n_1="n×1"&gt;{n×m} $ ，偏置向量 $ [\mathbf b_R]&lt;/em&gt; $ 。
那么&lt;/p&gt;
&lt;p&gt;$$ \begin {aligned} \frac {\partial E} {\partial \mathbf \Theta_Q} &amp;amp; = \mathbf δ_Q \mathbf o_P^T \\ \frac {\partial E} {\partial \mathbf b_Q} &amp;amp; = \mathbf δ_Q \\ \mathbf δ_Q &amp;amp; = \left \lbrace \begin {aligned} (\mathbf \Theta_R^T \mathbf δ_R) \circ \phi'(\mathbf n_Q), &amp;amp; \qquad Q\ is\ a\ hidden\ layer \\ (\mathbf o_Y - \mathbf t) \circ \phi'(\mathbf n_Y), &amp;amp; \qquad Q = Y\ is\ the\ output\ layer \end {aligned} \right. \end {aligned} $$&lt;/p&gt;
&lt;p&gt;其中，运算 $ w = u \circ v  $ 表示  $ w_i = u_i v_i $  。函数作用在向量或者矩阵上，表示作用在其每个分量上。&lt;/p&gt;
&lt;p&gt;最后，补充几个常用的激活函数的导数结果，推导很简单，从略。&lt;/p&gt;
&lt;p&gt;$$ \begin {aligned} \phi'(x) &amp;amp; = sigmoid'(x) = sigmoid(x)(1 - sigmoid(x)) = \mathbf o_Q(1 - \mathbf o_Q)\\ \phi'(x) &amp;amp; = tanh'(x) = 1 - tanh^2(x) = 1 - \mathbf o_Q^2\\ \phi'(x) &amp;amp; = softmax'(x) = softmax(x) - softmax^2(x) = \mathbf o_Q - \mathbf o_Q^2 \end{aligned} $$&lt;/p&gt;
&lt;h3&gt;存在的问题&lt;/h3&gt;
&lt;p&gt;多层感知器存在的最大的问题就是，它是一个全连接的网络，因此在输入比较大的时候，权值会特别多。比如一个有1000个节点的隐层，连接到一个1000×1000的图像上，那么就需要 10^9 个权值参数（外加1000个偏置参数）！这个问题，一方面限制了每层能够容纳的最大神经元数目，另一方面也限制了多层感知器的层数即深度。&lt;/p&gt;
&lt;p&gt;多层感知器的另一个问题是梯度发散。 &lt;del&gt;（&lt;span style="color:red"&gt;这个问题的具体原因还没有完全弄清楚，求指教！&lt;/span&gt;）&lt;/del&gt; 一般情况下，我们需要把输入归一化，而每个神经元的输出在激活函数的作用下也是归一化的；另外，有效的参数其绝对值也一般是小于1的；这样，在BP过程中，多个小于1的数连乘，得到的会是更小的值。也就是说，在深度增加的情况下，从后传播到前边的残差会越来越小，甚至对更新权值起不到帮助，从而失去训练效果，使得前边层的参数趋于随机化（补充一下，其实随机参数也是能一定程度上捕捉到图像边缘的）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;感谢&lt;a href="http://www.shwley.com/"&gt;shwley&lt;/a&gt;提供的帮助~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因为这些问题，神经元网络在很长一段时间内都被冷落了。&lt;/p&gt;
&lt;h2&gt;从MLP到CNN&lt;/h2&gt;
&lt;p&gt;卷积神经网络的名字怪吓人，实际理解起来也挺吓人的。哈哈，其实只要看明白了多层感知器的推导过程，理解卷积神经网络就差不多可以信手拈来了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;摘要：首先解释卷积神经网络为什么会“长”成现在这般模样。然后详细推导了卷积神经网络的预测过程和参数估计方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;CNN的前世今生&lt;/h3&gt;
&lt;p&gt;既然多层感知器存在问题，那么卷积神经网络的出现，就是为了解决它的问题。卷积神经网络的核心出发点有三个。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;局部感受野&lt;/strong&gt;。形象地说，就是模仿你的眼睛，想想看，你在看东西的时候，目光是聚焦在一个相对很小的局部的吧？严格一些说，普通的多层感知器中，隐层节点会全连接到一个图像的每个像素点上，而在卷积神经网络中，每个隐层节点只连接到图像某个足够小局部的像素点上，从而大大减少需要训练的权值参数。举个栗子，依旧是1000×1000的图像，使用10×10的感受野，那么每个神经元只需要100个权值参数；不幸的是，由于需要将输入图像扫描一遍，共需要991×991个神经元！参数数目减少了一个数量级，不过还是太多。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;权值共享&lt;/strong&gt;。形象地说，就如同你的某个神经中枢中的神经细胞，它们的结构、功能是相同的，甚至是可以互相替代的。也就是，在卷积神经网中，同一个卷积核内，所有的神经元的权值是相同的，从而大大减少需要训练的参数。继续上一个栗子，虽然需要991×991个神经元，但是它们的权值是共享的呀，所以还是只需要100个权值参数，以及1个偏置参数。从MLP的 10^9 到这里的100，就是这么狠！作为补充，在CNN中的每个隐藏，一般会有多个卷积核。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;池化&lt;/strong&gt;。形象地说，你先随便看向远方，然后闭上眼睛，你仍然记得看到了些什么，但是你能完全回忆起你刚刚看到的每一个细节吗？同样，在卷积神经网络中，没有必要一定就要对原图像做处理，而是可以使用某种“压缩”方法，这就是池化，也就是每次将原图像卷积后，都通过一个下采样的过程，来减小图像的规模。以最大池化（Max Pooling）为例，1000×1000的图像经过10×10的卷积核卷积后，得到的是991×991的特征图，然后使用2×2的池化规模，即每4个点组成的小方块中，取最大的一个作为输出，最终得到的是496×496大小的特征图。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;现在来看，需要训练参数过多的问题已经完美解决。 &lt;del&gt;而梯度发散的问题，因为还不清楚具体缘由，依然留待讨论。&lt;/del&gt; 关于梯度发散，因为多个神经元共享权值，因此它们也会对同一个权值进行修正，积少成多，积少成多，积少成多，从而一定程度上解决梯度发散的问题！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面我们来揭开卷积神经网络中“卷积”一词的神秘面纱。&lt;/p&gt;
&lt;h3&gt;CNN的预测过程&lt;/h3&gt;
&lt;p&gt;回到开头的图1，卷积神经网络的预测过程主要有四种操作：卷积、下采样、光栅化、多层感知器预测。&lt;/p&gt;
&lt;h4&gt;卷积&lt;/h4&gt;
&lt;p&gt;先抛开卷积这个概念不管。为简便起见，考虑一个大小为5×5的图像，和一个3×3的卷积核。这里的卷积核共有9个参数，就记为 $ \Theta = [\theta_{ij}]_{3×3} $ 吧。这种情况下，卷积核实际上有9个神经元，他们的输出又组成一个3×3的矩阵，称为特征图。第一个神经元连接到图像的第一个3×3的局部，第二个神经元则连接到第二个局部（注意，有重叠！就跟你的目光扫视时也是连续扫视一样）。具体如图2所示。&lt;/p&gt;
&lt;p&gt;&lt;img alt="cnn_conv.png" src="/article_img/Convolutional_neural_network_2015_10_22_23_18/cnn_conv.png" /&gt;&lt;/p&gt;
&lt;p&gt;图2的上方是第一个神经元的输出，下方是第二个神经元的输出。每个神经元的运算依旧是&lt;/p&gt;
&lt;p&gt;$$ f(x) = act(\sum_{i, j}^n \theta_{(n - i)(n - j)} x_{ij} + b) $$&lt;/p&gt;
&lt;p&gt;需要注意的是，平时我们在运算时，习惯使用 $ \theta_{ij}x_{ij} $ 这种写法，但事实上，我们这里使用的是 $ \theta_{(n - i)(n - j)}x_{ij} $  ，原因马上揭晓。&lt;/p&gt;
&lt;p&gt;现在我们回忆一下离散卷积运算。假设有二维离散函数 $ f(x, y), g(x, y) $ ， 那么它们的卷积定义为&lt;/p&gt;
&lt;p&gt;$$ f(m, n)*g(m, n) = \sum_u^\infty \sum_v^\infty {f(u, v)g(m - u, n - v)} $$&lt;/p&gt;
&lt;p&gt;现在发现了吧！上面例子中的9个神经元均完成输出后，实际上等价于图像和卷积核的卷积操作！这就是“卷积神经网络”名称的由来，也是为什么在神经元运算时使用  $ \theta_{(n - i)(n - j)}x_{ij} $ 。&lt;/p&gt;
&lt;p&gt;如果你足够细心，就会发现其实上述例子中的运算并不完全符合二维卷积的定义。实际上，我们需要用到的卷积操作有两种模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;valid模式，用 $ *_v $ 表示。即上边例子中的运算。在这种模式下，卷积只发生在被卷积的函数的定义域“内部”。一个 $ m×n $ 的矩阵被一个 $ p×q $ 的矩阵卷积（$ m \ge p, n \ge q $ ），得到的是一个 $ (m - p + 1)×(n - q + 1) $ 的矩阵。&lt;/li&gt;
&lt;li&gt;full模式，用 $ *_f $ 表示。这种模式才是上边二维卷积的定义。一个 $ m×n $ 的矩阵被一个 $ p×q $ 的矩阵卷积，得到的是一个 $ (m + p - 1)×(n + q - 1) $ 的矩阵。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在总结一下卷积过程。如果卷积层 $ c $ 中的一个“神经中枢” $ j $  连接到特征图 $ \mathbf X_1, \mathbf X_2, ..., \mathbf X_i $ ，且这个卷积核的权重矩阵为 $ \mathbf \Theta_j $ ，那么这个神经中枢的输出为&lt;/p&gt;
&lt;p&gt;$$ \mathbf O_j = \phi (\sum_i \mathbf X_i *_v \mathbf \Theta_j + b_j) $$&lt;/p&gt;
&lt;h4&gt;下采样&lt;/h4&gt;
&lt;p&gt;下采样，即池化，目的是减小特征图，池化规模一般为2×2。常用的池化方法有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最大池化（Max Pooling）。取4个点的最大值。这是最常用的池化方法。&lt;/li&gt;
&lt;li&gt;均值池化（Mean Pooling）。取4个点的均值。&lt;/li&gt;
&lt;li&gt;高斯池化。借鉴高斯模糊的方法。不常用。具体过程不是很清楚。。。&lt;/li&gt;
&lt;li&gt;可训练池化。训练函数 $ f $ ，接受4个点为输入，出入1个点。不常用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于特征图的变长不一定是2的倍数，所以在边缘处理上也有两种方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;忽略边缘。即将多出来的边缘直接省去。&lt;/li&gt;
&lt;li&gt;保留边缘。即将特征图的变长用0填充为2的倍数，然后再池化。一般使用这种方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对神经中枢 $ j $ 的输出 $ O_j $ ，使用池化函数 &lt;em&gt;downsample&lt;/em&gt; ，池化后的结果为&lt;/p&gt;
&lt;p&gt;$$ \mathbf S_j = downsample(\mathbf O_j) $$&lt;/p&gt;
&lt;h4&gt;光栅化&lt;/h4&gt;
&lt;p&gt;图像经过池化-下采样后，得到的是一系列的特征图，而多层感知器接受的输入是一个向量。因此需要将这些特征图中的像素依次取出，排列成一个向量。具体说，对特征图 $ \mathbf X_1, \mathbf X_2, ..., \mathbf X_j $ ，光栅化后得到的向量&lt;/p&gt;
&lt;p&gt;$$ \mathbf o_k = [x_{111}, x_{112}, ..., x_{11n}, x_{121}, x_{122}, ..., x_{12n}, ..., x_{1mn}, ..., x_{2mn}, ..., x_{jmn}]^T $$&lt;/p&gt;
&lt;h4&gt;多层感知器预测&lt;/h4&gt;
&lt;p&gt;将光栅化后的向量连接到多层感知器即可。&lt;/p&gt;
&lt;h3&gt;CNN的参数估计&lt;/h3&gt;
&lt;p&gt;卷积神经网络的参数估计依旧使用Back Propagation的方法，不过需要针对卷积神经网络的特点进行一些修改。我们从高层到底层，逐层进行分析。&lt;/p&gt;
&lt;h4&gt;多层感知器层&lt;/h4&gt;
&lt;p&gt;使用多层感知器的参数估计方法，得到其最低的一个隐层 $ S $ 的残差向量 $ \mathbf δ_s $ 。现在需要将这个残差传播到光栅化层$ R $ ，光栅化的时候并没有对向量的值做修改，因此其激活函数为恒等函数，其导数为单位向量。&lt;/p&gt;
&lt;p&gt;$$ \mathbf δ_R =(\mathbf \Theta_S^T \mathbf δ_S) \circ \phi'(\mathbf n_R) = \mathbf \Theta_S^T \mathbf δ_S $$&lt;/p&gt;
&lt;h4&gt;光栅化层&lt;/h4&gt;
&lt;p&gt;从上一层传过来的残差为&lt;/p&gt;
&lt;p&gt;$$ \mathbf δ_R = [\delta_{111}, \delta_{112}, ..., \delta_{11n}, \delta_{121}, \delta_{122}, ..., \delta_{12n}, ..., \delta_{1mn}, ..., \delta_{2mn}, ..., \delta_{jmn}]^T $$
重新整理成为一系列的矩阵即可，若上一层 $ Q $ 有 $ q $ 个池化核，则传播到池化层的残差&lt;/p&gt;
&lt;p&gt;$$ \Delta_Q = {\mathbf \Delta_1, \mathbf \Delta_2, ..., \mathbf \Delta_q} $$&lt;/p&gt;
&lt;h4&gt;池化层&lt;/h4&gt;
&lt;p&gt;对应池化过程中常用的两种池化方案，这里反传残差的时候也有两种上采样方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最大池化：将1个点的残差直接拷贝到4个点上。&lt;/li&gt;
&lt;li&gt;均值池化：将1个点的残差平均到4个点上。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;即传播到卷积层的残差&lt;/p&gt;
&lt;p&gt;$$ \mathbf \Delta_p = upsample(\mathbf \Delta_q) $$&lt;/p&gt;
&lt;h4&gt;卷积层&lt;/h4&gt;
&lt;p&gt;卷积层有参数，所以卷积层的反传过程有两个任务，一是更新权值，另一是反传残差。先看更新权值，即梯度的推导。&lt;/p&gt;
&lt;p&gt;&lt;img alt="cnn_update.png" src="/article_img/Convolutional_neural_network_2015_10_22_23_18/cnn_update.png" /&gt;&lt;/p&gt;
&lt;p&gt;如图三上方，先考虑卷积层的某个“神经中枢”中的第一个神经元。根据多层感知器的梯度公式&lt;/p&gt;
&lt;p&gt;$$ \frac {\partial E} {\partial \theta_{ji}} = \delta_j o_i $$&lt;/p&gt;
&lt;p&gt;那么在图三上方的例子中，有&lt;/p&gt;
&lt;p&gt;$$ \frac {\partial E} {\partial \theta_{11}} = \delta_{11} o_{22} \qquad \frac {\partial E} {\partial \theta_{12}} = \delta_{11} o_{21} \qquad \frac {\partial E} {\partial \theta_{21}} = \delta_{11} o_{12} \qquad \frac {\partial E} {\partial \theta_{22}} = \delta_{11} o_{11} $$&lt;/p&gt;
&lt;p&gt;考虑到其他的神经元，每次更新的都是这四个权值，因此实际上等价于一次更新这些偏导数的和。如果&lt;strong&gt;仅考虑对 $ \theta_{11} $ 的偏导数&lt;/strong&gt;，不难发现如图3下方所示，其值应该来自于淡蓝色和灰色区域。是不是似曾相识？是的，又是卷积！但是又有两处重要的不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在计算对 $ \theta_{11} $ 的偏导数时，淡蓝色区域和灰色区域的对应位置做运算，但是在卷积运算中，这些位置应该是旋转过来的！&lt;/li&gt;
&lt;li&gt;$ \Theta $ 矩阵的左上角，而淡蓝色区域在右下角，同样是旋转过的！&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，对卷积层 $ P $ 中的某个“神经中枢” $ p $， 权值（以及偏置，不再具体推导）更新公式应该是&lt;/p&gt;
&lt;p&gt;$$ \begin {aligned} \frac {\partial E} {\partial \mathbf \Theta_p} &amp;amp; = rot180((\sum_{q'} \mathbf O_{q'}) *_v rot180(\mathbf \Delta_p)) \\ \frac {\partial E} {\partial b_p} &amp;amp; = \sum_{u, v} (\delta_p)_{uv} \end {aligned} $$&lt;/p&gt;
&lt;p&gt;其中，$ rot180 $ 是将一个矩阵旋转180度； $ O_{q'} $ 是连接到该“神经中枢”前的池化层的输出；对偏置的梯度即 $ \Delta_p $ 所有元素之和。&lt;/p&gt;
&lt;p&gt;下面讨论残差反传的问题。&lt;/p&gt;
&lt;p&gt;&lt;img alt="cnn_delta.png" src="/article_img/Convolutional_neural_network_2015_10_22_23_18/cnn_delta.png" /&gt;&lt;/p&gt;
&lt;p&gt;如图4，&lt;strong&gt;考虑淡蓝色像素点影响到的神经元&lt;/strong&gt;，在这个例子中，受影响的神经元有4个，他们分别以某个权值与淡蓝色像素运算后影响到对应位置的输出。再结合多层感知器的残差传播公式，不难发现这里又是一个卷积过程！同样需要注意的是，正如图4中的数字标号，这里的卷积是旋转过的；另外，这里用的卷积模式是full。&lt;/p&gt;
&lt;p&gt;如果前边的池化层 $ Q' $ 的某个特征图 $ q'$ 连接到这个卷积层 $ P $ 中的某“神经中枢”集合 $ C$ ，那么传播到$ q' $ 的残差为&lt;/p&gt;
&lt;p&gt;$$ \mathbf \Delta_{q'} = (\sum_{p \in C} \mathbf \Delta_p *_f rot180(\mathbf \Theta_p)) \circ \phi'(\mathbf O_{q'}) $$&lt;/p&gt;
&lt;h2&gt;最后一公里：Softmax&lt;/h2&gt;
&lt;p&gt;前边我有意忽略了对Softmax的讨论，在这里补上。因为Softmax的资料已经非常多了，所以这里不再详细讨论。具体可以参考&lt;a href="http://ufldl.stanford.edu/wiki/index.php/Softmax%E5%9B%9E%E5%BD%92"&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;需要补充说明的是，不难发现，Softmax的梯度公式与多层感知器的BP过程是兼容的；另外，实现Softmax的时候，如果需要分为 $ k $ 个类，同样也可以设置 $ k $ 个输出节点，这相当于隐含了一个类别名称为“其他”的类。&lt;/p&gt;
&lt;h2&gt;CNN的实现&lt;/h2&gt;
&lt;h3&gt;思路&lt;/h3&gt;
&lt;p&gt;以层为单位，分别实现卷积层、池化层、光栅化层、MLP隐层、Softmax层这五个层的类。其中每个类都有output和backpropagate这两个方法。&lt;/p&gt;
&lt;p&gt;另外，还需要一系列的辅助方法，包括：conv2d（二维离散卷积，valid和full模式），downsample（池化中需要的下采样，两种边界模式），upsample（池化中的上采样），以及dsigmoid和dtanh等。&lt;/p&gt;
&lt;h3&gt;其他&lt;/h3&gt;
&lt;p&gt;还需要考虑的是可扩展性和性能优化，这些以后再谈~&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">moonshile</dc:creator><pubDate>Thu, 22 Oct 2015 23:18:00 +0800</pubDate><guid>tag:,2015-10-22:2015/Convolutional_neural_network_2015_10_22_23_18.html</guid><category>CNN</category><category>ML</category></item><item><title>音频相关零碎</title><link>/2015/audio_2015_09_15_21_01.html</link><description>&lt;h2&gt;for OBS&lt;/h2&gt;
&lt;p&gt;因为咪啪这个项目需要，写了个音频类给开发同事。
什么解码解析播放都是附带的，目的是那个绘制频谱。&lt;/p&gt;
&lt;p&gt;大致逻辑是解码-&amp;gt;得到pcm-&amp;gt;采样-&amp;gt;归一化-&amp;gt;双声道混mono-&amp;gt;渲染电平&lt;/p&gt;
&lt;p&gt;最后为了能够进行预处理，不占用演奏初始化时间，加了个渲染出来的东西保存成文件。&lt;/p&gt;
&lt;p&gt;最开始采样是放在后面的，后来发现对内存要求太高，所以干脆把采样放到前面去了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;quot;Audio_tool_kk.h&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;//两个第三方库&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;quot;decodeaac/decthread.h&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#pragma comment (lib,&amp;quot;dsound.lib&amp;quot;)&lt;/span&gt;
&lt;span class="cp"&gt;#pragma comment(lib, &amp;quot;libmpg123.lib&amp;quot;)&lt;/span&gt;

&lt;span class="cp"&gt;#pragma once&lt;/span&gt;


&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;Audio_tool_kk&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;load_MP3_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;audioData&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;FILE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;rb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;BYTE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MPG123_OK&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                               
        &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;channels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;enc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bits_per_sample&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mpg123_init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;MPG123_OK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MP3 decoder init error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;mpg123_handle&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mpg123_new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;MPG123_OK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MP3 decoder Create error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="n"&gt;mpg123_exit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mpg123_open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;MPG123_OK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MP3 open failse&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="n"&gt;mpg123_delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;mpg123_exit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mpg123_getformat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;rate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;enc&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;MPG123_OK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="cm"&gt;/*  //maybe not support&lt;/span&gt;
&lt;span class="cm"&gt;            if (enc != MPG123_ENC_SIGNED_16 &amp;amp;&amp;amp; enc != MPG123_ENC_FLOAT_32)&lt;/span&gt;
&lt;span class="cm"&gt;            {&lt;/span&gt;
&lt;span class="cm"&gt;                Log(TEXT(&amp;quot;Bad encoding,no support: : 0x%x&amp;quot;), enc);&lt;/span&gt;
&lt;span class="cm"&gt;                mpg123_delete(m);&lt;/span&gt;
&lt;span class="cm"&gt;                mpg123_exit();&lt;/span&gt;
&lt;span class="cm"&gt;                fclose(fp);&lt;/span&gt;
&lt;span class="cm"&gt;                return FALSE;&lt;/span&gt;
&lt;span class="cm"&gt;            }&lt;/span&gt;
&lt;span class="cm"&gt;            */&lt;/span&gt;
            &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rate: %lu,channels: %d, enc: %d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;rate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;enc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;bits_per_sample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mpg123_encsize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;enc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bits_per_sample: : %d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;bits_per_sample&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MP3 getformat err: %d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;mpg123_delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;mpg123_exit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;


        &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mpg123_length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;bits_per_sample&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;channels&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;//通过采样总数*每采样比特数*声道/8获得字节数  &lt;/span&gt;
        &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BYTE&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mpg123_read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;MPG123_OK&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;MPG123_DONE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MP3 decoder err: %d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;mpg123_delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;mpg123_exit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;done: %d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


        &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample_rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bits_per_sample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bits_per_sample&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;avg_bytes_sec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rate&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;bits_per_sample&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;channels&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;block_align&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bits_per_sample&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// i guess... not sure, this mean the bytes of every sample&lt;/span&gt;
        &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;duration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data_size&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;avg_bytes_sec&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//总的播放时间&lt;/span&gt;
        &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;44&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;outfname&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="n"&gt;changSuffixName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outfname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MP3_SUFFIXNAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WAV_SUFFIXNAME&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;//char* mp3Str = strstri(fname, &amp;quot;.mp3&amp;quot;);&lt;/span&gt;
        &lt;span class="c1"&gt;//if (mp3Str)&lt;/span&gt;
        &lt;span class="c1"&gt;//{&lt;/span&gt;
        &lt;span class="c1"&gt;//  int len = strlen(fname) - strlen(mp3Str);&lt;/span&gt;
        &lt;span class="c1"&gt;//  memcpy(outfname, fname, len);&lt;/span&gt;
        &lt;span class="c1"&gt;//  memcpy(outfname + len, &amp;quot;.wav&amp;quot;, 4);&lt;/span&gt;
            &lt;span class="n"&gt;save_curAudio_2_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outfname&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//20150831-hll&lt;/span&gt;
        &lt;span class="c1"&gt;//}&lt;/span&gt;
        &lt;span class="n"&gt;mpg123_delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;mpg123_exit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Error: MP3 file load error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;write_wave_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;audioData&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Error: load file first&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kt"&gt;FILE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;wb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;WriteWaveHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample_rate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bits_per_sample&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;fwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Error: write file open error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;Audio_tool_kk&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;load_wave_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;audioData&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;FILE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;rb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;          &lt;span class="c1"&gt;// &amp;#39;RIFF&amp;#39;and&amp;#39;\0&amp;#39; for strcmp&lt;/span&gt;
        &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// file size&lt;/span&gt;

        &lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="n"&gt;format_tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;block_align&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bits_per_sample&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// 16bits&lt;/span&gt;

        &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;format_length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sample_rate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;avg_bytes_sec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data_size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 32bits&lt;/span&gt;

        &lt;span class="n"&gt;fread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// &amp;#39;RIFF&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;WAVE id: %c%c%c%c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;strcmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;RIFF&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;fread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// file size&lt;/span&gt;
            &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;size: %lu&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;fread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;         &lt;span class="c1"&gt;// &amp;#39;WAVE&amp;#39;&lt;/span&gt;
            &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;WAVE id: %c%c%c%c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;strcmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;WAVE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;fread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;     &lt;span class="c1"&gt;//  &amp;quot;fmt &amp;quot;;&lt;/span&gt;
                &lt;span class="c1"&gt;//Log(TEXT(&amp;quot;WAVE id: %c%c%c%c&amp;quot;), id[0], id[1], id[2], id[3]);&lt;/span&gt;

                &lt;span class="n"&gt;fread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;format_length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="c1"&gt;//Log(TEXT(&amp;quot;format_length: %lu&amp;quot;), format_length);&lt;/span&gt;

                &lt;span class="n"&gt;fread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;format_tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;short&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// tag&lt;/span&gt;
                &lt;span class="c1"&gt;//Log(TEXT(&amp;quot;format_tag: %d&amp;quot;), format_tag);&lt;/span&gt;

                &lt;span class="n"&gt;fread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;short&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;// channels&lt;/span&gt;
                &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;channels: %d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="n"&gt;fread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;sample_rate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;span class="c1"&gt;// sample_rate&lt;/span&gt;
                &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sample_rate: %lu&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;sample_rate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="n"&gt;fread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;avg_bytes_sec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// avg_bytes_sec&lt;/span&gt;
                &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;avg_bytes_sec: %lu&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;avg_bytes_sec&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="n"&gt;fread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block_align&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;short&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;     &lt;span class="c1"&gt;// block_align&lt;/span&gt;
                &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;block_align: %d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;block_align&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="n"&gt;fread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;bits_per_sample&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;short&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;       &lt;span class="c1"&gt;// bits_per_sample&lt;/span&gt;
                &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bits_per_sample: %d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;bits_per_sample&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="n"&gt;fread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;                      &lt;span class="c1"&gt;// &amp;#39;data&amp;#39;&lt;/span&gt;

                &lt;span class="n"&gt;fread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;data_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;     &lt;span class="c1"&gt;// data size&lt;/span&gt;
                &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;data_size: %lu&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;data_size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data_size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BYTE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BYTE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data_size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;fread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;data_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format_tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;format_tag&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;block_align&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;block_align&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bits_per_sample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bits_per_sample&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;format_length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample_rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sample_rate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;avg_bytes_sec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;avg_bytes_sec&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;duration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data_size&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;avg_bytes_sec&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//总的播放时间&lt;/span&gt;

                &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wav load sucess&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                &lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Error: RIFF file but not a wave file&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                &lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Error: not a RIFF file&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;write_16_bits_low_high&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;FILE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xff&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xff&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;fwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;write_32_bits_low_high&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;FILE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xff&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xff&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xff&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xff&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;fwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;WriteWaveHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;FILE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;pcmbytes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;freq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt;     &lt;span class="n"&gt;bytes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bits&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="cm"&gt;/* quick and dirty, but documented */&lt;/span&gt;
    &lt;span class="n"&gt;fwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;RIFF&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cm"&gt;/* label */&lt;/span&gt;
    &lt;span class="n"&gt;write_32_bits_low_high&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pcmbytes&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;44&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cm"&gt;/* length in bytes without header */&lt;/span&gt;
    &lt;span class="n"&gt;fwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;WAVEfmt &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cm"&gt;/* 2 labels */&lt;/span&gt;
    &lt;span class="n"&gt;write_32_bits_low_high&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cm"&gt;/* length of PCM format declaration area */&lt;/span&gt;
    &lt;span class="n"&gt;write_16_bits_low_high&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cm"&gt;/* is PCM? */&lt;/span&gt;
    &lt;span class="n"&gt;write_16_bits_low_high&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cm"&gt;/* number of channels */&lt;/span&gt;
    &lt;span class="n"&gt;write_32_bits_low_high&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;freq&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cm"&gt;/* sample frequency in [Hz] */&lt;/span&gt;
    &lt;span class="n"&gt;write_32_bits_low_high&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;freq&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;channels&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cm"&gt;/* bytes per second */&lt;/span&gt;
    &lt;span class="n"&gt;write_16_bits_low_high&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;channels&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cm"&gt;/* bytes per sample time */&lt;/span&gt;
    &lt;span class="n"&gt;write_16_bits_low_high&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cm"&gt;/* bits per sample */&lt;/span&gt;
    &lt;span class="n"&gt;fwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cm"&gt;/* label */&lt;/span&gt;
    &lt;span class="n"&gt;write_32_bits_low_high&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pcmbytes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cm"&gt;/* length in bytes of raw PCM data */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;hex_char_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;9&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nf"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;f&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nf"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;F&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;//assert(0);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;hex_to_decimal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;szHex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;hex_char_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;szHex&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;audioData_normalize_16&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BYTE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;dataSize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dataSize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="c1"&gt;//Log(TEXT(&amp;quot;    data_low: %lu,%x,%x&amp;quot;), low, low, data[i]);&lt;/span&gt;

        &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;high&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;high&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="c1"&gt;//Log(TEXT(&amp;quot;    data_high: %lu,%x,%x&amp;quot;), high, high, data[i + 1]);&lt;/span&gt;

        &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;data_true&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;high&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;//Log(TEXT(&amp;quot;    data_true: %f,%x&amp;quot;), data_true, data_true);&lt;/span&gt;

        &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;data_complement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;my_sign&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;//Log(TEXT(&amp;quot;    my_sign: %d&amp;quot;), my_sign);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_sign&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;data_complement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data_true&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;65536&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//补码&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;data_complement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data_true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;//double db = 20.0f * log10(sqrt(data_complement*data_complement));&lt;/span&gt;
        &lt;span class="c1"&gt;//Log(TEXT(&amp;quot;    data_complement: %f&amp;quot;), data_complement);&lt;/span&gt;
        &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;float_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;data_complement&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="mi"&gt;32768&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;//Log(TEXT(&amp;quot;float_data: %f&amp;quot;), float_data);&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;memcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dst&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;float_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

        &lt;span class="c1"&gt;//Log(TEXT(&amp;quot;data[%d]: %f, %f, %f&amp;quot;), i, float_data, dst[offset], db);&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;audioData_normalize_8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BYTE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;dataSize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dataSize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;data_complement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;        int my_sign = (int)(val / 128);&lt;/span&gt;
&lt;span class="cm"&gt;        if (my_sign == 1)&lt;/span&gt;
&lt;span class="cm"&gt;        {&lt;/span&gt;
&lt;span class="cm"&gt;            data_complement = val - 254; //补码&lt;/span&gt;
&lt;span class="cm"&gt;        }&lt;/span&gt;
&lt;span class="cm"&gt;        else&lt;/span&gt;
&lt;span class="cm"&gt;        {&lt;/span&gt;
&lt;span class="cm"&gt;            data_complement = val;&lt;/span&gt;
&lt;span class="cm"&gt;        }&lt;/span&gt;
&lt;span class="cm"&gt;        */&lt;/span&gt;

        &lt;span class="n"&gt;data_complement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;float_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;data_complement&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;//Log(TEXT(&amp;quot;data[%d]: val:%d, my_sign:%d, data_complement:%f, float_data:%f&amp;quot;), i, val, my_sign, data_complement, float_data);&lt;/span&gt;
        &lt;span class="n"&gt;memcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dst&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;float_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

        &lt;span class="c1"&gt;//Log(TEXT(&amp;quot;data[%d]: %f, %f, %f&amp;quot;), i, float_data, dst[offset], db);&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;mix2mono_float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;c1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;c2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//C = A + B - (A * B &amp;gt;&amp;gt; 0x10)&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;// = (c1 + c2) / 2;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;c2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;c2&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;c2&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="c1"&gt;//Log(TEXT(&amp;quot;        c1: %f, c2: %f, val: %f&amp;quot;), c1, c2, val);&lt;/span&gt;

    &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;0.51&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nf"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;mix2mono_normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;normalization_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;dataSize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dataSize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;c1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;normalization_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;c2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;normalization_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="c1"&gt;//Log(TEXT(&amp;quot;data[1]: %f , data[2]: %f, c1: %f, c2: %f&amp;quot;), normalization_data[i], normalization_data[i+1], c1, c2);&lt;/span&gt;
        &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mix2mono_float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;float_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;memcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dst&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;float_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;Audio_tool_kk&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;load_wave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;freeAudioData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Audio_tool_kk&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;load_wave_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;Audio_tool_kk&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;load_MP3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;freeAudioData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Audio_tool_kk&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;load_MP3_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;Audio_tool_kk&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;save_curAudio_2_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;outfname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;write_wave_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outfname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;ChangeFontSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HDC&lt;/span&gt; &lt;span class="n"&gt;hdc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;COLORREF&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;LOGFONT&lt;/span&gt; &lt;span class="n"&gt;lf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LOGFONT&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;lf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lfHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MulDiv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GetDeviceCaps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hdc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LOGPIXELSY&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;72&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//设置字体的大小&lt;/span&gt;
    &lt;span class="n"&gt;lf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lfWeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FW_NORMAL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;lf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lfCharSet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DEFAULT_CHARSET&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;lf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lfWeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FW_SEMIBOLD&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;HANDLE&lt;/span&gt; &lt;span class="n"&gt;hFont&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CreateFontIndirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;SelectObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hdc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hFont&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;SetBkMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hdc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TRANSPARENT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//绘画文字时以图片背景&lt;/span&gt;
    &lt;span class="n"&gt;SetTextColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hdc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//设置字体颜色 设置成黄色 &lt;/span&gt;
    &lt;span class="n"&gt;DeleteObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hFont&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;//CloseHandle(hFont);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//bool Audio_tool_kk::drawWaveform(HWND pWnd, HWND pWnd2, HBITMAP hBmp, HBITMAP btm)&lt;/span&gt;
&lt;span class="c1"&gt;//{&lt;/span&gt;
&lt;span class="c1"&gt;//  ::SendMessage(pWnd, BM_SETIMAGE, (WPARAM)IMAGE_BITMAP, LPARAM(hBmp));&lt;/span&gt;
&lt;span class="c1"&gt;//  ::SendMessage(pWnd2, BM_SETIMAGE, (WPARAM)IMAGE_BITMAP, (LPARAM)btm);&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="c1"&gt;//  return TRUE;&lt;/span&gt;
&lt;span class="c1"&gt;//}&lt;/span&gt;
&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;Audio_tool_kk&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;drawWaveform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HWND&lt;/span&gt; &lt;span class="n"&gt;pWnd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HWND&lt;/span&gt; &lt;span class="n"&gt;pWnd2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TCHAR&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pathName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;HBITMAP&lt;/span&gt; &lt;span class="n"&gt;hBmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HBITMAP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;LoadImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pathName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IMAGE_BITMAP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LR_CREATEDIBSECTION&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;LR_LOADFROMFILE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;//IDM_VFR&lt;/span&gt;
    &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pWnd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BM_SETIMAGE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WPARAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;IMAGE_BITMAP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LPARAM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hBmp&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;


    &lt;span class="n"&gt;HBITMAP&lt;/span&gt; &lt;span class="n"&gt;btm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LoadBitmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hinstMain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MAKEINTRESOURCE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IDB_BITMAP4&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pWnd2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BM_SETIMAGE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WPARAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;IMAGE_BITMAP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LPARAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;btm&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;BYTE&lt;/span&gt; &lt;span class="n"&gt;normalizationTemp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;4001&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;Audio_tool_kk&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;CreateWaveformBmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HWND&lt;/span&gt; &lt;span class="n"&gt;pWnd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pathName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;//20150723-hll&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;pWnd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cant be null&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;load audio file first,please&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channels&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channels&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;drawWaveform dont support more than 2 audio channels，audio channels: %s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;drawByts_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;normalization&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;HDC&lt;/span&gt; &lt;span class="n"&gt;hdc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;GetDC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pWnd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


    &lt;span class="n"&gt;drawByts_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data_size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;drawByts_size=%x&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;drawByts_size&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;drawSimple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;drawByts_size&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;resimpleCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;resimpleRate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;drawSimple&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;resimpleCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;normalizationTemp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mh"&gt;0x00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4001&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;resimpleCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="c1"&gt;//resmiple&lt;/span&gt;
        &lt;span class="c1"&gt;//Log(TEXT(&amp;quot;j=%d&amp;quot;), j);&lt;/span&gt;
        &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;drawSimple&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;resimpleRate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bits_per_sample&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;

                    &lt;span class="n"&gt;normalizationTemp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;drawSimple&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;resimpleRate&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

                    &lt;span class="c1"&gt;//if (sc==99)&lt;/span&gt;
                        &lt;span class="c1"&gt;//Log(TEXT(&amp;quot;sc=%d j=%d [sc][j]=%x     %x   %ld&amp;quot;), sc, j, normalizationTemp[sc][j - 1], audio.data[drawSimple*i + sc*resimpleRate], drawSimple*i + sc*resimpleRate);&lt;/span&gt;

                    &lt;span class="n"&gt;normalizationTemp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;drawSimple&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;resimpleRate&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;


                    &lt;span class="n"&gt;normalizationTemp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;drawSimple&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;resimpleRate&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;


                    &lt;span class="n"&gt;normalizationTemp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;drawSimple&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;resimpleRate&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;


                    &lt;span class="c1"&gt;//if (sc == 99)&lt;/span&gt;
                        &lt;span class="c1"&gt;//Log(TEXT(&amp;quot;sc=%d j=%d [sc][j]=%x     %x   %ld&amp;quot;), sc, j, normalizationTemp[sc][j - 1], audio.data[drawSimple*i + sc*resimpleRate], drawSimple*i + sc*resimpleRate);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;normalizationTemp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;drawSimple&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;resimpleRate&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                    &lt;span class="n"&gt;normalizationTemp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;drawSimple&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;resimpleRate&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                    &lt;span class="c1"&gt;//if (sc==99)&lt;/span&gt;
                    &lt;span class="c1"&gt;//Log(TEXT(&amp;quot;sc=%d j=%d [sc][j]=%x     %x   %ld&amp;quot;), sc, j, normalizationTemp[sc][j - 1], audio.data[drawSimple*i + sc*resimpleRate], drawSimple*i + sc*resimpleRate);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bits_per_sample&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;

                    &lt;span class="n"&gt;normalizationTemp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;drawSimple&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;resimpleRate&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;


                    &lt;span class="n"&gt;normalizationTemp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;drawSimple&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;resimpleRate&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;


                    &lt;span class="n"&gt;normalizationTemp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;drawSimple&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;resimpleRate&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;


                    &lt;span class="n"&gt;normalizationTemp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;drawSimple&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;resimpleRate&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

                    &lt;span class="c1"&gt;//if (sc == 99)&lt;/span&gt;
                        &lt;span class="c1"&gt;//Log(TEXT(&amp;quot;sc=%d j=%d [sc][j]=%x     %x   %ld&amp;quot;), sc, j, normalizationTemp[sc][j - 1], audio.data[drawSimple*i + sc*resimpleRate], drawSimple*i + sc*resimpleRate);&lt;/span&gt;


                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;normalizationTemp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;drawSimple&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;resimpleRate&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                    &lt;span class="n"&gt;normalizationTemp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;drawSimple&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;resimpleRate&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                    &lt;span class="c1"&gt;//if (sc==99)&lt;/span&gt;
                    &lt;span class="c1"&gt;//Log(TEXT(&amp;quot;sc=%d j=%d [sc][j]=%x     %x   %ld&amp;quot;), sc, j, normalizationTemp[sc][j - 1], audio.data[drawSimple*i + sc*resimpleRate], drawSimple*i + sc*resimpleRate);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;//Log(TEXT(&amp;quot;j=%d&amp;quot;), j);&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sizeCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;sizeCount&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bits_per_sample&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="n"&gt;BYTE&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;normalizationByte&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BYTE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BYTE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sizeCount&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="c1"&gt;//resmiple&lt;/span&gt;

            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;resimpleCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="c1"&gt;//if (i &amp;lt; width)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;normalizationByte&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;normalizationTemp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                    &lt;span class="n"&gt;normalizationByte&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;normalizationTemp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                    &lt;span class="n"&gt;normalizationByte&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;normalizationTemp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                    &lt;span class="n"&gt;normalizationByte&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;normalizationTemp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="c1"&gt;//else&lt;/span&gt;
                &lt;span class="c1"&gt;//{&lt;/span&gt;
                &lt;span class="c1"&gt;//  break;&lt;/span&gt;
                &lt;span class="c1"&gt;//}&lt;/span&gt;


            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;j=%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;j=%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sizeCount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;drawByts_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;sizeCount&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;normalization&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;drawByts_size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;normalization&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;drawByts_size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;audioData_normalize_16&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;normalizationByte&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;sizeCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;normalization&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bits_per_sample&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;


        &lt;span class="n"&gt;BYTE&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;normalizationByte&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BYTE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BYTE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sizeCount&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="c1"&gt;//resmiple&lt;/span&gt;

            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;resimpleCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;normalizationByte&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;normalizationTemp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="n"&gt;normalizationByte&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;normalizationTemp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;drawByts_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sizeCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;normalization&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;drawByts_size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;normalization&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;drawByts_size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;audioData_normalize_8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;normalizationByte&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;sizeCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;normalization&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ReleaseDC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pWnd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hdc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bits per sample must be 8 or 16&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channels&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;afterMin2Mono_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;drawByts_size&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;afterMin2Mono_normalization&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;afterMin2Mono_size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;mix2mono_normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;normalization&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;drawByts_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;afterMin2Mono_normalization&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;normalization&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;drawByts_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;afterMin2Mono_size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;normalization&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;afterMin2Mono_normalization&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;



    &lt;span class="n"&gt;HDC&lt;/span&gt; &lt;span class="n"&gt;memDC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CreateCompatibleDC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hdc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;HBITMAP&lt;/span&gt; &lt;span class="n"&gt;memBM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CreateCompatibleBitmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hdc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;HBITMAP&lt;/span&gt; &lt;span class="n"&gt;holdBM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HBITMAP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;SelectObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;memBM&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;RECT&lt;/span&gt; &lt;span class="n"&gt;rect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="n"&gt;HBRUSH&lt;/span&gt; &lt;span class="n"&gt;newbrush&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CreateSolidBrush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RGB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;HBRUSH&lt;/span&gt; &lt;span class="n"&gt;oldbrush&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HBRUSH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;SelectObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newbrush&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;FillRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newbrush&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;SelectObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oldbrush&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;DeleteObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newbrush&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;HPEN&lt;/span&gt; &lt;span class="n"&gt;tPen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CreatePen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PS_SOLID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RGB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;HPEN&lt;/span&gt; &lt;span class="n"&gt;oPen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HPEN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;SelectObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tPen&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;MoveToEx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;LineTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;ChangeFontSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RGB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;TCHAR&lt;/span&gt;  &lt;span class="n"&gt;tempTchr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;MoveToEx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;LineTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;timeTemp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;duration&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeTemp&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeTemp&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;wsprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tempTchr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;L&amp;quot;%d:%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeTemp&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeTemp&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;
                    &lt;span class="nf"&gt;wsprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tempTchr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;L&amp;quot;%d:0%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeTemp&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeTemp&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeTemp&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;wsprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tempTchr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;L&amp;quot;0%d:%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeTemp&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeTemp&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;
                    &lt;span class="nf"&gt;wsprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tempTchr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;L&amp;quot;0%d:0%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeTemp&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeTemp&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;ExtTextOut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ETO_OPAQUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tempTchr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//20080710&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;LineTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="n"&gt;tPen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CreatePen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PS_SOLID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RGB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;oPen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HPEN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;SelectObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tPen&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;center&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;drawOffset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;heightRate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0f&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;scCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channels&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;scCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;scCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;drawByts_size=%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;drawByts_size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;posy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;drawByts_size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="c1"&gt;//resmiple&lt;/span&gt;
            &lt;span class="n"&gt;MoveToEx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;  &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;scCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;//for (int i = 0; i &amp;lt; width - sc; i++)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;

                &lt;span class="c1"&gt;//Log(TEXT(&amp;quot;data[%d]: %f&amp;quot;), i, normalization[i]);&lt;/span&gt;
                &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;normalization&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

                &lt;span class="n"&gt;posy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;heightRate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;LineTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;  &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;scCount&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;drawOffset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;posy&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="c1"&gt;//Log(TEXT(&amp;quot;  [%d]:center = %d, normalization = %f, heightRate = %f,hi =%f, posy = %d &amp;quot;), i, center, val, heightRate, hi, posy);&lt;/span&gt;

            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;




    &lt;span class="n"&gt;SelectObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oPen&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;DeleteObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tPen&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;normalization&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;normalization&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


    &lt;span class="n"&gt;BITMAP&lt;/span&gt; &lt;span class="n"&gt;BmpInfo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;GetObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memBM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BITMAP&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;BmpInfo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//get info&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;datasize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BmpInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bmWidthBytes&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;BmpInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bmHeight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;bmp_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datasize&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bmp_data&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;SelectObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;holdBM&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;DeleteObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memBM&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;DeleteObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ReleaseDC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hdc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bmp_data malloc err&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;BITMAPINFO&lt;/span&gt; &lt;span class="n"&gt;binfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="n"&gt;BITMAPINFOHEADER&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;bh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;binfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bmiHeader&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;bh&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;biBitCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BmpInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bmBitsPixel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//Bits&lt;/span&gt;
    &lt;span class="n"&gt;bh&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;biClrImportant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;bh&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;biCompression&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;bh&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;biHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;bh&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;biPlanes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BmpInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bmPlanes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//1&lt;/span&gt;
    &lt;span class="n"&gt;bh&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;biSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BITMAPINFO&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;bh&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;biSizeImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datasize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;bh&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;biWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;bh&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;biXPelsPerMeter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;bh&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;biYPelsPerMeter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;GetDIBits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;memBM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BmpInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bmHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bmp_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;binfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DIB_RGB_COLORS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//get RGB&lt;/span&gt;


    &lt;span class="n"&gt;BITMAPFILEHEADER&lt;/span&gt; &lt;span class="n"&gt;bfh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="c1"&gt;//head &lt;/span&gt;
    &lt;span class="n"&gt;bfh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bfType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MAKEWORD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;M&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;bfh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bfOffBits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BITMAPFILEHEADER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BITMAPINFO&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//heat offset&lt;/span&gt;
    &lt;span class="n"&gt;bfh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bfSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bfh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bfOffBits&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;datasize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//full size&lt;/span&gt;
    &lt;span class="kt"&gt;FILE&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pathName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;wb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tmp bmp write err&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;fwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;bfh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BITMAPFILEHEADER&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;fwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;binfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BITMAPINFO&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;fwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bmp_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BmpInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bmWidthBytes&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;BmpInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bmHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bmp_data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;SelectObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;holdBM&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;DeleteObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memBM&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;DeleteObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CreateDIBitmap&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;DeleteObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;DeleteDC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ReleaseDC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pWnd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hdc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;



    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;Audio_tool_kk&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;drawWaveform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HWND&lt;/span&gt; &lt;span class="n"&gt;pWnd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HWND&lt;/span&gt; &lt;span class="n"&gt;pWnd2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;pWnd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cant be null&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;load audio file first,please&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channels&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channels&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;drawWaveform dont support more than 2 audio channels，audio channels: %s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;drawByts_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;normalization&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;HDC&lt;/span&gt; &lt;span class="n"&gt;hdc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;GetDC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pWnd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


    &lt;span class="n"&gt;drawByts_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data_size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;drawByts_size=%x&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;drawByts_size&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;drawSimple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;drawByts_size&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;resimpleCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;resimpleRate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;drawSimple&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;resimpleCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;normalizationTemp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mh"&gt;0x00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4001&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;resimpleCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="c1"&gt;//resmiple&lt;/span&gt;
        &lt;span class="c1"&gt;//Log(TEXT(&amp;quot;j=%d&amp;quot;), j);&lt;/span&gt;
        &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;drawSimple&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;resimpleRate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bits_per_sample&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;

                    &lt;span class="n"&gt;normalizationTemp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;drawSimple&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;resimpleRate&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

                    &lt;span class="c1"&gt;//if (sc == 99)&lt;/span&gt;
                        &lt;span class="c1"&gt;//Log(TEXT(&amp;quot;sc=%d j=%d [sc][j]=%x     %x   %ld&amp;quot;), sc, j, normalizationTemp[sc][j - 1], audio.data[drawSimple*i + sc*resimpleRate], drawSimple*i + sc*resimpleRate);&lt;/span&gt;

                    &lt;span class="n"&gt;normalizationTemp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;drawSimple&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;resimpleRate&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;


                    &lt;span class="n"&gt;normalizationTemp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;drawSimple&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;resimpleRate&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

                    &lt;span class="n"&gt;normalizationTemp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;drawSimple&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;resimpleRate&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

                    &lt;span class="c1"&gt;//if (sc == 99)&lt;/span&gt;
                        &lt;span class="c1"&gt;//Log(TEXT(&amp;quot;sc=%d j=%d [sc][j]=%x     %x   %ld&amp;quot;), sc, j, normalizationTemp[sc][j - 1], audio.data[drawSimple*i + sc*resimpleRate], drawSimple*i + sc*resimpleRate);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;normalizationTemp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;drawSimple&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;resimpleRate&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                    &lt;span class="n"&gt;normalizationTemp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;drawSimple&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;resimpleRate&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bits_per_sample&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;

                    &lt;span class="n"&gt;normalizationTemp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;drawSimple&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;resimpleRate&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

                    &lt;span class="n"&gt;normalizationTemp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;drawSimple&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;resimpleRate&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

                    &lt;span class="n"&gt;normalizationTemp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;drawSimple&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;resimpleRate&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

                    &lt;span class="n"&gt;normalizationTemp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;drawSimple&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;resimpleRate&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                    &lt;span class="c1"&gt;//if (sc == 99)&lt;/span&gt;
                        &lt;span class="c1"&gt;//Log(TEXT(&amp;quot;sc=%d j=%d [sc][j]=%x     %x   %ld&amp;quot;), sc, j, normalizationTemp[sc][j - 1], audio.data[drawSimple*i + sc*resimpleRate], drawSimple*i + sc*resimpleRate);&lt;/span&gt;


                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;normalizationTemp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;drawSimple&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;resimpleRate&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                    &lt;span class="n"&gt;normalizationTemp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;drawSimple&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;resimpleRate&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;//Log(TEXT(&amp;quot;j=%d&amp;quot;), j);&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sizeCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;sizeCount&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bits_per_sample&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="n"&gt;BYTE&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;normalizationByte&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BYTE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BYTE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sizeCount&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="c1"&gt;//resmiple&lt;/span&gt;

            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;resimpleCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="c1"&gt;//if (i &amp;lt; width)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;normalizationByte&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;normalizationTemp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                    &lt;span class="n"&gt;normalizationByte&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;normalizationTemp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                    &lt;span class="n"&gt;normalizationByte&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;normalizationTemp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                    &lt;span class="n"&gt;normalizationByte&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;normalizationTemp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="c1"&gt;//else&lt;/span&gt;
                &lt;span class="c1"&gt;//{&lt;/span&gt;
                &lt;span class="c1"&gt;//  break;&lt;/span&gt;
                &lt;span class="c1"&gt;//}&lt;/span&gt;


            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;j=%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;j=%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;sizeCount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;drawByts_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;sizeCount&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;normalization&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;drawByts_size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;normalization&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;drawByts_size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;audioData_normalize_16&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;normalizationByte&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;sizeCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;normalization&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bits_per_sample&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;


        &lt;span class="n"&gt;BYTE&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;normalizationByte&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BYTE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BYTE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sizeCount&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="c1"&gt;//resmiple&lt;/span&gt;

            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;resimpleCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;normalizationByte&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;normalizationTemp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="n"&gt;normalizationByte&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;normalizationTemp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;drawByts_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;sizeCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;normalization&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;drawByts_size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;normalization&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;drawByts_size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;audioData_normalize_8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;normalizationByte&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;sizeCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;normalization&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ReleaseDC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pWnd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hdc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bits per sample must be 8 or 16&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channels&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;afterMin2Mono_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;drawByts_size&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;afterMin2Mono_normalization&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;afterMin2Mono_size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;mix2mono_normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;normalization&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;drawByts_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;afterMin2Mono_normalization&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;normalization&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;drawByts_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;afterMin2Mono_size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;normalization&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;afterMin2Mono_normalization&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;



    &lt;span class="n"&gt;HDC&lt;/span&gt; &lt;span class="n"&gt;memDC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CreateCompatibleDC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hdc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;HBITMAP&lt;/span&gt; &lt;span class="n"&gt;memBM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CreateCompatibleBitmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hdc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;HBITMAP&lt;/span&gt; &lt;span class="n"&gt;holdBM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HBITMAP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;SelectObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;memBM&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;RECT&lt;/span&gt; &lt;span class="n"&gt;rect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="n"&gt;HBRUSH&lt;/span&gt; &lt;span class="n"&gt;newbrush&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CreateSolidBrush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RGB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;HBRUSH&lt;/span&gt; &lt;span class="n"&gt;oldbrush&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HBRUSH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;SelectObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newbrush&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;FillRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newbrush&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;SelectObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oldbrush&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;DeleteObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newbrush&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;HPEN&lt;/span&gt; &lt;span class="n"&gt;tPen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CreatePen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PS_SOLID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RGB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;HPEN&lt;/span&gt; &lt;span class="n"&gt;oPen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HPEN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;SelectObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tPen&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;MoveToEx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;LineTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;ChangeFontSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RGB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;TCHAR&lt;/span&gt;  &lt;span class="n"&gt;tempTchr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;MoveToEx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;LineTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;timeTemp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;duration&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeTemp&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeTemp&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;wsprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tempTchr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;L&amp;quot;%d:%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeTemp&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeTemp&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;
                    &lt;span class="nf"&gt;wsprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tempTchr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;L&amp;quot;%d:0%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeTemp&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeTemp&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeTemp&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;wsprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tempTchr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;L&amp;quot;0%d:%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeTemp&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeTemp&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;
                    &lt;span class="nf"&gt;wsprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tempTchr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;L&amp;quot;0%d:0%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeTemp&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeTemp&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;ExtTextOut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ETO_OPAQUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tempTchr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//20080710&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;LineTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="n"&gt;tPen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CreatePen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PS_SOLID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RGB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;oPen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HPEN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;SelectObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tPen&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;center&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;drawOffset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;heightRate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0f&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;scCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channels&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;scCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;scCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;drawByts_size=%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;drawByts_size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;posy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;drawByts_size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="c1"&gt;//resmiple&lt;/span&gt;
            &lt;span class="n"&gt;MoveToEx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;scCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;//for (int i = 0; i &amp;lt; width - sc; i++)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;

                &lt;span class="c1"&gt;//Log(TEXT(&amp;quot;data[%d]: %f&amp;quot;), i, normalization[i]);&lt;/span&gt;
                &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;normalization&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

                &lt;span class="n"&gt;posy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;heightRate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;LineTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;scCount&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;drawOffset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;posy&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="c1"&gt;//Log(TEXT(&amp;quot;  [%d]:center = %d, normalization = %f, heightRate = %f,hi =%f, posy = %d &amp;quot;), i, center, val, heightRate, hi, posy);&lt;/span&gt;

            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="n"&gt;SelectObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oPen&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;DeleteObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tPen&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;normalization&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;normalization&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


    &lt;span class="n"&gt;BITMAP&lt;/span&gt; &lt;span class="n"&gt;BmpInfo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;GetObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memBM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BITMAP&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;BmpInfo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//get info&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;datasize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BmpInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bmWidthBytes&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;BmpInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bmHeight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;bmp_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datasize&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bmp_data&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;SelectObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;holdBM&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;DeleteObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memBM&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;DeleteObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ReleaseDC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hdc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bmp_data malloc err&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;BITMAPINFO&lt;/span&gt; &lt;span class="n"&gt;binfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="n"&gt;BITMAPINFOHEADER&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;bh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;binfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bmiHeader&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;bh&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;biBitCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BmpInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bmBitsPixel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//Bits&lt;/span&gt;
    &lt;span class="n"&gt;bh&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;biClrImportant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;bh&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;biCompression&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;bh&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;biHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;bh&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;biPlanes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BmpInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bmPlanes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//1&lt;/span&gt;
    &lt;span class="n"&gt;bh&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;biSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BITMAPINFO&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;bh&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;biSizeImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datasize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;bh&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;biWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;bh&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;biXPelsPerMeter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;bh&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;biYPelsPerMeter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;GetDIBits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;memBM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BmpInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bmHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bmp_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;binfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DIB_RGB_COLORS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//get RGB&lt;/span&gt;


    &lt;span class="c1"&gt;//HBITMAP hBmp = (HBITMAP)LoadImage(NULL, TEXT(&amp;quot;.\\tmp.bmp&amp;quot;), IMAGE_BITMAP, 0, 0, LR_CREATEDIBSECTION | LR_LOADFROMFILE);&lt;/span&gt;

    &lt;span class="c1"&gt;//IDM_VFR&lt;/span&gt;
    &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pWnd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BM_SETIMAGE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WPARAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;IMAGE_BITMAP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LPARAM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CreateDIBitmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;binfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bmiHeader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CBM_INIT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;VOID&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;bmp_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;binfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DIB_RGB_COLORS&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;


    &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bmp_data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;SelectObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;holdBM&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;DeleteObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memBM&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;DeleteObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CreateDIBitmap&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;DeleteObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;DeleteDC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memDC&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ReleaseDC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pWnd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hdc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;HBITMAP&lt;/span&gt; &lt;span class="n"&gt;btm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LoadBitmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hinstMain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MAKEINTRESOURCE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IDB_BITMAP4&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pWnd2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BM_SETIMAGE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WPARAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;IMAGE_BITMAP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LPARAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;btm&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;



&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;Audio_tool_kk&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;D3D_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HWND&lt;/span&gt; &lt;span class="n"&gt;hwnd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//lpPtr1 = new LPVOID;&lt;/span&gt;
    &lt;span class="c1"&gt;//lpPtr2 = new LPVOID;&lt;/span&gt;
    &lt;span class="c1"&gt;//if (g_pD3DSound){ g_pD3DSound-&amp;gt;Release(); g_pD3DSound = NULL; }&lt;/span&gt;
    &lt;span class="n"&gt;DirectSoundCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;g_pD3DSound&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;             &lt;span class="c1"&gt;//创建播放设备  &lt;/span&gt;
    &lt;span class="n"&gt;g_pD3DSound&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;SetCooperativeLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hwnd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DSSCL_NORMAL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;span class="c1"&gt;//设定协同等级，就是缓存的写入级别  &lt;/span&gt;
    &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;dsbd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dsbd&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;dsbd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dwSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dsbd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;dsbd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dwFlags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DSBCAPS_GLOBALFOCUS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                      &lt;span class="c1"&gt;//这么设置保证在后台也能播放  &lt;/span&gt;
    &lt;span class="n"&gt;dsbd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dwBufferBytes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                                  &lt;span class="c1"&gt;//解码后的数据大小，以字节计算  &lt;/span&gt;
    &lt;span class="c1"&gt;//dsbd.lpwfxFormat = (WAVEFORMATEX*)malloc(sizeof(WAVEFORMATEX));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;Audio_tool_kk&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;D3D_cleanUp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;D3D_play_callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;D3D_cleanUp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;EnterCriticalSection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;D3D_cleanUp111&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g_pD3DSoundBuffer&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="n"&gt;g_pD3DSoundBuffer&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Release&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;g_pD3DSoundBuffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g_pD3DSound&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="n"&gt;g_pD3DSound&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Release&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;g_pD3DSound&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;LeaveCriticalSection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;Audio_tool_kk&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;D3D_open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;audioData&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//设置音频的格式  &lt;/span&gt;
    &lt;span class="n"&gt;waveform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wFormatTag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WAVE_FORMAT_PCM&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="c1"&gt;//PCM类型的声音  &lt;/span&gt;
    &lt;span class="n"&gt;waveform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nChannels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;waveform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nSamplesPerSec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample_rate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;waveform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nAvgBytesPerSec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;avg_bytes_sec&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;waveform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nBlockAlign&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;block_align&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                  
    &lt;span class="n"&gt;waveform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wBitsPerSample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bits_per_sample&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;waveform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cbSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                       &lt;span class="c1"&gt;//额外信息，一般是0  &lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;Audio_tool_kk&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;D3D_play&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;DWORD&lt;/span&gt; &lt;span class="n"&gt;length1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;length2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;g_pD3DSoundBuffer&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;SetCurrentPosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;//设定播放位置从0开始  &lt;/span&gt;
    &lt;span class="n"&gt;g_pD3DSoundBuffer&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Play&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;// DSBPLAY_LOOPING);   //播放，循环  &lt;/span&gt;
    &lt;span class="c1"&gt;//等待播放完成  &lt;/span&gt;
    &lt;span class="n"&gt;g_pD3DSoundBuffer&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;GetStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;                        &lt;span class="c1"&gt;//1代表只放一次，5代表循环播放  &lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;                                   &lt;span class="c1"&gt;//每隔200ms检测一次状态  &lt;/span&gt;
        &lt;span class="n"&gt;g_pD3DSoundBuffer&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;GetStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isStop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;g_pD3DSoundBuffer&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Stop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;//g_pD3DSoundBuffer-&amp;gt;GetStatus(&amp;amp;state);&lt;/span&gt;
            &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;break&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;//Log(TEXT(&amp;quot;playc: %lu   loadc:%lu ,state:%d&amp;quot;), playc, loadc, state);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;Audio_tool_kk&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="c1"&gt;//20150723-hll&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;isStop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;Audio_tool_kk&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;play&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HWND&lt;/span&gt; &lt;span class="n"&gt;hwnd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;audioData&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;isStop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//20150723-hll&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data_size&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample_rate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;DWORD&lt;/span&gt; &lt;span class="n"&gt;length1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;length2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;//D3D_cleanUp();&lt;/span&gt;
    &lt;span class="n"&gt;D3D_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hwnd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;D3D_open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;dsbd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lpwfxFormat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;waveform&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;//if (g_pD3DSoundBuffer){&lt;/span&gt;
    &lt;span class="c1"&gt;//  g_pD3DSoundBuffer-&amp;gt;Release(); g_pD3DSoundBuffer = NULL;&lt;/span&gt;
    &lt;span class="c1"&gt;//}&lt;/span&gt;
    &lt;span class="n"&gt;g_pD3DSound&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;CreateSoundBuffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;dsbd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;g_pD3DSoundBuffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;//打开缓存以便写入，返回两个缓存可写入地址和他们的长度，一般来说第二个地址是没有的  &lt;/span&gt;
    &lt;span class="n"&gt;g_pD3DSoundBuffer&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Lock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lpPtr1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;length1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lpPtr2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;length2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;memcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lpPtr1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data_size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;g_pD3DSoundBuffer&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Unlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lpPtr1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;length1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;g_pD3DSoundBuffer&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Unlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lpPtr2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;length2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;D3D_play&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;Audio_tool_kk&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;D3D_cleanUp&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;Audio_tool_kk&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;playCurAudio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HWND&lt;/span&gt; &lt;span class="n"&gt;hwnd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PLAY_CALLBACK&lt;/span&gt; &lt;span class="n"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;error: load audio first&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;Audio_tool_kk&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;D3D_play_callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Audio_tool_kk&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;play&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hwnd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Audio_tool_kk&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;decodeAacToWave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pathName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;decodeAacToFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pathName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Tue, 15 Sep 2015 21:01:00 +0800</pubDate><guid>tag:,2015-09-15:2015/audio_2015_09_15_21_01.html</guid><category>C++</category><category>audio</category></item><item><title>PyCon 上海</title><link>/2015/PyCon_2015_09_12_23_41.html</link><description>&lt;h2&gt;PyCon 可以改名成 AdCon 了&lt;/h2&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;嗯，在张江商业办公楼里，会场够大。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;起初的感觉是:不愧是收费的会议，还有一堆赞助商。
&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;结果，这么大个会场，这么烂的屏幕显示效果，而且还有屏幕两边大部分位置居然一直在播广告。fuck，这现场体验还没随便去个学校礼堂来得好。
&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;本来就指着这个是收费会议，而且今年还涨价了，能有点干货，结果听下来，全是广告宣讲，跟招聘会似的。没有好好做功课就跑过去我错了fuck。
&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;实在受不了午饭没吃就跑回来了，what a fucking day.&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;ps:听后来还在会场坚持的朋友说，下午那ES相关的内容，嗯，翻墙的电话会议，连接不稳定，又卡又断。
&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;这组织方，呵呵！！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Sat, 12 Sep 2015 23:41:00 +0800</pubDate><guid>tag:,2015-09-12:2015/PyCon_2015_09_12_23_41.html</guid><category>PyCon</category><category>fuck</category><category>Python</category></item><item><title>PEP 0498: Literal String Formatting</title><link>/2015/Literal_String_Formatting_2015_08_28_10_20.html</link><description>&lt;h2&gt;PEP 0498: Literal String Formatting&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Fred&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;anniversary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1991&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;My name is {name}, my age next year is {age+1}, my anniversary is {anniversary:%A, %B &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;, %Y}.&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;My name is Fred, my age next year is 51, my anniversary is Saturday, October 12, 1991.&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;He said his name is {name!r}.&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;He said his name is &amp;#39;Fred&amp;#39;.&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;终于要加了么，在其他语言上用的感觉不错，简介的。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;嗯.....就在写这篇博文的时候突然想起来，现在你看到这个网页的生成模版就类似这样的。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;但是3.x跟我无缘啊。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Fri, 28 Aug 2015 10:20:00 +0800</pubDate><guid>tag:,2015-08-28:2015/Literal_String_Formatting_2015_08_28_10_20.html</guid><category>PEP</category><category>Python</category></item><item><title>OBS架构解析</title><link>/2015/OBS_2015_07_20_16_22.html</link><description>&lt;h2&gt;OBS&lt;/h2&gt;
&lt;p&gt;因为咪啪产品的需要，目前看下来这个开源工具不错，准备在此基础上二次开发。为了加快研发上手速度，这两天把源码读了，流程画下来供后续修改快速找入口。&lt;/p&gt;
&lt;h2&gt;主要流程解析&lt;/h2&gt;
&lt;p&gt;准确来说仅仅是我关心的主流程！&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/OBS_2015_07_20_16_22/mixed.png" /&gt;&lt;/center&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Mon, 20 Jul 2015 16:22:00 +0800</pubDate><guid>tag:,2015-07-20:2015/OBS_2015_07_20_16_22.html</guid><category>OBS</category><category>采集</category><category>架构</category><category>流程</category><category>产品</category></item><item><title>在线合奏舞台--咪啪</title><link>/2015/stage_online_2015_07_13_14_53.html</link><description>&lt;h2&gt;咪啪&lt;/h2&gt;
&lt;p&gt;因为最后后面需要跟技术人员沟通了，把各个流程都梳理了一下，重新把一些关键的东西改了改，加了些必要的东西。（特么的又由产品经理兼回技术经理了，233333，我看这个项目最后也是要完）&lt;/p&gt;
&lt;h3&gt;姑且算是核心业务模型吧&lt;/h3&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/stage_online_2015_07_13_14_53/1.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;通信通道&lt;/h3&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/stage_online_2015_07_13_14_53/2.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;合成流程（理论上）&lt;/h3&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/stage_online_2015_07_13_14_53/3.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;采集端功能&lt;/h3&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/stage_online_2015_07_13_14_53/4.png" /&gt;&lt;/center&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Mon, 13 Jul 2015 14:53:00 +0800</pubDate><guid>tag:,2015-07-13:2015/stage_online_2015_07_13_14_53.html</guid><category>舞台</category><category>演奏</category><category>架构</category><category>产品</category></item><item><title>和弦</title><link>/2015/Chord_2015_06_11_19_46.html</link><description>&lt;h3&gt;C和弦&lt;/h3&gt;
&lt;p&gt;由1，3，5三音组成，根音为1，伴奏时，如遇乐谱小节内有1，3，5各音（无论其音高音低）均可用C和弦来伴奏，同时亦可用1，3，5各音为之配合音。&lt;/p&gt;
&lt;p&gt;所谓和弦，就是指三个以上不同的音的构成。&lt;/p&gt;
&lt;p&gt;和弦可由音阶上找出，就是顺着音阶可以排列出和弦，叫做顺阶和弦。&lt;/p&gt;
&lt;p&gt;C大调音阶如图1所示：C. D. E, F, G, A, B, C（简谱为 1, 2, 3 ,4, 5, 6, 7, 1）为根音，由根音3度、3度由下往上叠加起来，就构成了C大调的顺阶和弦，如图2所示。&lt;/p&gt;
&lt;p&gt;1,  2m,  3m,  4,  5,   6m,  7°,1是国内常见的录音室记谱法。&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/Chord_2015_06_11_19_46/1.jpg" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;图3是C大调的各级顺阶和弦及其转位&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/Chord_2015_06_11_19_46/2.jpg" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;1级和弦也称主和弦，4级和弦也称下属和弦，5级和弦也称属和弦。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;C、F、G、是大三和弦 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Am、Dm、Em是小三和弦 &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;如何选择和安排使用和弦&lt;/h3&gt;
&lt;p&gt;C和弦：由1，3，5三音组成，根音为1，伴奏时，如遇乐谱小节内有1，3，5各音（无论其音高音低）均可用C和弦来伴奏，同时亦可用1，3，5各音为之配合音。&lt;/p&gt;
&lt;p&gt;Dm和弦：由2，4，6三音组成，根音为2，伴奏时，如遇乐谱小节内有2，4，6各音（无论其音高音低）均可用Dm和弦来伴奏，同时亦可用2，4，6各音为之配合音。&lt;/p&gt;
&lt;p&gt;Em和弦：由3， 5，7三音组成，根音为3，伴奏时，如遇乐谱小节内有3， 5，7各音（无论其音高音低）均可用Em和弦来伴奏，同时亦可用3，5，7各音为之配合音。&lt;/p&gt;
&lt;p&gt;F和弦：由4，6，1三音组成，根音为4，伴奏时，如遇乐谱小节内有4，6，1各音（无论其音高音低）均可用F和弦来伴奏，同时亦可用4，6，1各音为之配合音。&lt;/p&gt;
&lt;p&gt;G和弦：由5，7，2三音组成，根音为5，伴奏时，如遇乐谱小节内有5，7，2特别是7，2各音（无论其音高音低）均可用G和弦来伴奏，同时亦可用5，7，2各音为之配合音。&lt;/p&gt;
&lt;p&gt;Am和弦：由6，1，3三音组成，根音为6，伴奏时，如遇乐谱小节内有6，1，3各音（无论其音高音低）均可用Am和弦来伴奏，同时亦可用6，1，3各音为之配合音。&lt;/p&gt;
&lt;p&gt;B°不常用。不作介绍。&lt;/p&gt;
&lt;p&gt;常用的还有：E和弦：由3, ＃5，7组成，G7和弦：由5，7 ，2 ，4 组成。&lt;/p&gt;
&lt;p&gt;上面介绍了C调的主要和弦。但是在C调所有和弦里，除了主要和弦之外，还有很多其它和弦。虽然所有的曲子都是以主要和弦为基础作成的，但为了使曲子的演奏更为美丽动听，更具演奏效果，主要和弦以外的和弦，许多场合是很需要使用的。&lt;/p&gt;
&lt;h3&gt;下面是一些副和弦&lt;/h3&gt;
&lt;p&gt;C7和弦： 由1、3、5、b7组成。当C和弦转入F和弦副歌时常使用C7和弦，即C—C7—F。&lt;/p&gt;
&lt;p&gt;D7和弦：由2、＃4、6、1组成。常用于G7和弦之前或用于A7和弦和F和弦之后，即C—F—D7—G7 , C—A7—D7—G7&lt;/p&gt;
&lt;p&gt;A7和弦：由6、＃1、3、5组成。常用于D7和弦或Dm和弦之前。即
C—A7—D7—G7—C , C—A7—Dm—F—C&lt;/p&gt;
&lt;p&gt;Cmaj7和弦：由1、3、5、7组成。常用于C和弦与F和弦之间，也可用于C和弦与C7和弦之间。&lt;/p&gt;
&lt;p&gt;Fm和弦：由4、b6、1组成。常用于F和弦转回C和弦时，即F—Fm—C。&lt;/p&gt;
&lt;p&gt;当我们拿到一首乐曲如何选择和安排它的伴奏和弦呢？根据实践认为：乐曲的开头最好安排主和弦，结尾处必须安排主和弦，曲子中间可根据乐曲的特点，具可分别安排主和弦，下属和弦，属和弦，同时，还可酌情安排选择运用其它副和弦。&lt;/p&gt;
&lt;p&gt;下面以C大调《我家在那里》片断为例举例说明：见图4 &lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/Chord_2015_06_11_19_46/3.jpg" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1小节一定用主和弦C。&lt;/li&gt;
&lt;li&gt;第2小节可用C，Am，Em，但以Em和弦最佳。&lt;/li&gt;
&lt;li&gt;第3小节可用Am或F。&lt;/li&gt;
&lt;li&gt;第4小节可用C或G7，但为使伴奏富于变化，用G7最佳。&lt;/li&gt;
&lt;li&gt;第5小节一定用C和弦。因符合C和弦组成音（1，3，5）中的（1，3，5）。&lt;/li&gt;
&lt;li&gt;第6小节可用Em或G7。&lt;/li&gt;
&lt;li&gt;第7小节可用C或G7，为求多变化，用C和弦较佳。&lt;/li&gt;
&lt;li&gt;第8小节在C转入F之间，可用C7或Cmaj7。&lt;/li&gt;
&lt;li&gt;第9小节可用F或Am，但用F较佳。&lt;/li&gt;
&lt;li&gt;第10小节可用G7或Dm，用Dm较佳。&lt;/li&gt;
&lt;li&gt;第11小节可用G7,通常G7前都用Dm或D7或B。&lt;/li&gt;
&lt;li&gt;第12小节用C，通常G7接下来是接主和弦。&lt;/li&gt;
&lt;li&gt;第13小节用Dm或D7,但用Dm较佳。&lt;/li&gt;
&lt;li&gt;第14小节可用Am或A7,但用Am较佳。&lt;/li&gt;
&lt;li&gt;第15小节可用Dm，D7或D均可。&lt;/li&gt;
&lt;li&gt;第16小节可用G7或G，因前一小节为Dm。&lt;/li&gt;
&lt;li&gt;再以C大调关系小调Am乐曲为例，见图5 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/Chord_2015_06_11_19_46/4.jpg" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1小节一定用Am开头&lt;/li&gt;
&lt;li&gt;第2小节用Am，符合Am组成音（6，1，3）中的6，3。&lt;/li&gt;
&lt;li&gt;第3小节用Dm，符合Dm组成音（2，4，6）中的2，6。&lt;/li&gt;
&lt;li&gt;第4小节用Am，符合Am组成音（6，1，3）中的6，1。&lt;/li&gt;
&lt;li&gt;第5小节可用E或G7，但用E效果较佳。&lt;/li&gt;
&lt;li&gt;第6、7、8小节可用C、Am，E，但用E效果较佳。&lt;/li&gt;
&lt;li&gt;第9、10、11、12、13、14等6小节与前面8小节一样的旋律，故和弦的应用还是相似的。&lt;/li&gt;
&lt;li&gt;第15小节第一拍是6音，符合Am（6，1，3）的根音，故用Am。&lt;/li&gt;
&lt;li&gt;第16小节可用F，C，Am，但用C效果更佳，且第一拍是1音，符合C和弦（1，3，5）根音。&lt;/li&gt;
&lt;li&gt;第17小节可用C，Am，但用Am效果富于变化。&lt;/li&gt;
&lt;li&gt;第18小节可用Dm，G7，但Dm较佳，且第一拍是2音，符合Dm（2，4，6）中的根音2。&lt;/li&gt;
&lt;li&gt;第19小节用C，Am，但Am效果富于变化。&lt;/li&gt;
&lt;li&gt;第20小节用Dm，符合Dm组成音（2，4，6）中的2，6。&lt;/li&gt;
&lt;li&gt;第21小节用G或Dm都可。&lt;/li&gt;
&lt;li&gt;第22、23小节用Am，E，用E效果较佳，且符合E和弦（3，＃5，7）中的根音3。&lt;/li&gt;
&lt;li&gt;第24小节用用Am，符合Am组成音（6，1，3）中的6，3。&lt;/li&gt;
&lt;li&gt;第25小节用Dm，符合Dm组成音（2，4，6）中的根音2。&lt;/li&gt;
&lt;li&gt;第26小节用Dm，符合Dm组成音（2，4，6）中的2，6。&lt;/li&gt;
&lt;li&gt;第27小节用用Am，符合Am组成音（6，1，3）中的6，1。&lt;/li&gt;
&lt;li&gt;第28小节可用E或G7，但用E效果较佳。&lt;/li&gt;
&lt;li&gt;第29小节用E，符合E和弦（3，＃5，7）中的根音3，7。&lt;/li&gt;
&lt;li&gt;第30小节结尾一定是回到主和弦Am。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;经常出现的和弦进行方式&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;C—Am—Dm—G7—C&lt;/li&gt;
&lt;li&gt;C—Em—Am—G7—C&lt;/li&gt;
&lt;li&gt;C—A7—Dm—F—D7—G7—C&lt;/li&gt;
&lt;li&gt;C—Am—F—G7—C &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;图6是C大调和弦表
&lt;center&gt;&lt;img alt="" src="/article_img/Chord_2015_06_11_19_46/5.jpg" /&gt;&lt;/center&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Thu, 11 Jun 2015 19:46:00 +0800</pubDate><guid>tag:,2015-06-11:2015/Chord_2015_06_11_19_46.html</guid><category>Chord</category></item><item><title>汉字转换问题</title><link>/2015/Encoding_conversion_2015_06_02_19_41.html</link><description>&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;先判断类型&lt;br&gt;
&amp;#160; &amp;#160; &amp;#160; &amp;#160;如果是string，就按latin-1转为bytes，decode utf-8&lt;br&gt;
&amp;#160; &amp;#160; &amp;#160; &amp;#160;如果本身就是bytes，直接decode就行了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt;s=&amp;#39;\xe7\xa9\xbf\xe5\xb1\xb1\xe7\x94\xb2\xe5\x88\xb0\xe5\xba\x95\xe8\xaf\xb4\xe4\xba\x86\xe4\xbb\x80\xe4\xb9\x88\xef\xbc\x9f&amp;#39;
&amp;gt;&amp;gt;&amp;gt; s.encode(&amp;#39;latin-1&amp;#39;).decode(&amp;#39;utf-8&amp;#39;)
&amp;#39;穿山甲到底说了什么？&amp;#39;
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt;s=b&amp;#39;\xe7\xa9\xbf\xe5\xb1\xb1\xe7\x94\xb2\xe5\x88\xb0\xe5\xba\x95\xe8\xaf\xb4\xe4\xba\x86\xe4\xbb\x80\xe4\xb9\x88\xef\xbc\x9f&amp;#39;
&amp;gt;&amp;gt;&amp;gt; s.decode(&amp;#39;utf-8&amp;#39;)
&amp;#39;穿山甲到底说了什么？&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第一个s是string，第二个s是bytes&lt;/p&gt;
&lt;p&gt;错误的例子：    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt;s=&amp;#39;\xe7\xa9\xbf\xe5\xb1\xb1\xe7\x94\xb2\xe5\x88\xb0\xe5\xba\x95\xe8\xaf\xb4\xe4\xba\x86\xe4\xbb\x80\xe4\xb9\x88\xef\xbc\x9f&amp;#39;
&amp;gt;&amp;gt;&amp;gt;s.encode(&amp;#39;utf-8&amp;#39;).decode(&amp;#39;utf-8&amp;#39;)
&amp;#39;ç©¿å±±ç\x94²å\x88°åº\x95è¯´äº\x86ä»\x80ä¹\x88ï¼\x9f&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用 utf-8 或者 ascii 来 encode 都是不对的&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Tue, 02 Jun 2015 19:41:00 +0800</pubDate><guid>tag:,2015-06-02:2015/Encoding_conversion_2015_06_02_19_41.html</guid><category>encode</category><category>unicode</category><category>GBK</category><category>Python</category></item><item><title>RTMP</title><link>/2015/RTMP_2015_05_09_20_07.html</link><description>&lt;h3&gt;开篇废话&lt;/h3&gt;
&lt;p&gt;因为开始弄的在线舞台直播需要对协议改造改造，所以今天去找了点资料，在这里记录一下简单的，官方文档实在太长懒得看了。&lt;/p&gt;
&lt;h3&gt;RTMP 头&lt;/h3&gt;
&lt;p&gt;完整的RTMP包头有12字节，由下面5个部分组成:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  用途       大小(Byte)          含义
Head_Type     1              包头
TIMER         3             时间戳
AMFSize       3            数据大小
AMFType       1            数据类型
StreamID      4              流ID
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中AMFType可以指定传输的类型，比如是单纯的视频流，单纯的音频流，或者音视频流。在这里是音视频流，其数值为0X16。&lt;/p&gt;
&lt;p&gt;AMF数据, AMF有AMF0和AMF3 两种版本，只是细微的数据类型定义有点差异。以音视频流为例，那么在这里AMF数据肯定包括视频流数据，音频流数据2部分。&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/RTMP_2015_05_09_20_07/1.jpg" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;其实AMF数据就是多个videoTag和audioTag组合起来的。videoTag和audioTag结构见上图，codecFlag其实就是标志位，标志这是一个新的videoTag或audioTag。&lt;/p&gt;
&lt;p&gt;AVCPacketType:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/RTMP_2015_05_09_20_07/2.jpg" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;AACPacketType:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/RTMP_2015_05_09_20_07/3.jpg" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;这里的timestamp应该是相对时间戳，为了保证音视频的同步。&lt;/p&gt;
&lt;p&gt;最后才是真正的数据。&lt;/p&gt;
&lt;h3&gt;RTMP 握手&lt;/h3&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/RTMP_2015_05_09_20_07/4.jpg" /&gt;&lt;/center&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Sat, 09 May 2015 20:07:00 +0800</pubDate><guid>tag:,2015-05-09:2015/RTMP_2015_05_09_20_07.html</guid><category>RTMP</category><category>protocol</category></item><item><title>在线合奏舞台</title><link>/2015/stage_online_2015_05_03_11_35.html</link><description>&lt;h2&gt;咪啪在线舞台&lt;/h2&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/stage_online_2015_05_03_11_35/1.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2&gt;架构（初构想）&lt;/h2&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/stage_online_2015_05_03_11_35/2.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;表演侧1：采集端利用OBS进行二次开发，加入登录、同步演出单、合成同步时间戳、演出节奏控制、画面控制等功能。&lt;/li&gt;
&lt;li&gt;合成端：利用合成编码服务器接受表演实时流，利用码流中额外附加的同步时间戳去除网络延迟影响，将每一路视频与伴奏（或节拍）对齐，然后合成为一路视频，发送给分发服务器。&lt;/li&gt;
&lt;li&gt;业务平台：调度、资源分配、还有各种业务。不多废话了。&lt;/li&gt;
&lt;li&gt;分发服务器：主要是租CDN，大幅降低宽带成本和尽可能降低观众端延迟。&lt;/li&gt;
&lt;li&gt;表演侧2：资源管理，用户自行上传后期制作的视频。&lt;/li&gt;
&lt;li&gt;文件服务器：管理用户上传视频、live表演录像视频点播功能。&lt;/li&gt;
&lt;li&gt;观众侧：web、mobile、弹幕播放器等，这个也没什么好说的。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;技术相关&lt;/h2&gt;
&lt;h3&gt;rtmp&lt;/h3&gt;
&lt;p&gt;虽然手上资源成熟的是rtsp、rtp，但介于现在大家都用rtmp了，再一个是CDN厂家那边对rtmp支持比较现成，于是乎，我们也跟上潮流好了。但是要对某部分的rtmp协议进行改造来支持我们某些特殊想法和控制，不过这也不是什么难事，而且是在体系内部使用，并不影响对外接口。&lt;/p&gt;
&lt;h3&gt;流媒体服务&lt;/h3&gt;
&lt;p&gt;流媒体服务：red5，wowiz，FMS，现成的，到时候选一个好了。&lt;/p&gt;
&lt;h3&gt;弹幕播放器&lt;/h3&gt;
&lt;p&gt;这个现在貌似也比较现成。&lt;/p&gt;
&lt;h3&gt;编解码&lt;/h3&gt;
&lt;p&gt;搞很多年了，没啥新意。&lt;/p&gt;
&lt;h3&gt;合成&lt;/h3&gt;
&lt;p&gt;合成这块是技术难度大头，画面合成这是小事，重点是声音这块。&lt;/p&gt;
&lt;p&gt;一来是采集那端，毕竟一部分用户经济能力有限，mic的质量不敢恭维，这么一来就需要修音和降噪。&lt;/p&gt;
&lt;p&gt;二来是合成端，多路混音的音质下降与路数有关。写了个简单的混音算法来试试，两路的混音用中端听音设备上已经能听出明显的劣化。我最终的目标是5路，那就更不用说音质变成什么鬼样了。预计后续真正动手的时候需要先傅立叶拆开再主成份建模来让消弱部分属于人耳不关注的部分才行。&lt;/p&gt;
&lt;p&gt;三、重编码计算压力，应对大延迟的缓存压力，live采集时的带宽压力........&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Sun, 03 May 2015 11:35:00 +0800</pubDate><guid>tag:,2015-05-03:2015/stage_online_2015_05_03_11_35.html</guid><category>舞台</category><category>演奏</category><category>架构</category><category>产品</category><category>脑洞</category></item><item><title>在线合奏舞台</title><link>/2015/stage_online_2015_05_02_15_09.html</link><description>&lt;h2&gt;咪啪（暂）&lt;/h2&gt;
&lt;p&gt;想了好多个名字，起初的不说了，后来从舞台相关延伸到音符，哆来咪之类的。光有音符不行，毕竟现在玩ACG向音乐的乐队跟玩摇滚的重叠度更高一些，于是把节奏也加进去....例如啪嗒砰，接着呢....萌元素不能少，喵斯啪就入选了。顺着，当年萌王出现在脑海中！！！&lt;/p&gt;
&lt;p&gt;“咪啪”，就是你了。&lt;/p&gt;
&lt;p&gt;这个口僻词太赞，有音符（准确来说是音级），有鼓节奏中的一个音，还满满的燃え力...哦不萌力....连背后的情怀都爆表！！！（不过现在年纪比较小的朋友不太知道是啥了吧？）&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/stage_online_2015_05_02_15_09/1.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2&gt;生态&lt;/h2&gt;
&lt;p&gt;直接看图吧，之前也大概提了提，不细说了。
&lt;center&gt;&lt;img alt="" src="/article_img/stage_online_2015_05_02_15_09/2.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2&gt;功能&lt;/h2&gt;
&lt;p&gt;简单说来就是大家在这个平台上结成团队，然后有谁想演什么曲目，团队发个召集，有闲的有兴趣的成员来响应召唤，加入。临时乐队组成成功，平台分配舞台空间，大家就能上舞台（直播）玩了。&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/stage_online_2015_05_02_15_09/4.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/stage_online_2015_05_02_15_09/5.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/stage_online_2015_05_02_15_09/6.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/stage_online_2015_05_02_15_09/7.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2&gt;end&lt;/h2&gt;
&lt;p&gt;架构什么的下篇放。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Sat, 02 May 2015 15:09:00 +0800</pubDate><guid>tag:,2015-05-02:2015/stage_online_2015_05_02_15_09.html</guid><category>舞台</category><category>演奏</category><category>产品</category><category>脑洞</category></item><item><title>webRtc 录音</title><link>/2015/webRtc_2015_04_30_20_42.html</link><description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Updates&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;WontFix&lt;/span&gt;
        &lt;span class="n"&gt;Owner&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

&lt;span class="n"&gt;Comment&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;issue&lt;/span&gt; &lt;span class="mi"&gt;1567&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;How&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="n"&gt;mixed&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;speaker&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;mic&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;signal&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;


&lt;span class="n"&gt;True&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;We&lt;/span&gt; &lt;span class="n"&gt;abandoned&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;functionality&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;WebRTC&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Also&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;our&lt;/span&gt; &lt;span class="n"&gt;focusing&lt;/span&gt; &lt;span class="n"&gt;any&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Sorry&lt;/span&gt; &lt;span class="n"&gt;about&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;翻google的webRtc源码，里面种种迹象表明里面有录音功能，但怎么找到没找到对应方法，然后在网上翻到了开发组给某人的回复。。。啊艹！&lt;/p&gt;
&lt;p&gt;现在没有就算了，以后居然也不会支持！。。&lt;/p&gt;
&lt;p&gt;不过采集和混音部分本身也是开源的，也不难办。&lt;/p&gt;
&lt;p&gt;刚才看到别人有实现，搬过来记录一份。&lt;/p&gt;
&lt;h2&gt;码&lt;/h2&gt;
&lt;p&gt;1、首先在VoEFile中增加一对public方法，用来开始及结束录音&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    //for Record speaker+mic
    // Starts recording the mixed playout audio and mic.
    virtual int StartRecordingPlayoutAndMic(const char* fileNameUTF8,
                                      CodecInst* compression = NULL,
                                      int maxSizeBytes = -1) = 0;
    // Stops recording the mixed playout audio and mic.
    virtual int StopRecordingPlayoutAndMic() = 0;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2、在SharedData类中增加一个成员变量&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    OutputMixer* _outputAllMixerPtr;    //for Record speaker+mic
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3、在SharedData的构造函数及析构函数中完成该变量创建及释放&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;SharedData&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;:SharedData&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Record&lt;/span&gt; &lt;span class="n"&gt;speaker&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;mic&lt;/span&gt;
    &lt;span class="n"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OutputMixer&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_outputAllMixerPtr&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_gInstanceCounter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_outputAllMixerPtr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;SetEngineInformation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_engineStatistics&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;SharedData&lt;/span&gt;&lt;span class="o"&gt;::~&lt;/span&gt;&lt;span class="nt"&gt;SharedData&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;OutputMixer&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Destroy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_outputAllMixerPtr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Record&lt;/span&gt; &lt;span class="n"&gt;speaker&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;mic&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4、在实现类VoEFileImpl中实现StartRecordingPlayoutAndMic 及StopRecordingPlayoutAndMic&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;for&lt;/span&gt; &lt;span class="nt"&gt;Record&lt;/span&gt; &lt;span class="nt"&gt;speaker&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;mic&lt;/span&gt;
&lt;span class="nt"&gt;int&lt;/span&gt; &lt;span class="nt"&gt;VoEFileImpl&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;:StartRecordingPlayoutAndMic&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nt"&gt;const&lt;/span&gt; &lt;span class="nt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nt"&gt;fileNameUTF8&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;CodecInst&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nt"&gt;compression&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;int&lt;/span&gt; &lt;span class="nt"&gt;maxSizeBytes&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;WEBRTC_TRACE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kTraceApiCall&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kTraceVoice&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;VoEId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_instanceId&lt;/span&gt;&lt;span class="o"&gt;,-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                 &lt;span class="s2"&gt;&amp;quot;StartRecordingPlayoutAndMic(fileNameUTF8=%s, &amp;quot;&lt;/span&gt;
                 &lt;span class="s2"&gt;&amp;quot;compression, maxSizeBytes=%d)&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;fileNameUTF8&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maxSizeBytes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1024&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;FileWrapper&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;kMaxFileNameSize&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;_engineStatistics&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Initialized&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_engineStatistics&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetLastError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;VE_NOT_INITED&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kTraceError&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;_outputAllMixerPtr-&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;StartRecordingPlayout&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;fileNameUTF8&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;compression&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="nt"&gt;return&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;int&lt;/span&gt; &lt;span class="nt"&gt;VoEFileImpl&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;:StopRecordingPlayoutAndMic&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;WEBRTC_TRACE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kTraceApiCall&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kTraceVoice&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;VoEId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_instanceId&lt;/span&gt;&lt;span class="o"&gt;,-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                 &lt;span class="s2"&gt;&amp;quot;StopRecordingPlayoutAndMic&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;_engineStatistics&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Initialized&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_engineStatistics&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetLastError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;VE_NOT_INITED&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kTraceError&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;return&lt;/span&gt; &lt;span class="nt"&gt;_outputAllMixerPtr-&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;StopRecordingPlayout&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;5、在VoEBaseImpl中增加两个私有成员&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;//for Record speaker+mic
private:
    AudioFrameMixerPart _afmTransmitMixer;
    AudioFrameMixerPart _afmOutputMixer;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;6、增加一个MixerParticipant的实现，用于拦截原有两个混淆器的输出，并合并至我们最终的录音混淆器中&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;//for Record speaker+mic
//record mic or playout signal from OutputMixer output
class AudioFrameMixerPart:public MixerParticipant
{
public:
    AudioFrameMixerPart(){};
    void SetAudioFrame(AudioFrame &amp;amp;audioFrame)
    {
        _audioFrame = audioFrame;
    }
    WebRtc_UWord16 GetPayloadDataLengthInSamples()
    {
        return _audioFrame._payloadDataLengthInSamples;
    }

public:
    // From MixerParticipant
    WebRtc_Word32 GetAudioFrame(const WebRtc_Word32 id,
                                AudioFrame&amp;amp; audioFrame)
    {
        if (_audioFrame._payloadDataLengthInSamples &amp;lt;= 0) return -1;

        audioFrame = _audioFrame;
        return 0;
    };
    WebRtc_Word32 NeededFrequency(const WebRtc_Word32 id)
    {
        return _audioFrame._frequencyInHz;
    };

private:
    AudioFrame _audioFrame;
};
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;7、在VoEBaseImpl::Init中对_outputAllMixerPtr进行初始化&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;//for Record speaker+mic
_outputAllMixerPtr-&amp;gt;SetAudioProcessingModule(_audioProcessingModulePtr);
_outputAllMixerPtr-&amp;gt;SetMixabilityStatus(_afmTransmitMixer, true);
_outputAllMixerPtr-&amp;gt;SetMixabilityStatus(_afmOutputMixer, true);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;8、修改VoEBaseImpl::RecordedDataIsAvailable，增加麦克风语音数据的拦截功能&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;//for Record speaker+mic
_afmTransmitMixer.SetAudioFrame(*(_transmitMixerPtr-&amp;gt;GetAudioFrame()));
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;9、修改VoEBaseImpl::NeedMorePlayData，增加播放语音数据的拦截功能&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;//for Record speaker+mic
_afmOutputMixer.SetAudioFrame(*_outputMixerPtr-&amp;gt;GetAudioFrame());

...

//for Record speaker+mic    
if (_afmOutputMixer.GetPayloadDataLengthInSamples() == _afmTransmitMixer.GetPayloadDataLengthInSamples())
{
AudioFrame audioFrameX;
_outputAllMixerPtr-&amp;gt;MixActiveChannels();
_outputAllMixerPtr-&amp;gt;DoOperationsOnCombinedSignal();
_outputAllMixerPtr-&amp;gt;GetMixedAudio(samplesPerSec, nChannels, audioFrameX);
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;10、因为拦截混淆语音帻时，使用了两个混淆器的内部数据，所以对TransmitMixer及OutputMixer作出修改，增加一个public方法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;public:  //for Record speaker+mic
    AudioFrame* GetAudioFrame(){return &amp;amp;_audioFrame;}
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Thu, 30 Apr 2015 20:42:00 +0800</pubDate><guid>tag:,2015-04-30:2015/webRtc_2015_04_30_20_42.html</guid><category>webRtc</category><category>C++</category><category>audio</category></item><item><title>一个产品--在线合奏舞台</title><link>/2015/brain_hold_2015_04_28_21_11.html</link><description>&lt;h1&gt;真实舞台online&lt;/h1&gt;
&lt;h2&gt;起源&lt;/h2&gt;
&lt;p&gt;这个想法的源头是：最近整理下手上现有的技术点，除掉应用开发层面上的动洗，基本上能算成熟且现成的，就只有视频流相关的了，虽然音频还不怎么样......&lt;/p&gt;
&lt;p&gt;从音视频下手，弄个新产品，开辟新市场方向什么的，反正我不是一个称职的技术总监拉，技术研发的东西永远只能在晚上10点以后才空下手能做！......&lt;/p&gt;
&lt;h2&gt;灵光&lt;/h2&gt;
&lt;p&gt;新产品清单....随便就写出一大溜，但是并没什么卵用。亮点很多，但没有爆点，不开辟新市场，捡别人吃剩的渣完全不符我的风格。&lt;/p&gt;
&lt;p&gt;在漫漫网络信息流里瞎游荡，找灵感，踩狗屎。&lt;/p&gt;
&lt;p&gt;某天，没狗屎，烦躁，打开bilibili，发现没啥可看的，烦躁，于是去音区听歌，没想听的，烦躁，鬼使神差来到演奏区，鬼使神差点了个平时不会去点的合奏后期合成视频，嗯！就是这个！！！！&lt;/p&gt;
&lt;h2&gt;回忆&lt;/h2&gt;
&lt;p&gt;伴随着k-on米饭就是菜的cover，引出过去对音乐的记忆。&lt;/p&gt;
&lt;p&gt;在很小的时候，对电视啊，录音机啊传来的音乐基本没有兴趣，直到大约5~6年级从老爸那翻出一条爱华耳机和一台walkman。&lt;/p&gt;
&lt;p&gt;按下播放键，伴奏渐起，仿佛进入另一个空间，一件件乐器慢慢出现在面前，接着散开呈半月形，背景也渐渐变得明亮，各种场景出现、变化、消失循环着。（ps：题外话，幸亏老爸对音频电路方面有专长，所以买的也是专业高解析的耳机，如果是现在2b那类街边地摊级的，估计就没后面的事了）&lt;/p&gt;
&lt;p&gt;“啊，原来音乐是这样的啊”&lt;/p&gt;
&lt;p&gt;在这之后就开始有买磁带、听音乐会的行为了。&lt;/p&gt;
&lt;p&gt;初中，某女同学借了一盘林志颖的专辑，有十七岁那年的雨季的那张。这是我第一次听国内流行（之前注意力都在小编古典和funk上）。整盘挺下来的觉得心里有种说未知甜味，看看一些歌词内容，难道这是传说中恋爱的感觉？然后......然后就跑去跟借我磁带的妹子谈了场恋爱........&lt;/p&gt;
&lt;p&gt;高中，装备升级为CD，兴趣也扩展到了jpop，但耳机没有更新，爱华停产，买不到了，去商店里试听都觉得没有能超越老爸这条的，当然当时二线城市也没有会买中端以上耳机的店，于是一条破破旧旧的耳机就一直陪伴着我每个夜晚。自己也开始有了想学乐器的想法，学了一点入门，这个想法的实现开始歪到另一条路上： O2jam，DJMax，吉他超人.........原因....既没成就感，又孤独，身边一个能交流的都没有......&lt;/p&gt;
&lt;p&gt;大学，跟朋友做了个adv类型的游戏引擎，做着玩的，结果被人看上，决定收购。给对方演示时，他们居然看上了demo里面我们瞎写的故事脚本，愿意另外付钱希望我们把故事写完整，配主题bgm。&lt;/p&gt;
&lt;p&gt;脚本即使有十几个分支剧情，倒也很快补完了。可是bgm，求助一些朋友，爱好者社区，他们做出来的小样都无法满足我们对剧情的理解，找专业的？又没钱。最后决定自己弄。恰逢假期，从图书馆借了基本乐理，从朋友那借了台键盘，在家里，硬啃，耗时一个半月，还真的做出来了心里所想出主旋律和主要和铉。假期后回到学校再找人补全了伴奏，顺便根据剧情场景，弄了7个不同的变奏。最终，嗯，卖了个好价钱。&lt;/p&gt;
&lt;p&gt;可惜，对于乐器，完成bgm后又没有继续下去了。&lt;/p&gt;
&lt;p&gt;再往后没啥可说的，开始烧器材，然后又退烧。&lt;/p&gt;
&lt;h2&gt;根基&lt;/h2&gt;
&lt;p&gt;到现在，偶尔还是会有去玩玩音乐的想法，当然也就只是想想，又没人陪我玩，估计和之前一样会半途而废。跟我一样的人应该有很多。&lt;/p&gt;
&lt;p&gt;还有类似的，很多人都主动的或被迫学音乐（bbc的调查资料：至少1亿人学过乐器，2014年光上海钢琴考级就有一万七千人），但是大部分最后迫于生活，最后也都放弃了。&lt;/p&gt;
&lt;p&gt;对于社会来说，这是极大的“浪费”，我们一味着喷文化水平文化素养不行，另一方面大量的“资源”又被抛弃。顺着这个思路去找资料，发现国家在音乐文化方面开始发力，各种政策扶持，但能有多少效果或者说还需要多少年才有成效，还不好说。但至少政策上表明音乐相关的文化产业春天就在前面！！&lt;/p&gt;
&lt;h2&gt;产品&lt;/h2&gt;
&lt;p&gt;想到的这个产品最直接的服务群体，就是现在在互联网上玩合奏的。&lt;/p&gt;
&lt;h4&gt;乐手&lt;/h4&gt;
&lt;p&gt;现在的玩法是每个演出成员有可能分散在各个城市，甚至在不同国家，通过社交工具碰到一起，当决定来一场“合奏”的时候，然后通过各自录自己的声部，最终后期合成做成“合奏视频”的方式，来完成一场“演出”。&lt;/p&gt;
&lt;p&gt;在不改变现有习惯的前提下，降低后期制作的难度问题，减少用户做后期的工作量，缩短“合奏音乐产品”的发布周期，以此为核心思路，从繁琐的，“额外的”工作中释放出来进而产生最直接的用户价值。&lt;/p&gt;
&lt;p&gt;把上面提到的做到极致，就是这个产品的核心功能：在线合奏直播！！！&lt;/p&gt;
&lt;p&gt;乐手们只要准备好表演内容，找个时间一起上线，即使分散在世界各地，也能直接演出，对于喜欢他们音乐视频产品的粉丝们，也能直接的、实时的享受他们的作品（相对的，当然会有延迟，目前预计延迟在1分钟左右）。对于表演者来说，也能实时的接受到“反馈”“互动”带来的成就感，无需像现在等后期、等发布、等网站审核，等待会带来的空虚。&lt;/p&gt;
&lt;p&gt;当然这仅仅是核心功能，作为一个功能，它无法成为一个可持续运营的产品，我的想法是，既然大家现在都是松散式的乐队，那么，我围绕着在线舞台，形成一个社交网络平台，乐手可以把他们松散式的乐队在我的平台上进行放大，组成乐团，演出组织者更容易找到需要的乐手，而乐手更容易参与到别人的某次演奏中！！！&lt;/p&gt;
&lt;h4&gt;经理人（先暂时这么叫，想不到更准确的词）&lt;/h4&gt;
&lt;p&gt;有了“生产者”的基础，进一步吸引来的类似“经理人”的线下演出的策划者和组织者，他们在平台上物色适合他们某场演出的人或团队，进行邀约。（这里插一句，这个东西呢，也不打破现有的行为习惯，仅仅只是原样搬到我的平台上来，你所见到过的很多晚会、表演，就是以这样到处“物色”的形式组织起来的），然后我来保障双方交易：一来、“视频产品”作为乐手的名片和真实的“价标”，保证“经理人”获取资源的质量，二来、现在邀约演出偶有“经理人”卷款跑路的事件。我的平台作为中间渠道的角色，通过乐手信用指标和“经理人”邀约保证金，对两方进制约。&lt;/p&gt;
&lt;p&gt;说完“经理人”，说说“观众”。&lt;/p&gt;
&lt;h4&gt;观众&lt;/h4&gt;
&lt;p&gt;要说观众，其实这里面有个问题，就是对于“大众”来说，会有“看MTV就好了啊”、“我听碟不比听这些还不出名的人演奏爽啊”之类的问题。&lt;/p&gt;
&lt;p&gt;的确，细想下来，这个平台的发展，相对于专业领域来说，必然“高手”是少数，大部分还是中等水平甚至还有一些刚摆脱“入门”头衔的新手。怎么解决“演出质量”的问题？&lt;/p&gt;
&lt;p&gt;我想说的是：不打算解决，准确的说，不是不打算解决，而是无需去解决！&lt;/p&gt;
&lt;p&gt;因为，平台的初始内容，准备二次元翻演入手，并且一直坚持下去，竖起次元之壁，防止圈外人进来破坏环境以及避免“无法理解”引发的冲突。&lt;/p&gt;
&lt;p&gt;就现在而言，国内“二次元生物”的体量，已经足以让这个平台发展壮大，这点我并不担心，而作为一个二次元空间里的一个舞台，它以其他二次元文化产品为纽带，维系着这个台上之间、台下之间、还有台上台下之间的关系。这里将会是一个纯粹的娱乐平台，爱好者们聚集的地方。以此为前提，那些专业层面的“技术质量”，就不再重要，当然我也相信，随着每个人表演次数的积累（当然也是练习的积累拉），会有更多人进入到“高手”的行列。（新人继续不断补充进来，“高手”依旧是少数）&lt;/p&gt;
&lt;h2&gt;期望&lt;/h2&gt;
&lt;p&gt;这一段不打算多说废话，直接列列表：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;经过初期积累，能够吸引更多已经放弃音乐的，再拿起谱和乐器。&lt;/li&gt;
&lt;li&gt;能够给因为枯燥、无聊而将要放弃的朋友一个坚持下去的动力。&lt;/li&gt;
&lt;li&gt;给遇到瓶颈的乐手一个互相交流的空间。&lt;/li&gt;
&lt;li&gt;能够激发更多人的兴趣进入到乐手的行列。&lt;/li&gt;
&lt;li&gt;让更多的乐手有机会接触到线下商演的机会。&lt;/li&gt;
&lt;li&gt;能够借机打造线下持续的大型的“二次元音乐会”。&lt;/li&gt;
&lt;li&gt;通过商业渠道的建立，让更多人通过“演奏”获得相应的收入或提高收入。不让“生存”问题成为放弃音乐的理由。&lt;/li&gt;
&lt;li&gt;最后，希望这种模式成熟后，最终可复制到“三次元”（另外的平台），再扩大，达到整体社会层面的艺术文化素养水平提升的目的（嗯，做个梦，这算终极理想！）。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;最后&lt;/h2&gt;
&lt;p&gt;这里面可预见的会有很多技术问题，虽然都想好怎么去通过技术手段解决，我还连系统架构都写好了，等之后有时间再慢慢写到站这里来。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Tue, 28 Apr 2015 21:11:00 +0800</pubDate><guid>tag:,2015-04-28:2015/brain_hold_2015_04_28_21_11.html</guid><category>舞台</category><category>演奏</category><category>产品</category><category>脑洞</category></item><item><title>Flask Web Development(7)</title><link>/2015/Flask_Web_Development_2015_04_25_00_26.html</link><description>&lt;h2&gt;《Flask Web Development》--第7章 大型应用程序架构&lt;/h2&gt;
&lt;p&gt;把一个小应用程序的代码都放在一起会很方便，但是不利于扩展，尤其当项目开始变大时在一个文件中工作就会带来一些问题。不像其他框架，Flask应用程序没有特定的组织方式，选择权完全交给了使用者。本章会介绍一种按照包和模块来组织大型应用程序的方法，并会在本书剩余的章节都采用这种结构。&lt;/p&gt;
&lt;h3&gt;项目结构&lt;/h3&gt;
&lt;p&gt;一个Flask应用程序的布局：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;|-flashy
  |-app/
    |-templates/
    |-static/
    |-main/
      |-__init__.py
      |-errors.py
      |-forms.py
      |-views.py
    |-__init__.py
    |-email.py
    |-models.py
  |-migrations/
  |-tests/
    |-__init__.py
    |-test*.py
  |-venv.
  |-requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;顶级有四个文件夹，分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Flask应用程序所在的包通常被命名为app&lt;/li&gt;
&lt;li&gt;数据库迁移相关的脚本被放置在migration&lt;/li&gt;
&lt;li&gt;单元测试写在在tests&lt;/li&gt;
&lt;li&gt;venv包含了Python的虚拟环境&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同样，增加了一些新的文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;requirements.txt 列举了依赖的包方便在新的电脑中对虚拟环境快速进行配置&lt;/li&gt;
&lt;li&gt;config.py 存储了应用程序的配置参数&lt;/li&gt;
&lt;li&gt;manage.py 用于启动应用程序以及做一些其他任务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了更好地理解这样的布局方式，后面的部分会介绍如何从一个只有hello.py的程序扩展到上图所示的结构。&lt;/p&gt;
&lt;h3&gt;配置选项&lt;/h3&gt;
&lt;p&gt;应用程序需要一些配置，比如对于开发、测试、产品会需要不同的数据库那样才不会相互影响。和单文件版本中在&lt;em&gt;hello.py&lt;/em&gt;中写所有的配置不同，我们能够用类层级的方式来组织配置：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;config.py&lt;/em&gt;: 
Application configuration&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="n"&gt;basedir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SECRET_KEY&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hard to guess string&amp;#39;&lt;/span&gt; 
    &lt;span class="n"&gt;SQLALCHEMY_COMMIT_ON_TEARDOWN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="n"&gt;FLASKY_MAIL_SUBJECT_PREFIX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[Flasky]&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;FLASKY_MAIL_SENDER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Flasky Admin &amp;lt;flasky@example.com&amp;gt;&amp;#39;&lt;/span&gt; 
    &lt;span class="n"&gt;FLASKY_ADMIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FLASKY_ADMIN&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;init_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
        &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DevelopmentConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="n"&gt;MAIL_SERVER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;smtp.googlemail.com&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;MAIL_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;587&lt;/span&gt;
    &lt;span class="n"&gt;MAIL_USE_TLS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="n"&gt;MAIL_USERNAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MAIL_USERNAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;MAIL_PASSWORD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MAIL_PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;SQLALCHEMY_DATABASE_URI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DEV_DATABASE_URL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; \
        &lt;span class="s1"&gt;&amp;#39;sqlite:///&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;basedir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;data-dev.sqlite&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestingConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="n"&gt;TESTING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="n"&gt;SQLALCHEMY_DATABASE_URI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;TEST_DATABASE_URL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; \ &lt;span class="s1"&gt;&amp;#39;sqlite:///&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;basedir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;data-test.sqlite&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProductionConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;SQLALCHEMY_DATABASE_URI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DATABASE_URL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; \
        &lt;span class="s1"&gt;&amp;#39;sqlite:///&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;basedir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;data.sqlite&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;development&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DevelopmentConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;testing&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TestingConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;production&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ProductionConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DevelopmentConfig&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Config基类包含了对所有配置通用的设置，不同的配置子类则定义了特有的设置。随需求变更还能增加其他配置子类。&lt;/p&gt;
&lt;p&gt;为了让配置更灵活、安全，一些配置参数可以从环境变量中导入，比如SECRET_KEY考虑到安全性，可以存储在环境变量中，并且在配置脚本中提供了一个默认值以防环境变量没有设置它。&lt;/p&gt;
&lt;p&gt;在三套不同的配置中，SQLALCHEMY_DATABASE_URI被赋予了不同的值，这样运行在三套不同配置下的应用程序都使用了不同的数据库。&lt;/p&gt;
&lt;p&gt;配置类定义了类方法&lt;code&gt;init_app()&lt;/code&gt;，它接受一个应用程序实例作为参数。这样特殊的配置就能够执行了（&lt;code&gt;注：原文是 Here configuration-specific initialization can performed 没明白init_app()这个方法跟特殊配置起不起作用有什么关系，至少在本章中的例子中没有体现出来&lt;/code&gt;）。当前，仅Config类实现了一个空的&lt;code&gt;init_app()&lt;/code&gt;方法。&lt;/p&gt;
&lt;p&gt;在配置文件的底部不同的配置被添加到了字典中，并且开发环境的配置被设置成了默认的。&lt;/p&gt;
&lt;h3&gt;应用程序包App&lt;/h3&gt;
&lt;p&gt;应用程序包app是所有应用程序代码、模板、静态资源文件存放的地方，当然你也可以根据项目需求取别的名字。模板和资源文件的文件夹都被放入了app中，数据库对应的models和邮件支持功能模块则分别对应&lt;em&gt; app/models.py&lt;/em&gt; 和 &lt;em&gt;app/email.py&lt;/em&gt;。&lt;/p&gt;
&lt;h3&gt;使用工厂方法来构建应用示例&lt;/h3&gt;
&lt;p&gt;在单文件版本中创建应用程序实例很方便，但是通常会有缺陷。因为应用程序实例在全局作用于下被创建，而实例被创建后是没办法动态修改配置的。 尤其在做单元测试时，因为要跑不同的数据库，所以我们要应用不同的配置。&lt;/p&gt;
&lt;p&gt;解决办法就是通过使用工厂方法延迟应用程序实例的创建，这样不仅仅是延迟了创建时间还让脚本有创建多个应用程序实例的能力，这对于测试尤其有用。&lt;/p&gt;
&lt;p&gt;app包导入了Flask目前会用到的扩展，但因为应用程序实例还没有被构建出来，它们都还没有被正确初始化。&lt;code&gt;create_app()&lt;/code&gt;这个工厂方法接受一个配置名称作为参数，通过使用Flask提供的app.config的&lt;code&gt;from_object()&lt;/code&gt;方法，我们就能从&lt;em&gt;config.py&lt;/em&gt;中导入所需要的配置。一旦应用程序实例被创建出来，扩展就能够通过调用&lt;code&gt;init_app()&lt;/code&gt;来完成初始化。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;app/&lt;strong&gt;init&lt;/strong&gt;.py&lt;/em&gt;: 
Application package constructor&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt; 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask.ext.bootstrap&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bootstrap&lt;/span&gt; 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask.ext.mail&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Mail&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask.ext.moment&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Moment&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask.ext.sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SQLAlchemy&lt;/span&gt; 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;

&lt;span class="n"&gt;bootstrap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Bootstrap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;mail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mail&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;moment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Moment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SQLAlchemy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;config_name&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; 
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;config_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;bootstrap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;moment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# attach routes and custom error pages here&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;工厂方法返回的应用程序实例还不完整，因它们没有包含路由和错误处理功能，下一节会介绍如何解决这个问题。&lt;/p&gt;
&lt;h3&gt;使用Blueprint来实现应用程实例的功能&lt;/h3&gt;
&lt;p&gt;用工厂方法构建应用程序实例会给路由设置带来一些麻烦。单脚本应用中，应用程序实例是全局的，路由能简单地用app.route decorator来定义。但是现在应用程序实例是运行时创建的，app.route decorator只在在create_app()以后才存在，除此之外app.errorhandler decorator也有同样的问题。&lt;/p&gt;
&lt;p&gt;Flask提供的解决方案是使用blueprints来解决这个问题。blueprints跟application类似，也能定义路由。不同之处是它的路由都处于休眠状态，直到它被注册到应用程序实例后路由才是它的一部分。&lt;/p&gt;
&lt;p&gt;blueprint在全局作用域下使用，因此我们完全可以像在单文件中那样使用路由。当然你既能通过单文件也能通过更加组织良好的方式。为了达到最大程度的便利性，一个子包结构被创建用于管理blueprint。Example 7-4展示了在这个main包中如何创建blueprint：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;app/main/init.py&lt;/em&gt;: 
Blueprint creation&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Blueprint&lt;/span&gt;
&lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Blueprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;main&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;blueprints被创建为Blueprint的实例对象，构造函数有两个参数：blueprint的名字和它所在的模块或者包，在这个应用程序中，Python的 __name__ 变量就是第二个参数所需要的值。&lt;/p&gt;
&lt;p&gt;应用程序的路由被存储在app/main/views.py模块中， 错误处理则在app/main/errors.py。导入这些模块以后，路由和错误处理就和blueprint关联起来了。&lt;/p&gt;
&lt;p&gt;有一点要注意路由和错误处理模块是在app/__init__.py的底部被导入的，因为&lt;em&gt;views.py &lt;/em&gt;和 &lt;em&gt;errors.py&lt;/em&gt;要导入main blueprint，所以为了避免循环依赖我们要等到main被创建出来才能够导入路由和错误处理。&lt;/p&gt;
&lt;p&gt;blueprint在&lt;code&gt;create_app()&lt;/code&gt;方法内被注册到应用程序实例中：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;app/&lt;strong&gt;init&lt;/strong&gt;.py&lt;/em&gt;: 
Blueprint registration&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;main&lt;/span&gt; 
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;main&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;main_blueprint&lt;/span&gt;      
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_blueprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main_blueprint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;错误处理&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;app/main/errors.py&lt;/em&gt;: 
Blueprint with error handlers&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt; 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="nd"&gt;@main.app_errorhandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;page_not_found&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;404.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;

&lt;span class="nd"&gt;@main.app_errorhandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;internal_server_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;500.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在blueprint使用错误处理，如果使用&lt;code&gt;@app.errorhandler&lt;/code&gt;，只有由blueprint定义的路由中导致的错误才会触发对应的handler，如果想要错误处理对整个应用程序可用，我们需要使用&lt;code&gt;@main.app_errorhandler&lt;/code&gt;。&lt;/p&gt;
&lt;h3&gt;使用blueprint方式的路由&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;app/main/views.py&lt;/em&gt;: 
Blueprint with application routes&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url_for&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.forms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;NameForm&lt;/span&gt; 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;..&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;..models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;

&lt;span class="nd"&gt;@main.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; 
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NameForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;validate_on_submit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="c1"&gt;# ...&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.index&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                           &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                           &lt;span class="n"&gt;known&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;known&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                           &lt;span class="n"&gt;current_time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在blueprint中使用视图方法跟之前有两个不同的地方。第一个是route是来自blueprint，即-使用&lt;code&gt;@main.route&lt;/code&gt;，第二个是&lt;code&gt;url_for()&lt;/code&gt;方法的使用。在前面介绍过&lt;code&gt;url_for()&lt;/code&gt;的参数默认是视图方法的名称，比如在单脚本应用中&lt;code&gt;index()&lt;/code&gt;这个视图方法的URL能够通过&lt;code&gt;url_for('index')&lt;/code&gt;获取到。&lt;/p&gt;
&lt;p&gt;在blueprints中区别在于所有的作用域都来自于blueprint（作用域就是blueprint的名称，即Blueprint构造函数的第一个参数），因此&lt;code&gt;index()&lt;/code&gt;视图方法需要通过&lt;code&gt;main.index&lt;/code&gt;来获取到URL，即&lt;code&gt;url_for('main.index')&lt;/code&gt;。&lt;code&gt;url_for()&lt;/code&gt;方法同样支持参数的更短形式，通过将blueprint名字省略，我们可以简写为&lt;code&gt;url_for('.index')&lt;/code&gt;。当然如果跨越不同的blueprints，blueprint的名字还是要加上的。&lt;/p&gt;
&lt;p&gt;为了完成应用程序，我们还需要在&lt;em&gt;app/main/forms.py&lt;/em&gt;模块导入form相关的一些对象。&lt;/p&gt;
&lt;h3&gt;启动脚本&lt;/h3&gt;
&lt;p&gt;在顶层文件夹下的&lt;em&gt;manage.py&lt;/em&gt;是用来启动application的：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;manage.py&lt;/em&gt;: 
Launch script&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;create_app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Role&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask.ext.script&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Manager&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Shell&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask.ext.migrate&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Migrate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MigrateCommand&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FLASK_CONFIG&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;manager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Manager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;migrate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Migrate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_shell_context&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Role&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Role&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;shell&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Shell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;make_context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;make_shell_context&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;db&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MigrateCommand&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;该脚本首先创建应用程序实例，然后从系统环境中读取&lt;code&gt;FLASK_CONFIG&lt;/code&gt;变量，如果该变量没有定义则使用默认值。然后&lt;code&gt;Flask-Script&lt;/code&gt;, &lt;code&gt;Flask-Migrate&lt;/code&gt;等扩展的实例都被初始化。为了方便在Unix-based系统下运行我们增加了第一行。&lt;/p&gt;
&lt;h3&gt;Requirements文件&lt;/h3&gt;
&lt;p&gt;Applications应该包含一个&lt;em&gt;requirements.txt&lt;/em&gt;，它记录了有着准确版本号的所有包依赖，这对以在其他电脑上初始化项目环境很重要。通过如下命令能够自动生成一个项目用到的包的&lt;em&gt;requirement.txt&lt;/em&gt;文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(venv) $ pip freeze &amp;gt;requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在一个新的环境中，你如果要复制虚拟环境中的安装包，只需要执行如下命令即可：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(venv) $ pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;该书示例中的requirement.txt中的包可能有一些已经过时了，你可以选择更加新版的包。如果因此遇到了什么问题，只要回退到老版本即可，因为老版本的都是通过了测试和应用程序兼容的。&lt;/p&gt;
&lt;h3&gt;单元测试&lt;/h3&gt;
&lt;p&gt;到目前应用程序还很小，几乎还没有什么要测试的，我们先来写一个小的测试例子：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;tests/test_basics.py&lt;/em&gt;: 
Unit tests&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;current_app&lt;/span&gt; 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;create_app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BasicsTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;testing&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app_context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app_context&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app_context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tearDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop_all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app_context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_app_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_app&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_app_is_testing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;TESTING&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;测试是按照Python包中的典型的单元测试的写法来构建的，&lt;code&gt;setUp()&lt;/code&gt; 和 &lt;code&gt;tearDown()&lt;/code&gt; 方法在每个测试方法执行前后都会运行，任何以&lt;code&gt;test_&lt;/code&gt; 开头的方法都会被当做测试方法来执行。关于使用Python包来做单元测试的更多信息可以查看official documentation。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;setUp()&lt;/code&gt;方法创建了测试所需的环境， 他首先创建了应用程序实例用作测试的山下文环境，这样就能确保测试拿到current_app, 然后新建了一个全新的数据库。数据库和应用程序实例最后都会在&lt;code&gt;tearDown()&lt;/code&gt; 方法被销毁。&lt;/p&gt;
&lt;p&gt;第一个测试确保了应用程序实例是存在的，第二个测试应用程序实例在测试配置下运行。为了确保测试文件夹有正确的包结构，我们需要添加一个&lt;em&gt;tests/&lt;strong&gt;init&lt;/strong&gt;.py&lt;/em&gt;文件（注：涉及Python包相关知识），这样单元测试包就能扫描所有在测试文件夹中的模块了。&lt;/p&gt;
&lt;p&gt;你可以把代码checkout到7a的历史节点，并且执行 pip install -r requirements.txt 来确保你安装了所需要的包。为了运行测试用例，还需要添加命令到manage.py中：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;manage.py&lt;/em&gt;: 
Unit test launcher command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@manager.command&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Run the unit tests.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;
    &lt;span class="n"&gt;tests&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestLoader&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;discover&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tests&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextTestRunner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;verbosity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;manager.command decorator&lt;/code&gt;所对应的方法名字就是命令的名字，并且方法的文档信息会被显示在help中，&lt;code&gt;test()&lt;/code&gt; 的实现调用了unittest package包的&lt;code&gt;test runner&lt;/code&gt;。如下是运行过程：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(venv) $ python manage.py test
test_app_exists (test_basics.BasicsTestCase) ... ok
test_app_is_testing (test_basics.BasicsTestCase) ... ok
.----------------------------------------------------------------------
Ran 2 tests in 0.001s
OK
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;数据库设置&lt;/h3&gt;
&lt;p&gt;重构后的应用程序使用了跟单文件本版本中完全不同的数据库。数据库URL会首先从环境变量中获取，然后把默认的SQLite数据库作为备选，在三个配置环境下数据库的名字是不同的。&lt;/p&gt;
&lt;p&gt;不论数据库的URL是什么，只要是转换到一个新的数据库数，据库表一定要被重新创建（&lt;code&gt;注：原文Regardless of the source of the database URL, the database tables must be created for the new database 不完全理解&lt;/code&gt;）。使用Flask-Migrate进行迁移管理的过程中，数据库表能够通过如下命令被新建或者upgrade：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(venv) $ python manage.py db upgrade
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第一部分的内容到此算是结束了，我们已经基本介绍了使用Flask来创建应用程序的所有知识，但是你也许仍旧不确定如何将他们捏合在一起。第二部分的目标就是帮助你完成一个应用程序的开发。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">tangyefei</dc:creator><pubDate>Sat, 25 Apr 2015 00:26:00 +0800</pubDate><guid>tag:,2015-04-25:2015/Flask_Web_Development_2015_04_25_00_26.html</guid><category>Flask</category><category>Python</category><category>Web</category></item><item><title>Flask Web Development(6)</title><link>/2015/Flask_Web_Development_2015_04_24_20_55.html</link><description>&lt;h2&gt;《Flask Web Development》--第6章 邮件&lt;/h2&gt;
&lt;p&gt;当某些事件被触发，应用程序通常需要通过邮件方式通知用户。Python的原生包smtplib能够被用于发送邮件，但是Flask的扩展Flask-Mail更好包装了smtplib能够方便地和Flask进行交互。&lt;/p&gt;
&lt;h3&gt;Flask-Mail提供的邮件支持&lt;/h3&gt;
&lt;p&gt;安装&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(venv) $ pip install flask-mail
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;配置server等参数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;app.config[&amp;#39;MAIL_SERVER&amp;#39;] = &amp;#39;smtp.googlemail.com&amp;#39;
app.config[&amp;#39;MAIL_PORT&amp;#39;] = 587
app.config[&amp;#39;MAIL_USE_TLS&amp;#39;] = True
app.config[&amp;#39;MAIL_USERNAME&amp;#39;] = os.environ.get(&amp;#39;MAIL_USERNAME&amp;#39;)
app.config[&amp;#39;MAIL_PASSWORD&amp;#39;] = os.environ.get(&amp;#39;MAIL_PASSWORD&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;配置所用到的用户名和密码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(venv) $ export MAIL_USERNAME=&amp;lt;Gmail username&amp;gt;
(venv) $ export MAIL_PASSWORD=&amp;lt;Gmail password&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过Python Shell发送邮件 mSending Email from the Python Shell&lt;/p&gt;
&lt;p&gt;为了测试上述配置是否有用，可以在shell中测试是否有用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;venv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask.ext.mail&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;index&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mail&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test subject&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;you@example.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;recipients&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;you@example.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text body&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;b&amp;gt;HTML&amp;lt;/b&amp;gt; body&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app_context&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;邮件和应用程序集成 ###&lt;/h3&gt;
&lt;p&gt;配置和定义send_mail：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;app.config[&amp;#39;FLASKY_MAIL_SUBJECT_PREFIX&amp;#39;] = &amp;#39;[Flasky]&amp;#39;
app.config[&amp;#39;FLASKY_MAIL_SENDER&amp;#39;] = &amp;#39;Flasky Admin flasky@example.com&amp;#39;

def send_email(to, subject, template, **kwargs):
    msg = Message(app.config[&amp;#39;FLASKY_MAIL_SUBJECT_PREFIX&amp;#39;] + subject,
                  sender=app.config[&amp;#39;FLASKY_MAIL_SENDER&amp;#39;], recipients=[to])
    msg.body = render_template(template + &amp;#39;.txt&amp;#39;, **kwargs)
    msg.html = render_template(template + &amp;#39;.html&amp;#39;, **kwargs)
    mail.send(msg)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;相应地改写view Function：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;app.config[&amp;#39;FLASKY_ADMIN&amp;#39;] = os.environ.get(&amp;#39;FLASKY_ADMIN&amp;#39;)
#...
@app.route(&amp;#39;/&amp;#39;, methods=[&amp;#39;GET&amp;#39;, &amp;#39;POST&amp;#39;])
def index():
    form = NameForm()
    if form.validate_on_submit():
        user = User.query.filter_by(username=form.name.data).first()
        if user is None:
            user = User(username=form.name.data)
            db.session.add(user)
            session[&amp;#39;known&amp;#39;] = False
            if app.config[&amp;#39;FLASKY_ADMIN&amp;#39;]:
                send_email(app.config[&amp;#39;FLASKY_ADMIN&amp;#39;], &amp;#39;New User&amp;#39;,
                           &amp;#39;mail/new_user&amp;#39;, user=user)
        else:
            session[&amp;#39;known&amp;#39;] = True

        session[&amp;#39;name&amp;#39;] = form.name.data
        form.name.data = &amp;#39;&amp;#39;

        return redirect(url_for(&amp;#39;index&amp;#39;))
    return render_template(&amp;#39;index.html&amp;#39;, form=form, name=session.get(&amp;#39;name&amp;#39;), known=session.get(&amp;#39;known&amp;#39;, False))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;配置系统环境变量：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(venv) $ export FLASKY_ADMIN=&amp;lt;your-email-address&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;发送异步邮件 ###&lt;/h3&gt;
&lt;p&gt;发送邮件的瞬间，页面是没有响应的，为了jiejeu这个问题，邮件发送可以交给后台线程来做：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_async_email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app_context&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FLASKY_MAIL_SUBJECT_PREFIX&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FLASKY_MAIL_SENDER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;recipients&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;thr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;send_async_email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;thr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;thr&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">tangyefei</dc:creator><pubDate>Fri, 24 Apr 2015 20:55:00 +0800</pubDate><guid>tag:,2015-04-24:2015/Flask_Web_Development_2015_04_24_20_55.html</guid><category>Flask</category><category>Python</category><category>Web</category></item><item><title>Flask Web Development(4)</title><link>/2015/Flask_Web_Development_2015_04_24_19_40.html</link><description>&lt;h2&gt;《Flask Web Development》--第4章 表单&lt;/h2&gt;
&lt;p&gt;为了解决表单验证之类的重复和繁琐的问题，可以引入Flask-WTF来让表单使用变得简单（注：如果不使用Flask自带的模板，而是用Angular.js等前端技术本章可以略过，因为表单验证是跟Jinjia2模板紧密关联在一起的）。通过pip安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(venv) $ pip install flask-wtf
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;CSRF&lt;/h3&gt;
&lt;p&gt;CSRF是Cross-Site Request Forgery Protection的缩写，通常发生在一个站点发送请求到另一个受害者登陆的站点时。&lt;/p&gt;
&lt;h3&gt;如何设置保护&lt;/h3&gt;
&lt;p&gt;Flask-WTF对所有表单请求提供保护，为了实现保护你需要像下面这样设置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;app = Flask(__name__)
app.config[&amp;#39;SECRET_KEY&amp;#39;] = &amp;#39;hard to guess string&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;关于上述代码的几点说明： app.config常备用来存储一些配置信息，甚至还能够从文件中导入配置；SECRET_KEY是常用来做加密的变量，它会被用来生成一个token，该token用于每次登陆时候的校验。&lt;/p&gt;
&lt;h3&gt;Form Classes&lt;/h3&gt;
&lt;p&gt;在Flask-WTF中每个表单是一个集成自Form的类，类里面定义了一些列的属性，每个属性又有一个或者多个的校验器。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask.ext.wtf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Form&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wtforms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StringField&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SubmitField&lt;/span&gt; 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wtforms.validators&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Required&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NameForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StringField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;What is your name?&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;validators&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Required&lt;/span&gt;&lt;span class="p"&gt;()])&lt;/span&gt; 
    &lt;span class="n"&gt;submit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SubmitField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Submit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如上，有几点要说明的:&lt;/p&gt;
&lt;p&gt;（1）导入部分有点奇怪，可以参考原文帮助理解 “The Flask-WTF extension is a Flask integration wrapper around the framework-agnostic WTForms package” &lt;/p&gt;
&lt;p&gt;（2）属性部分，StringField会被转换为input[type="field",label="What is your name?"]，提交之前会执Require的validator，其他的属性类也类似对应到HTML的其他组件。&lt;/p&gt;
&lt;p&gt;更具体的组件类和校验器的使用，请参考书籍相应部分或文档。&lt;/p&gt;
&lt;h3&gt;HTML渲染表单&lt;/h3&gt;
&lt;p&gt;将构建的NameForm对象form传递给页面以后，就可以按照下面这种方式是用Form：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;form.name.label&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt; &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;form.name&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my-text-field&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt; 
    &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;form.submit&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过添加id或者class你就可以给这些组件添加样式了，但是要完全使用
Bootstrap的样式，可以导入helper调用wtf.quick_form(form)来快速实现Form的布局：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;templates/index.html&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;extends&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;commonBase.html&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bootstrap/wtf.html&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;wtf&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;Flasky&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;endblock&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="n"&gt;page_content&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;page-header&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}{{&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}}{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;Stranger&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;endif&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;wtf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quick_form&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;endblock&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;index.py&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask.ext.wtf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Form&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wtforms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StringField&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SubmitField&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wtforms.validators&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Required&lt;/span&gt;
&lt;span class="c1"&gt;#...&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SECRET_KEY&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hard to guess string&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;#...&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NameForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StringField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;What is your name?&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;validators&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Required&lt;/span&gt;&lt;span class="p"&gt;()])&lt;/span&gt;
    &lt;span class="n"&gt;submit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SubmitField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Submit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#...&lt;/span&gt;
&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NameForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;表单响应&lt;/h3&gt;
&lt;p&gt;阅读如下这段代码，看看当第一进入页面时候；输入空值时候；输入部位空值的时候各是什么效果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;@app.route(&amp;#39;/&amp;#39;, methods=[&amp;#39;GET&amp;#39;, &amp;#39;POST&amp;#39;])
def index():
    name = None
    form = NameForm()
    if form.validate_on_submit():
        name = form.name.data
        form.name.data = &amp;#39;&amp;#39;
    return render_template(&amp;#39;index.html&amp;#39;, form=form, name=name)
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;重定向和Session&lt;/h3&gt;
&lt;p&gt;在之前的例子中用户进入页面时候发送的是get请求，填写name提交标案以后是post请求，提交完后刷新页面，页面会提示是否离开当前页面。这是因为之前的请求是post的，刷新会导致重新发送该请求（个人电脑上实验没有发生这样的情况）。&lt;/p&gt;
&lt;p&gt;由此引入重定向来解决这个问题，为了防止重定向以后的数据丢失，我们要讲数据存储在session中， index.py改写部分的代码如下所示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url_for&lt;/span&gt;
&lt;span class="c1"&gt;#...&lt;/span&gt;
&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NameForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;validate_on_submit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;消息提示&lt;/h3&gt;
&lt;p&gt;对于错误、确认、警告信息，Flask提供了&lt;code&gt;flash()&lt;/code&gt;方法。使用分为python中调用&lt;code&gt;flask()&lt;/code&gt;和在模板中呈现message两部分；&lt;/p&gt;
&lt;p&gt;&lt;em&gt;index.py&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;#...&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flash&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NameForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;validate_on_submit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;old_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;old_name&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;old_name&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Looks like you have changed your name!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;
        &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;仅在名字发生了更新的时候调用&lt;code&gt;flash()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;templates/commonBase.html&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;get_flashed_messages&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;alert alert-warning&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;button&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;close&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-dismiss=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;alert&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;×&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
        &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
            &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;page_content&lt;/span&gt; &lt;span class="cp"&gt;%}{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之所以选择在commonBase.html是因为flash messages的普遍性，&lt;code&gt;get_flashed_messages()&lt;/code&gt;遍历的是一个请求处理中可能的多个flash调用，新的请求会清除之前请求flash的message。&lt;/p&gt;
&lt;p&gt;在Flask中的表单提交的数据可以通过request.form获取到。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">tangyefei</dc:creator><pubDate>Fri, 24 Apr 2015 19:40:00 +0800</pubDate><guid>tag:,2015-04-24:2015/Flask_Web_Development_2015_04_24_19_40.html</guid><category>Flask</category><category>Python</category><category>Web</category></item><item><title>Flask Web Development(3)</title><link>/2015/Flask_Web_Development_2015_04_24_17_01.html</link><description>&lt;h2&gt;《Flask Web Development》--第3章 模板&lt;/h2&gt;
&lt;p&gt;View Function有两个任务：（1）处理业务逻辑 （2）返回响应内容。将两者分开管理能够使代码更好容易维护，模板起的就是这么一个作用。本章介绍的模板引擎Jinjia2。&lt;/p&gt;
&lt;h3&gt;Jinjia模板引擎&lt;/h3&gt;
&lt;p&gt;模板只是一些包含文本的字符串，设置的变量标记位最终会被模板引擎用数据替换。要使用Jinjia模板，第一步是定义模板，Jinjia2默然会到templates子目录中寻找模板，所以在该目录下定义两个模板文件：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;templates/index.html:&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello World!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;templates/user.html：&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello &lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;渲染模板&lt;/h3&gt;
&lt;p&gt;如下例子导入渲染模板的方法，然后调用模板方法去注入模板：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;index.py&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/index&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;lt;name&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;启动server以后可以分别访问相对路径&lt;code&gt;/index&lt;/code&gt;和&lt;code&gt;/&amp;lt;name&amp;gt;&lt;/code&gt;索引来查看页面内容结果。&lt;/p&gt;
&lt;h3&gt;变量类型&lt;/h3&gt;
&lt;p&gt;模板中除了接受普通变量，还能接收复杂的数据结构，比如dict、list、obj，修改后的模板如下：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;templates/user.html:&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;A value from a dictionary: &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;mydict&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;key&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;A value from a list: &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;mylist&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;A value from a list, with a variable index: &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;mylist&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;myintvar&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;A value from an object&amp;#39;s method: &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;myobj.somemethod&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;那么对应的在python就要定义一些数据结构：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;index.py&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Human&lt;/span&gt;():
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;somemethod&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;what the fucking world!&amp;#39;&lt;/span&gt;

&lt;span class="nv"&gt;@app&lt;/span&gt;.&lt;span class="n"&gt;route&lt;/span&gt;(&lt;span class="s"&gt;&amp;#39;/&amp;lt;name&amp;gt;&amp;#39;&lt;/span&gt;)
&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;(&lt;span class="nb"&gt;name&lt;/span&gt;):
    &lt;span class="n"&gt;mydict&lt;/span&gt; = {&lt;span class="s"&gt;&amp;quot;key&amp;quot;&lt;/span&gt;: &lt;span class="s"&gt;&amp;quot;To Be or Not To Be&amp;quot;&lt;/span&gt;}
    &lt;span class="n"&gt;mylist&lt;/span&gt; = [&lt;span class="s"&gt;&amp;#39;it&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;is&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;problem&amp;#39;&lt;/span&gt;]
    &lt;span class="n"&gt;myintvar&lt;/span&gt; = &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;myobj&lt;/span&gt; = &lt;span class="n"&gt;Human&lt;/span&gt;()

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;(&lt;span class="s"&gt;&amp;#39;user.html&amp;#39;&lt;/span&gt;, &lt;span class="nb"&gt;name&lt;/span&gt;=&lt;span class="nb"&gt;name&lt;/span&gt;, &lt;span class="n"&gt;mydict&lt;/span&gt;=&lt;span class="n"&gt;mydict&lt;/span&gt;, &lt;span class="n"&gt;mylist&lt;/span&gt;=&lt;span class="n"&gt;mylist&lt;/span&gt;, &lt;span class="n"&gt;myintvar&lt;/span&gt;=&lt;span class="n"&gt;myintvar&lt;/span&gt;, &lt;span class="n"&gt;myobj&lt;/span&gt;=&lt;span class="n"&gt;myobj&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以执行index.py来查看运行结果。&lt;/p&gt;
&lt;p&gt;除了使用复杂的数据结构以外，模板中还能使用&lt;a href="http://jinja.pocoo.org/docs/dev/templates/#builtin-filters"&gt;过滤器&lt;/a&gt;对内容进行过滤，下面是一个将字符内容变为大写的例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;Hello, &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;capitalize&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;控制结构&lt;/h3&gt;
&lt;p&gt;Jinjia2能够使用常见的控制流，如下是常用的集中控制流的简要介绍：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If控制流&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;index.py&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;@app.route(&amp;#39;/flow&amp;#39;)
def flow():
    user = &amp;#39;tangyefei&amp;#39;

    return render_template(&amp;#39;flow.html&amp;#39;, user=user)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;templates/flow.html&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;user&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    Hello, &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;user&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    Hello, stranger&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Loop控制流&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;index.py&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;@app.route(&amp;#39;/loop&amp;#39;)
def loop():
    comments = [&amp;quot;To Be&amp;quot;, &amp;quot;Or&amp;quot;, &amp;quot;Not To Be&amp;quot;]

    return render_template(&amp;#39;loop.html&amp;#39;, comments=comments)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;templates/loop.html&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;comment&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;comments&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;comment&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Macro!!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;index.py&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;@app.route(&amp;#39;/macro&amp;#39;)
def macro():
    comments = [&amp;quot;To Be&amp;quot;, &amp;quot;Or&amp;quot;, &amp;quot;Not To Be&amp;quot;]

    return render_template(&amp;#39;macro.html&amp;#39;, comments=comments)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;templates/macro.html&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;macro&lt;/span&gt; &lt;span class="nv"&gt;render_comment&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;comment&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;comment&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endmacro&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
     &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;comment&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;comments&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt;
        &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;macro.render_comment&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;comment&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;外部导入Macro&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;index.py&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;@app.route(&amp;#39;/comments&amp;#39;)
def comments():
    comments = [&amp;quot;To Be&amp;quot;, &amp;quot;Or&amp;quot;, &amp;quot;Not To Be&amp;quot;]

    return render_template(&amp;#39;comments.html&amp;#39;, comments=comments)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;templates/macro.html&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;macro&lt;/span&gt; &lt;span class="n"&gt;render_comment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;endmacro&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;templates&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;comments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;macro.html&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;macro&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;comment&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;comments&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;macro&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render_comment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;endfor&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;模板继承&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;index.py&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;@app.route(&amp;#39;/extends&amp;#39;)
def extends():
    return render_template(&amp;#39;child.html&amp;#39;)

/templates/base.html

&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;head&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;
            &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="cp"&gt;%}{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt;- My Application
        &lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;body&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;/templates/child.html&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;base.html&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt;
    Index
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;head&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;body&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Helll, World!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;集成Bootstrap&lt;/h3&gt;
&lt;p&gt;要使用Bootstrap，最直观的办法是引入对应的css和js文件，在Flask中只需要安装Flask-Bootstrap，然后在模板中继承&lt;em&gt;base.html&lt;/em&gt;就可以使用Bootstrap。如下为安装和使用的一个详细的例子：&lt;/p&gt;
&lt;p&gt;第一步，安装flask-bootstrap&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(venv) $ pip install flask-bootstrap
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第二步，Python文件中使用Bootstrap&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# 引入flask-bootstrap&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask.ext.bootstrap&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bootstrap&lt;/span&gt;

&lt;span class="c1"&gt;# 包裹app&lt;/span&gt;
&lt;span class="n"&gt;bootstrap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Bootstrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 定义View Function&lt;/span&gt;
&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/bootstrap/&amp;lt;name&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bootstrap.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第三步，构建模板覆写提供的三个block&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bootstrap/base.html&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt; Flasky &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;navbar&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;navbar navbar-inverse&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;navigation&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;navbar-header&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;button&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;navbar-toggle&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;data-toggle=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;collapse&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-target=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.navbar-collapse&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sr-only&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Toggle navigation&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;icon-bar&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;icon-bar&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;icon-bar&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;navbar-brand&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Flasky&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;navbar-collapse collapse&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nav navbar-nav&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;page-header&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello, &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Bootstrap还定义了一些其他的Block能够被覆写的，比如下面的例子是一个覆写block script的例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;scripts&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;my-script.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;定制错误页面&lt;/h3&gt;
&lt;p&gt;Flask允许我们基于template来定制错误页面：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;@app.errorhandler(404)
def page_not_found(e):
    return render_template(&amp;#39;404.html&amp;#39;), 404

@app.errorhandler(500)
def internal_server_error(e):
    return render_template(&amp;#39;500.html&amp;#39;), 500
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因为我们引入了Bootstrap，为了保证界面一致性你可能会想直接拷贝Bootstrap的base.html页面来修改一个 404.html。但是更简单的做法是，基于Bootstrap的base.html定制一个tempates/base.html，将一些项目通用的内容放在里面，然后项目页面比如 404.html基础都以此为基础：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;templates/base.html&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bootstrap/base.html&amp;quot;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;Flasky&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;navbar&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;navbar navbar-inverse&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;navigation&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;navbar-header&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;button&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;navbar-toggle&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-toggle=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;collapse&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-target=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.navbar-collapse&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sr-only&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Toggle navigation&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;icon-bar&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;icon-bar&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;icon-bar&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;navbar-brand&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Flasky&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;navbar-collapse collapse&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nav navbar-nav&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;page_content&lt;/span&gt; &lt;span class="cp"&gt;%}{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;templates/404.html&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;commonBase.html&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt; Page Not Found&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;page-header&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Not Found&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以尝试访问一个不存在的地址，看页面是否定位到了我们定制的404页面。
请求跳转&lt;/p&gt;
&lt;p&gt;在代码中我们可能会想获取某个路由，因为很多路由都有参数，一旦路由参数发生变化，直接获取路由的代码就需要更新来保证仍能正常工作。&lt;/p&gt;
&lt;p&gt;为此Flask提供了一个工具方法 &lt;code&gt;url_for&lt;/code&gt; 用来做获取View Function所对应的路由，注意该方法只是用来获取url而不是做跳转的方法:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;url_for(&amp;#39;user&amp;#39;, name=&amp;#39;john&amp;#39;, _external=True)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;该方法会将多余参数凭借到url后面：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# would return /?page=2.
url_for(&amp;#39;index&amp;#39;, page=2)
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;静态文件&lt;/h3&gt;
&lt;p&gt;在Flask中，静态文件会从根目录中的static下去寻找。如下是一个使用图片作为浏览器Tab的Icon的例子，图片可以在Flasky项目中找：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;templates/base.html&lt;/em&gt; 添加代码片段&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;head&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;link rel=&amp;quot;shortcut icon&amp;quot; href=&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;url_for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;static&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;favicon.ico&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; type=&amp;quot;image/x-icon&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;link rel=&amp;quot;icon&amp;quot; href=&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;url_for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;static&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;favicon.ico&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; type=&amp;quot;image/x-icon&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;本地化时间和日期&lt;/p&gt;
&lt;p&gt;用户遍及在世界各地，因此统一用UTC来表示时间日期。但是在每个客户端，用户所看到的时间格式应该有所不同。这个工作最适合交给客户端-浏览器来做，因为浏览器能获取到用户的地区和语言设置。&lt;/p&gt;
&lt;p&gt;有这么一个客户端的js库叫moment.js实现了很多时间日期处理相关的方法，在Flask中可以通过安装flask-moment来使用它。如下是使用的例子：&lt;/p&gt;
&lt;p&gt;第一步，安装&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(venv)$ pip install flask-moment
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第二步，在Python中导入&lt;/p&gt;
&lt;p&gt;&lt;em&gt;index.py&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# 导入moment和local的datetime&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask.ext.moment&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Moment&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;span class="c1"&gt;#...&lt;/span&gt;
&lt;span class="n"&gt;moment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Moment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#...&lt;/span&gt;
&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第三步，在页面中引入和使用&lt;/p&gt;
&lt;p&gt;&lt;em&gt;templates/base.html&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;scripts&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;moment.include_moment&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;templates/index.html&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;The local date and time is &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;moment&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;current_time&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;.format&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;LLL&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;That was &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;moment&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;current_time&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;.fromNow&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;refresh&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;True&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://momentjs.com/docs/#/displaying/"&gt;moment.js&lt;/a&gt;实现了format()、fromNow()、 fromTime()等方法，使用这些方法基本能够构建出友好的客户端代码了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">tangyefei</dc:creator><pubDate>Fri, 24 Apr 2015 17:01:00 +0800</pubDate><guid>tag:,2015-04-24:2015/Flask_Web_Development_2015_04_24_17_01.html</guid><category>Flask</category><category>Python</category><category>Web</category></item><item><title>Flask Web Development(2)</title><link>/2015/Flask_Web_Development_2015_04_22_14_56.html</link><description>&lt;h2&gt;《Flask Web Development》--第2章 基础应用的结构&lt;/h2&gt;
&lt;p&gt;本章将开始熟悉一个最基本的Flask应用的不同部分，并自己动手构建一个Flask Web应用。&lt;/p&gt;
&lt;h3&gt;初始化&lt;/h3&gt;
&lt;p&gt;所有Flask的应用程序必须构建一个Flask的对象，然后通过协议将从客户端收到的所有请求交给这个实例进行处理：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="n"&gt;Flask&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;关于Flask中参数的说明：Flask的构造函数只接收一个参数，这里是__name__会指向该程序片段所在的模块。目前只需要知道使用__name__就够了。&lt;/p&gt;
&lt;h3&gt;路由和函数&lt;/h3&gt;
&lt;p&gt;Web客户端请求的链接地址不同，后台会通过route来决定每个链接对应的哪块处理代码。最简单的做法就是使用Flask实例中提供的方法app.route来注册一个方法到路由上：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;@app.route(&amp;#39;/&amp;#39;) 
def index():
return &amp;#39;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello World!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Flask路由上是可以配置动态参数的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;@app.route(&amp;#39;/user/&amp;lt;name&amp;gt;&amp;#39;) 
def user(name):
return &amp;#39;&amp;lt;h1&amp;gt;Hello, %s!&amp;lt;\h1&amp;gt;&amp;#39; % name
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在上例中，尖括号中间的内容是动态的，任何匹配了该形式的URL会映射到这个路由上，然后调用对应的View Function。默认的，传递的参数被当做string处理，当然你也可以执行它们 比如&lt;code&gt;@app.route /user/&amp;lt;int:id&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Server启动&lt;/h3&gt;
&lt;p&gt;应用程序实例有一个run方法用于启动Flask所集成的Web服务器：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;if __name__ == &amp;#39;__main__&amp;#39;: 
    app.run(debug=True)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;if判定条件是为了保证：只有该script被直接执行的时候才去启动server，因为如果该script是被当做模块引入的，那么很可能在其他的script中已经启动过server了。&lt;/p&gt;
&lt;p&gt;启动过后server会一直轮巡检查是否收到有客户端的请求，Mac OS下可以通过ctrl+c 停止server。run方法有很多可选参数可以配置，比如设置&lt;code&gt;debug=True&lt;/code&gt;能够进入调试模式方便查看调试信息。 &lt;/p&gt;
&lt;h3&gt;一个完整的应用&lt;/h3&gt;
&lt;p&gt;在前面的代码片段已经说明了该例子的各个部分，可以尝试在自己的编辑器上构建这么一个hello.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;Hello World!&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;确保保证你是在虚拟环境下运行&lt;em&gt;hello.py&lt;/em&gt;，最后访问 &lt;a href="http://127.0.0.1:5000/"&gt;http://127.0.0.1:5000/&lt;/a&gt; 即可看到Hello World页面。&lt;/p&gt;
&lt;h3&gt;请求的生命周期&lt;/h3&gt;
&lt;h6&gt;应用与请求上下文&lt;/h6&gt;
&lt;p&gt;每个来自客户端的请求处理过程都需要构建一些对象，比如request对象。&lt;/p&gt;
&lt;p&gt;为了将处理请求需要的参数传递给View Function，我们可以给View Function的链接中增加动态参数，但是那样参数一多久会显得混乱了。Flask采用了Context中保存对象的做法，request对象会从context中获取属于当前请求的参数，以方便全局访问一些对象，如下就是一个例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;user_agent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;User-Agent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;p&amp;gt;Your browser is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;user_agent&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当然不同的请求访问到的是不同的request对象，因为Flask中采用了一定的机制保证获取对象的正确获取，逻辑不复杂有兴趣可以细看相应章节。&lt;/p&gt;
&lt;p&gt;在Flask中使用了一个map结构来保存Route和View Function的对应关系，如下示例代码可以查看该map的存储键值对：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;venv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;hello&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url_map&lt;/span&gt;
&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Rule&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HEAD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OPTIONS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Rule&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/static/&amp;lt;filename&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HEAD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OPTIONS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;static&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Rule&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/user/&amp;lt;name&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HEAD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OPTIONS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h6&gt;钩子函数&lt;/h6&gt;
&lt;p&gt;于面向切面编程概念中，我们通常希望请求前、后可能希望做一些通用的处理，在Flask中可以使用一些钩子函数来达到这个目的，Flask提供了四个钩子函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;before_first_request&lt;/li&gt;
&lt;li&gt;before_request&lt;/li&gt;
&lt;li&gt;after_request&lt;/li&gt;
&lt;li&gt;teardown_request&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;钩子函数的一个典型的应用场景是：在第一次请求中通过&lt;code&gt;before_first_reques&lt;/code&gt;t来获取到用户数据存储到Context中，以后请求就可以直接从Context中直接取用户数据了。&lt;/p&gt;
&lt;h6&gt;响应结果&lt;/h6&gt;
&lt;p&gt;返回给前台的数据可以是一个字符串，还可以携带第二个甚至第三个参数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;@app.route(&amp;#39;/&amp;#39;) 
def index():
    return &amp;#39;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Bad Request&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;&amp;#39;, 400
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更好的做法是返回一个response对象：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;make_response&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;This document carries a cookie!&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_cookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;answer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;42&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;还有其他一种方式是直接定位到另一个地址：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://www.example.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;有一中特殊的用法，就是abort，用来再页面处理错误直接返回404：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;abort&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/user/&amp;lt;id&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;Hello, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Flask的扩展&lt;/h3&gt;
&lt;h6&gt;带命令行选项的Flask-Script&lt;/h6&gt;
&lt;p&gt;Flask有大量的用于不同目的的扩展可以使用，如果这些还不满足要求你还可以开发自己的扩展。该部分会介绍如何集成一个用于加强命令行的功能的扩展，使命令行能携带参数。&lt;/p&gt;
&lt;p&gt;第一步，使用pip安装该扩展：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(venv) $ pip install flask-script
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第二步，基于hello.py修改代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="n"&gt;rom&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ext&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Manager&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;manager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Manager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;Hello World!&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第三步，命令行执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(venv) $ python hello.py
usage: hello.py [-?] {shell,runserver} ...

positional arguments:
  {shell,runserver}
    shell            Runs a Python shell inside Flask application context.
    runserver        Runs the Flask development server i.e. app.run()

optional arguments:
      -?, --help         show this help message and exit
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如上，必选参数为runserver/shell, 这里我们要做的是run server。要查看runserver有哪些参数，可以如下方式查看：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(venv) $ python hello.py runserver --help
usage: hello.py runserver [-h] [-t HOST] [-p PORT] [--threaded]
                          [--processes PROCESSES] [--passthrough-errors] [-d]
                          [-r]
Runs the Flask development server i.e. app.run()

optional arguments:
    -h, --help
    -t HOST, --host HOST
    -p PORT, --port PORT
    --threaded
    --processes PROCESSES
    --passthrough-errors
    -d, --no-debug
    -r, --no-reload
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在能够基于命令行直接设置server的host和port等参数了，可以将主机地址设置为0.0.0.0看看：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(venv) $ python hello.py runserver --host 0.0.0.0
* Running on http://0.0.0.0:5000/
* Restarting with reloader
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">tangyefei</dc:creator><pubDate>Wed, 22 Apr 2015 14:56:00 +0800</pubDate><guid>tag:,2015-04-22:2015/Flask_Web_Development_2015_04_22_14_56.html</guid><category>Flask</category><category>Python</category><category>Web</category></item><item><title>webRtc 音频本地回环</title><link>/2015/webRtc_2015_04_12_13_59.html</link><description>&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;VoiceEngine&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nt"&gt;ve&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;VoiceEngine&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;:Create&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;  
&lt;span class="nt"&gt;VoEBase&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nt"&gt;base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;VoEBase&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;:GetInterface&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;ve&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  
&lt;span class="nt"&gt;base-&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;Init&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;  
&lt;span class="nt"&gt;int&lt;/span&gt; &lt;span class="nt"&gt;chId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;base-&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;CreateChannel&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;  
&lt;span class="nt"&gt;base-&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;SetSendDestination&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;chId&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;3000&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;4000&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  
&lt;span class="nt"&gt;base-&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;SetLocalReceiver&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;chId&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;3000&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;3001&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  
&lt;span class="nt"&gt;base-&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;StartPlayout&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;chId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  
&lt;span class="nt"&gt;base-&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;StartReceive&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;chId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  
&lt;span class="nt"&gt;base-&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;StartSend&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;chId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="o"&gt;//...&lt;/span&gt;&lt;span class="nc"&gt;.sleep&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="nc"&gt;.wait&lt;/span&gt;&lt;span class="o"&gt;.....&lt;/span&gt;

&lt;span class="nt"&gt;base-&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;StopSend&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;chId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="nt"&gt;base-&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;StopReveive&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;chId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="nt"&gt;base-&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;StopPlayout&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;chId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="nt"&gt;base-&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;Terminate&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Sun, 12 Apr 2015 13:59:00 +0800</pubDate><guid>tag:,2015-04-12:2015/webRtc_2015_04_12_13_59.html</guid><category>webRtc</category><category>c++</category><category>audio</category></item><item><title>某webRtc应用的架构</title><link>/2015/webRtc_2015_04_02_20_56.html</link><description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;反正这也是个应付政府某些申请的东西，随便画了，不过即使最后商用的话应该也八九不离十就是这样。&lt;/p&gt;
&lt;h2&gt;架构&lt;/h2&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/webRtc_2015_04_02_20_56/1.png" /&gt;&lt;/center&gt;
&lt;center&gt;&lt;img alt="" src="/article_img/webRtc_2015_04_02_20_56/2.png" /&gt;&lt;/center&gt;
&lt;center&gt;&lt;img alt="" src="/article_img/webRtc_2015_04_02_20_56/3.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2&gt;时序图viso&lt;/h2&gt;
&lt;p&gt;&lt;a href="/article_img/webRtc_2015_04_02_20_56/webrtc.vsdx"&gt;下载&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Thu, 02 Apr 2015 20:56:00 +0800</pubDate><guid>tag:,2015-04-02:2015/webRtc_2015_04_02_20_56.html</guid><category>webRtc</category><category>时序图</category><category>protocol</category></item><item><title>webRtc 前端</title><link>/2015/webRtc_2015_03_16_20_20.html</link><description>&lt;h2&gt;简单说明&lt;/h2&gt;
&lt;p&gt;主要流程就是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用getUserMedia 打开摄像头；&lt;/li&gt;
&lt;li&gt;通过iceServer中设置的stun服务器来获取当前设备的网络链路信息；&lt;/li&gt;
&lt;li&gt;用PeerConnection建立p2p；&lt;/li&gt;
&lt;li&gt;如果p2p无法连通，将使用iceServer中设置的turn服务器进行数据转发，当然demo里面没设置turn服务，后面有空我再写篇turn的安装和配置，挺简单的；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;发起通话请求的用户会发送__offer(含sdp)给平台（具体见前一篇），平台转发给被请求用户。被请求用户接受的话会返回__answer(含sdp)给平台，平台呢再发送给发起请求的用户，两者确定关系后，两者通过平台交换跟自身设备相关的网络节点信息__ice_candidate，根据不同网络环境，这个交互的数量是不一定的，接下来就是设备自己去测试__ice_candidate中描述的网络节点，看走哪p2p能连通。如果都不能通就去走turn了。&lt;/p&gt;
&lt;p&gt;其实平台不是必须的，只不过去掉平台的前提是两个通话者永远知道对方的位置（ip），并且两个设备之间网络保证是互通的，否者没有信令交互就没有后面的事。&lt;/p&gt;
&lt;h2&gt;注意&lt;/h2&gt;
&lt;p&gt;截止到现在，safari、ie还不支持webRtc，不过快了，firefox里的webRtc是个半成品，并且不稳定，要用网页开发产品的话，最好是针对chrome，目前测试下来，最新版本的pc版与android版都很稳定。&lt;/p&gt;
&lt;p&gt;不过不稳定的firefox有个好处，它能拍照录音（录像能不能忘了），而chrome安全级别很高，完全不允许录音录像。&lt;/p&gt;
&lt;h2&gt;代码&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;zh-CN&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Content-Type&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/html; charset=utf-8&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;test1&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;style&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    html, body {
      width: 100%;
      height: 100%;
      margin: 0;
      padding: 0;
      background-color: #f0f0f0;
    }

    #videos {
      position: absolute;
      left: 30%;
      top: 0;
      bottom: 0;
      right: 0;
      overflow: auto;
    }

    #videos video {
      display: inline-block;
      width: 30%;
      background:&amp;quot;#000000&amp;quot;;
    }
  &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;btn&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sendtext&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sendBtn&amp;quot;&lt;/span&gt;  &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;width:50px;height:50px;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;sendtextbySocket&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&amp;lt;br/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;createPeerConnectt&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sendBtn&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;createPeerConnect&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&amp;lt;br/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sendTextByFataChannel&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sendBtn&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;sendTextByFataChannel&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;videos&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;video&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;selfVideo&amp;quot;&lt;/span&gt;   &lt;span class="err"&gt;autoplay&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/video&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;video&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;remoteVideo&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;autoplay&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/video&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;video&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;thirdRemoteVideo&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;autoplay&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/video&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
var sendtextBtn = document.getElementById(&amp;quot;sendtext&amp;quot;);
var createPeerConnectBtn = document.getElementById(&amp;quot;createPeerConnectt&amp;quot;);
var sendTextByFataChannelBtn = document.getElementById(&amp;#39;sendTextByFataChannel&amp;#39;);

var selfVideo = document.getElementById(&amp;#39;selfVideo&amp;#39;);
var remoteVideo = document.getElementById(&amp;#39;remoteVideo&amp;#39;);
var thirdRemoteVideo = document.getElementById(&amp;#39;thirdRemoteVideo&amp;#39;);



///Adaptive browser variable
var PeerConnection = (window.PeerConnection || window.webkitPeerConnection00 || window.webkitRTCPeerConnection || window.mozRTCPeerConnection);
var URL = (window.URL || window.webkitURL || window.msURL || window.oURL);
var getUserMedia = (navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia);
var nativeRTCIceCandidate = (window.mozRTCIceCandidate || window.RTCIceCandidate);
var nativeRTCSessionDescription = (window.mozRTCSessionDescription || window.RTCSessionDescription); // order is very important: &amp;quot;RTCSessionDescription&amp;quot; defined in Nighly but useless
var moz = !! navigator.mozGetUserMedia;

var BlobBuilder = window.blobBuilder || window.webKitBlobBuilder || window.mozBlobBuilder;


var iceServer = {
        &amp;quot;iceServers&amp;quot;: [{
            &amp;quot;url&amp;quot;: &amp;quot;stun:stun.ekiga.net&amp;quot;
        }]
    };
//stun.l.google.com:19302
//stun1.l.google.com:19302
//stun2.l.google.com:19302
//stun3.l.google.com:19302
//stun4.l.google.com:19302
//stun01.sipphone.com
//stun.ekiga.net
//stun.fwdnet.net
//stun.ideasip.com
//stun.iptel.org
//stun.rixtelecom.se
//stun.schlund.de
//stunserver.org
//stun.softjoys.com
//stun.voiparound.com
//stun.voipbuster.com
//stun.voipstunt.com
//stun.voxgratia.org
//stun.xten.com
//stun.voipbuster.com
//stun.wirlab.net
//stun.ideasip.com
//stun.iptel.org
//stun.schlund.de
//numb.viagenie.ca
//stun.voxgratia.org
//stun.ekiga.net
//stun.voipstunt.com
//stunserver.org


//self variable
var selfStream = null;
var selfPeerConnection = null;
var cPeerConnection = null;
var selfSession = null;
var isCaller = false;
var socket = null;
var datachannel = null;
var remoteVideoCompelet = false;
var is2C = false;



function saveAs(blob, filename) {
    var type = blob.type;
    var force_saveable_type = &amp;#39;application/octet-stream&amp;#39;;
    if (type &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; type != force_saveable_type) { // 强制下载，而非在浏览器中打开
        var slice = blob.slice || blob.webkitSlice || blob.mozSlice;
        blob = slice.call(blob, 0, blob.size, force_saveable_type);
    }

    var url = URL.createObjectURL(blob);
    var save_link = document.createElementNS(&amp;#39;http://www.w3.org/1999/xhtml&amp;#39;, &amp;#39;a&amp;#39;);
    save_link.href = url;
    save_link.download = filename;

    var event = document.createEvent(&amp;#39;MouseEvents&amp;#39;);
    event.initMouseEvent(&amp;#39;click&amp;#39;, true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
    save_link.dispatchEvent(event);
    URL.revokeObjectURL(url);
}

////peer function,and setup callback 
function createPeerConnect(){
    console.log(&amp;#39;createPeerConnect&amp;#39;);
    var constraints = {
        mandatory: {
            OfferToReceiveAudio: true,
            OfferToReceiveVideo: true 
        },
        optional:[
            {RtpDataChannels: true}
        ]
    };

    pc = new PeerConnection(iceServer,constraints);

    pc.onicecandidate = function(evt) {
        console.log(evt);

        sendSession = selfSession;
        if(is2C){
            sendSession = &amp;quot;c&amp;quot;;
        };

        if (evt.candidate){
            socket.send(JSON.stringify({
                &amp;quot;event&amp;quot;: &amp;quot;__ice_candidate&amp;quot;,
            &amp;quot;data&amp;quot;: {
          &amp;quot;candidate&amp;quot;: evt.candidate,
          &amp;quot;remoteSession&amp;quot;:sendSession
            }
         }));
         console.log(&amp;#39;onicecandidate sucess&amp;#39;);
        }else{
        console.log(&amp;#39;onicecandidate error&amp;#39;);
        };
        };

    pc.onopen = function() {
        console.log(&amp;#39;pc open&amp;#39;);
        };

    pc.onaddstream = function(event){
        console.log(&amp;#39;pc get remote stream&amp;#39;);
        v = null;
        if (!remoteVideoCompelet){
            v = remoteVideo 
            remoteVideoCompelet = true;
            console.log(&amp;#39;pc get remote stream: remoteVideo&amp;#39;);
        }else{//c
            v = thirdRemoteVideo
            console.log(&amp;#39;pc get remote stream: thirdRemoteVideo&amp;#39;);
        }
        v.src = window.URL.createObjectURL(event.stream);
        v.play();
        v.onloadedmetadata = function(e) {
      console.log(&amp;quot;Label: &amp;quot; + event.stream.label);
      console.log(&amp;quot;AudioTracks&amp;quot; , event.stream.getAudioTracks());
      console.log(&amp;quot;VideoTracks&amp;quot; , event.stream.getVideoTracks());
    };

    };

    pc.ondatachannel = function(evt) {
            console.log(&amp;#39;pc ondatachannel&amp;#39;);
        };
    return pc;
};

function closePeerConnection(pc) {
    if (!pc)return;
    pc.close();
};




////connect function to btn
sendtextBtn.onclick = function(event){
    socket.send(&amp;#39;socket sendsendsend &amp;#39;);
    console.log(&amp;#39;send&amp;#39;);
 };

 sendTextByFataChannelBtn.onclick = function(event){
    dataChannel.send(&amp;#39;dataChannel sendsendsend &amp;#39;);
    console.log(&amp;#39;dataChannel send&amp;#39;);
 };

createPeerConnectBtn.onclick = function(event){
    console.log(&amp;#39;createPeerConnectBtn.onclick&amp;#39;,getUserMedia);



    ////create and config peerConnection ,
           // &amp;quot;googNoiseReduction&amp;quot;: false
    ///at the same time,open local camera and set the stream to &amp;#39;video&amp;#39;, &amp;quot;maxAspectRatio&amp;quot;: &amp;quot;1.334&amp;quot; 
    getUserMedia.call(navigator, {
  &amp;quot;video&amp;quot;: {
        &amp;quot;mandatory&amp;quot;: { &amp;quot;minAspectRatio&amp;quot;: 2.333,&amp;quot;maxAspectRatio&amp;quot;: 2.334},
        &amp;quot;optional&amp;quot; :[
            {&amp;quot;minFrameRate&amp;quot;: 2},
          { &amp;quot;maxWidth&amp;quot;: 640 },
          { &amp;quot;maxHeigth&amp;quot;: 480}
        ]
      },
  audio:{
        mandatory: {
            googEchoCancellation: true,
            googEchoCancellation2: true,
            googAutoGainControl: true,
            googAutoGainControl2: true,
            googNoiseSuppression: true,
            googNoiseSuppression2: true,
            googHighpassFilter: true  ,
            googTypingNoiseDetection: true  
        },
        optional: [
                {adjustPeerVolume:true},
                        {peerVolumeWhenSpeaking:1},
                        {googNoiseReduction: true},
                        {googTypingNoiseDetection: true},
            {googAudioMirroring: true}
                        ]
    },
  autoAdjustMic: true,
  googCombinedAudioVideoBwe:true
    }, function(stream){
        //
      var sendOfferFn = function(desc){
          selfPeerConnection.setLocalDescription(desc);
          socket.send(JSON.stringify({ 
            &amp;quot;event&amp;quot;: &amp;quot;__offer&amp;quot;,
            &amp;quot;data&amp;quot;: {
              &amp;quot;sdp&amp;quot;: desc,
              &amp;quot;remoteSession&amp;quot;:selfSession
            }
          }));
        }
        //,
      //sendAnswerFn = function(desc){
      //    selfPeerConnection.setLocalDescription(desc);
      //    socket.send(JSON.stringify({ 
      //      &amp;quot;event&amp;quot;: &amp;quot;__answer&amp;quot;,
      //      &amp;quot;data&amp;quot;: {
      //        &amp;quot;sdp&amp;quot;: desc,
      //        &amp;quot;remoteSession&amp;quot;:selfSession
      //      }}));
    //  };
    selfStream = stream;
    console.log(&amp;quot;selfStream: &amp;quot; + selfStream);
    selfVideo.src = window.URL.createObjectURL(selfStream);
    selfVideo.volume = 0
    console.log(&amp;quot;selfVideo.src: &amp;quot; + selfVideo.src);

        selfVideo.onloadedmetadata = function(e) {
      console.log(&amp;quot;Label: &amp;quot; + selfStream.label);
      console.log(&amp;quot;AudioTracks&amp;quot; , selfStream.getAudioTracks());
      console.log(&amp;quot;VideoTracks&amp;quot; , selfStream.getVideoTracks());

    };
        //selfVideo.play();






        selfPeerConnection.addStream(selfStream);

        dataChannel = selfPeerConnection.createDataChannel(&amp;quot;label&amp;quot;);
        dataChannel.onmessage = function (event) {
        console.log(&amp;#39;dataChannel,onmessage:&amp;#39;,event.data);
        };

        if(isCaller){
        selfPeerConnection.createOffer(sendOfferFn);
    } else {
        //selfPeerConnection.createAnswer(sendAnswerFn);
    }

    },function(error){
            console.log(&amp;#39;stream errpr&amp;#39;,error);
        });
};




function StreamSave(blob) {
        var bb = new BlobBuilder;
        bb.append(&amp;#39;Hello, world!&amp;#39;);
        saveAs(bb.getBlob(&amp;#39;text/plain;charset=utf-8&amp;#39;), &amp;#39;hello world.txt&amp;#39;);
 };


///connect to server
socket = new WebSocket(&amp;#39;ws://192.168.18.53:50000&amp;#39;);
socket.onopen = function(event) {
        //sucess callback,the next action would wait for it
      console.log(&amp;#39;open&amp;#39;);

      selfPeerConnection = createPeerConnect();
        console.log(selfPeerConnection);

      //listen port and message received callback 
      socket.onmessage = function(event) {
        console.log(&amp;#39;Client received a message:&amp;#39;);
        console.log(event.data);
        try{
            var json = JSON.parse(event.data);
        }catch(e){
            console.log(&amp;#39;is no json&amp;#39;);
            return;
            }

        //junze create
            if(json.event === &amp;quot;_usersesion&amp;quot;){
                selfSession = json.data
                if(selfSession === &amp;quot;b&amp;quot; || selfSession === &amp;quot;c&amp;quot;)
                    isCaller = true
                console.log(&amp;#39;isCaller&amp;#39;,isCaller);
                return;
                };

            if( json.event === &amp;quot;__ice_candidate&amp;quot; ){
                pc = null;
                if(json.data.remoteSession === &amp;quot;c&amp;quot; &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; selfSession === &amp;quot;a&amp;quot;){
                    pc = cPeerConnection;
            }else{
                pc = selfPeerConnection;
            }
            if(pc === cPeerConnection)
                console.log(&amp;#39;pc === cPeerConnection&amp;#39;);
                console.log(cPeerConnection);

            try{
                pc.addIceCandidate(new RTCIceCandidate(json.data.candidate));
            }catch(e){
                console.log(&amp;#39;pc.addIceCandidate error&amp;#39;,e);
                console.log(&amp;#39;json.data&amp;#39;,json.data)
                console.log(&amp;#39;json.data.candidate&amp;#39;,json.data.candidate)
            }

            return;
        } 
        if( json.event === &amp;quot;__offer&amp;quot; ) {
            pc = null;
            romoteSesson = json.data.remoteSession;
            if(json.data.remoteSession === &amp;quot;c&amp;quot;){
                cPeerConnection = createPeerConnect();
                    console.log(&amp;quot;cPc:&amp;quot;,cPeerConnection);
                    pc = cPeerConnection;
                    is2C = true;
            }else{
                pc = selfPeerConnection;
            };

            if(is2C){
                sendSession = &amp;quot;c&amp;quot;;
            }else{
                sendSession = selfSession;
            };

            pc.setRemoteDescription(new RTCSessionDescription(json.data.sdp));

            sendAnswerFn = function(desc){
              pc.setLocalDescription(desc);
              socket.send(JSON.stringify({ 
                &amp;quot;event&amp;quot;: &amp;quot;__answer&amp;quot;,
                &amp;quot;data&amp;quot;: {
                  &amp;quot;sdp&amp;quot;: desc,
                  &amp;quot;remoteSession&amp;quot;:sendSession
                }}));
                };
            pc.createAnswer(sendAnswerFn);
            return;
        };

        if( json.event === &amp;quot;__answer&amp;quot;) {
            selfPeerConnection.setRemoteDescription(new RTCSessionDescription(json.data.sdp));
            return;
        };
      };
      //close connect callback
      socket.onclose = function(event) {
            console.log(&amp;#39;Client notified socket has closed&amp;#39;);
      };
      //close
      //socket.close()
    };



//var recordRTC = RecordRTC(stream, {
//    type: &amp;#39;video&amp;#39;,
//    canvas: {
//        width: 1280,
//        height: 720
//    }
//});

&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Mon, 16 Mar 2015 20:20:00 +0800</pubDate><guid>tag:,2015-03-16:2015/webRtc_2015_03_16_20_20.html</guid><category>webRtc</category><category>JavaScript</category><category>html5</category></item><item><title>webRtc 后台</title><link>/2015/webRtc_2015_03_16_20_03.html</link><description>&lt;h2&gt;简要说明&lt;/h2&gt;
&lt;p&gt;简单设立3个用户，第一个连接的是A，第二个是B，第三个是C，第四个理论不支持，但是不会出问题，只是会把C顶掉。&lt;/p&gt;
&lt;p&gt;A用户相当于最先启动视频监听的，举例子说就类似聊天室开房间并在等待的。
BC用户可以与A建立通话，
既A可以同时与BC进行通话，而bc之间信息不通。&lt;/p&gt;
&lt;p&gt;PS：当然通话功能靠前端的webRtc来提供，这个demo平台的作用仅仅用于brower间的握手信令转发。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;WebSocketServer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;require&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;websocket&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nc"&gt;.server&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;UUID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;require&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;node-uuid&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;events&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;require&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;events&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;util&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;require&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;util&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;require&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;express&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;express&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;require&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nc"&gt;.createServer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;require&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;log&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;console&lt;/span&gt;&lt;span class="nc"&gt;.log&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;demo&lt;/span&gt; &lt;span class="nt"&gt;only&lt;/span&gt; &lt;span class="nt"&gt;support&lt;/span&gt; &lt;span class="nt"&gt;3&lt;/span&gt; &lt;span class="nt"&gt;user&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;first&lt;/span&gt; &lt;span class="nt"&gt;connect&lt;/span&gt; &lt;span class="nt"&gt;user&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;and&lt;/span&gt; &lt;span class="nt"&gt;so&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt;
&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;userA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;userB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;userC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;websocket&lt;/span&gt;&lt;span class="err"&gt;用&lt;/span&gt;&lt;span class="nt"&gt;50000&lt;/span&gt;&lt;span class="err"&gt;端口&lt;/span&gt;
&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;process&lt;/span&gt;&lt;span class="nc"&gt;.env.PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nt"&gt;50000&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;server&lt;/span&gt;&lt;span class="nc"&gt;.listen&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;port&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="nc"&gt;.use&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;express&lt;/span&gt;&lt;span class="nc"&gt;.static&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;__dirname&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;

&lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="nc"&gt;.get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;function&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;req&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;res&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__dirname&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/test.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;init&lt;/span&gt; &lt;span class="nt"&gt;websocket&lt;/span&gt;
&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;thisServer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;new&lt;/span&gt; &lt;span class="nt"&gt;WebSocketServer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;httpServer&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;


&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;callback&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;socket&lt;/span&gt;
&lt;span class="nt"&gt;thisServer&lt;/span&gt;&lt;span class="nc"&gt;.on&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;connection&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;function&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;connection&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;confirm&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;code&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;user&lt;/span&gt; &lt;span class="nt"&gt;and&lt;/span&gt; &lt;span class="nt"&gt;information&lt;/span&gt; &lt;span class="nt"&gt;transfer&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;AtoB&lt;/span&gt; &lt;span class="nt"&gt;or&lt;/span&gt; &lt;span class="nt"&gt;AtoC&lt;/span&gt; &lt;span class="nt"&gt;or&lt;/span&gt; &lt;span class="nt"&gt;CtoA&lt;/span&gt; &lt;span class="nt"&gt;or&lt;/span&gt; &lt;span class="nt"&gt;BtoA&lt;/span&gt; 
&lt;span class="nt"&gt;thisServer&lt;/span&gt;&lt;span class="nc"&gt;.on&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;request&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;function&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;request&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;request&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; Connection from origin &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; Connection accepted.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userA&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;connection&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;userB&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;connection&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;userC&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;connection&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;userC&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;connection&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;this is C:&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utf8Data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="n"&gt;userA&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;connection&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendUTF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utf8Data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;C:get2 a:&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utf8Data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;tell&lt;/span&gt; &lt;span class="nt"&gt;brower&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;you are A&amp;quot;&lt;/span&gt;
            &lt;span class="nt"&gt;userC&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;connection&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="nc"&gt;.sendUTF&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;JSON&lt;/span&gt;&lt;span class="nc"&gt;.stringify&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;event&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;_usersesion&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;c&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;));&lt;/span&gt;
            &lt;span class="nt"&gt;return&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;}&lt;/span&gt;

    &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;userA&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;connection&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;userB&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;connection&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;userB&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;connection&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;B:get2 a:&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utf8Data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="n"&gt;userA&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;connection&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendUTF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utf8Data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;B:get2 2a:&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utf8Data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;tell&lt;/span&gt; &lt;span class="nt"&gt;brower&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;you are B&amp;quot;&lt;/span&gt;
        &lt;span class="nt"&gt;userB&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;connection&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="nc"&gt;.sendUTF&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;JSON&lt;/span&gt;&lt;span class="nc"&gt;.stringify&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;event&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;_usersesion&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;b&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;userA&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;connection&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;userA&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;connection&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;try&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utf8Data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;catch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;is no json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utf8Data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="n"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;json&lt;/span&gt;&lt;span class="nc"&gt;.data.remoteSession&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A:get C:&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utf8Data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="n"&gt;userC&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;connection&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendUTF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utf8Data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A:get2 b:&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utf8Data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="n"&gt;userB&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;connection&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendUTF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utf8Data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A:get2 2b:&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utf8Data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;tell&lt;/span&gt; &lt;span class="nt"&gt;brower&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;you are A&amp;quot;&lt;/span&gt;
                &lt;span class="nt"&gt;userA&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;connection&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="nc"&gt;.sendUTF&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;JSON&lt;/span&gt;&lt;span class="nc"&gt;.stringify&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;event&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;_usersesion&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;


&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Mon, 16 Mar 2015 20:03:00 +0800</pubDate><guid>tag:,2015-03-16:2015/webRtc_2015_03_16_20_03.html</guid><category>webRtc</category><category>Node.js</category><category>JavaScript</category><category>WebSocket</category></item><item><title>rfc3264</title><link>/2015/webRtc_2015_03_13_21_10.html</link><description>&lt;h2&gt;rfc3264&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Network Working Group                                       J. Rosenberg
Request for Comments: 3264                                   dynamicsoft
Obsoletes: 2543                                           H. Schulzrinne
Category: Standards Track                                    Columbia U.
                                                            June 2002
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;An Offer/Answer Model with the Session Description Protocol (SDP)&lt;/h2&gt;
&lt;p&gt;Status of this Memo&lt;/p&gt;
&lt;p&gt;This document specifies an Internet standards track protocol for the
   Internet community, and requests discussion and suggestions for
   improvements.  Please refer to the current edition of the "Internet
   Official Protocol Standards" (STD 1) for the standardization state
   and status of this protocol.  Distribution of this memo is unlimited.&lt;/p&gt;
&lt;p&gt;Copyright Notice&lt;/p&gt;
&lt;p&gt;Copyright (C) The Internet Society (2002).  All Rights Reserved.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;This document defines a mechanism by which two entities can make use
   of the Session Description Protocol (SDP) to arrive at a common view
   of a multimedia session between them.  In the model, one participant
   offers the other a description of the desired session from their
   perspective, and the other participant answers with the desired
   session from their perspective.  This offer/answer model is most
   useful in unicast sessions where information from both participants
   is needed for the complete view of the session.  The offer/answer
   model is used by protocols like the Session Initiation Protocol
   (SIP).&lt;/p&gt;
&lt;p&gt;Table of Contents&lt;/p&gt;
&lt;p&gt;1          Introduction ........................................    2&lt;br&gt;
   2          Terminology .........................................    3&lt;br&gt;
   3          Definitions .........................................    3&lt;br&gt;
   4          Protocol Operation ..................................    4&lt;br&gt;
   5          Generating the Initial Offer ........................    5&lt;br&gt;
   5.1        Unicast Streams .....................................    5&lt;br&gt;
   5.2        Multicast Streams ...................................    8&lt;br&gt;
   6          Generating the Answer ...............................    9&lt;br&gt;
   6.1        Unicast Streams .....................................    9&lt;br&gt;
   6.2        Multicast Streams ...................................   12&lt;br&gt;
   7          Offerer Processing of the Answer ....................   12&lt;br&gt;
   8          Modifying the Session ...............................   13&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Rosenberg &amp;amp; Schulzrinne     Standards Track                     [Page 1]&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;RFC 3264  An Offer/Answer Model Session Description Protocol   June 2002&lt;/p&gt;
&lt;p&gt;8.1        Adding a Media Stream ...............................   13&lt;br&gt;
   8.2        Removing a Media Stream .............................   14&lt;br&gt;
   8.3        Modifying a Media Stream ............................   14&lt;br&gt;
   8.3.1      Modifying Address, Port or Transport ................   14&lt;br&gt;
   8.3.2      Changing the Set of Media Formats ...................   15&lt;br&gt;
   8.3.3      Changing Media Types ................................   17&lt;br&gt;
   8.3.4      Changing Attributes .................................   17&lt;br&gt;
   8.4        Putting a Unicast Media Stream on Hold ..............   17&lt;br&gt;
   9          Indicating Capabilities .............................   18&lt;br&gt;
   10         Example Offer/Answer Exchanges ......................   19&lt;br&gt;
   10.1       Basic Exchange ......................................   19&lt;br&gt;
   10.2       One of N Codec Selection ............................   21&lt;br&gt;
   11         Security Considerations .............................   23&lt;br&gt;
   12         IANA Considerations .................................   23&lt;br&gt;
   13         Acknowledgements ....................................   23&lt;br&gt;
   14         Normative References ................................   23&lt;br&gt;
   15         Informative References ..............................   24&lt;br&gt;
   16         Authors' Addresses ..................................   24&lt;br&gt;
   17         Full Copyright Statement.............................   25&lt;br&gt;&lt;/p&gt;
&lt;p&gt;1 Introduction&lt;/p&gt;
&lt;p&gt;The Session Description Protocol (SDP) [1] was originally conceived
   as a way to describe multicast sessions carried on the Mbone.  The
   Session Announcement Protocol (SAP) [6] was devised as a multicast
   mechanism to carry SDP messages.  Although the SDP specification
   allows for unicast operation, it is not complete.  Unlike multicast,
   where there is a global view of the session that is used by all
   participants, unicast sessions involve two participants, and a
   complete view of the session requires information from both
   participants, and agreement on parameters between them.&lt;/p&gt;
&lt;p&gt;As an example, a multicast session requires conveying a single
   multicast address for a particular media stream.  However, for a
   unicast session, two addresses are needed - one for each participant.
   As another example, a multicast session requires an indication of
   which codecs will be used in the session.  However, for unicast, the
   set of codecs needs to be determined by finding an overlap in the set
   supported by each participant.&lt;/p&gt;
&lt;p&gt;As a result, even though SDP has the expressiveness to describe
   unicast sessions, it is missing the semantics and operational details
   of how it is actually done.  In this document, we remedy that by
   defining a simple offer/answer model based on SDP.  In this model,
   one participant in the session generates an SDP message that
   constitutes the offer - the set of media streams and codecs the
   offerer wishes to use, along with the IP addresses and ports the
   offerer would like to use to receive the media.  The offer is&lt;/p&gt;
&lt;p&gt;Rosenberg &amp;amp; Schulzrinne     Standards Track                     [Page 2]&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;RFC 3264  An Offer/Answer Model Session Description Protocol   June 2002&lt;/p&gt;
&lt;p&gt;conveyed to the other participant, called the answerer.  The answerer
   generates an answer, which is an SDP message that responds to the
   offer provided by the offerer.  The answer has a matching media
   stream for each stream in the offer, indicating whether the stream is
   accepted or not, along with the codecs that will be used and the IP
   addresses and ports that the answerer wants to use to receive media.&lt;/p&gt;
&lt;p&gt;It is also possible for a multicast session to work similar to a
   unicast one; its parameters are negotiated between a pair of users as
   in the unicast case, but both sides send packets to the same
   multicast address, rather than unicast ones.  This document also
   discusses the application of the offer/answer model to multicast
   streams.&lt;/p&gt;
&lt;p&gt;We also define guidelines for how the offer/answer model is used to
   update a session after an initial offer/answer exchange.&lt;/p&gt;
&lt;p&gt;The means by which the offers and answers are conveyed are outside
   the scope of this document.  The offer/answer model defined here is
   the mandatory baseline mechanism used by the Session Initiation
   Protocol (SIP) [7].&lt;/p&gt;
&lt;p&gt;2 Terminology&lt;/p&gt;
&lt;p&gt;In this document, the key words "MUST", "MUST NOT", "REQUIRED",
   "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
   and "OPTIONAL" are to be interpreted as described in RFC 2119 [2] and
   indicate requirement levels for compliant implementations.&lt;/p&gt;
&lt;p&gt;3 Definitions&lt;/p&gt;
&lt;p&gt;The following terms are used throughout this document:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  Agent: An agent is the protocol implementation involved in the
     offer/answer exchange.  There are two agents involved in an
     offer/answer exchange.

  Answer: An SDP message sent by an answerer in response to an offer
     received from an offerer.

  Answerer: An agent which receives a session description from
     another agent describing aspects of desired media
     communication, and then responds to that with its own session
     description.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Rosenberg &amp;amp; Schulzrinne     Standards Track                     [Page 3]&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;RFC 3264  An Offer/Answer Model Session Description Protocol   June 2002&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  Media Stream: From RTSP [8], a media stream is a single media
     instance, e.g., an audio stream or a video stream as well as a
     single whiteboard or shared application group.  In SDP, a media
     stream is described by an &amp;quot;m=&amp;quot; line and its associated
     attributes.

  Offer: An SDP message sent by an offerer.

  Offerer: An agent which generates a session description in order
     to create or modify a session.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4 Protocol Operation&lt;/p&gt;
&lt;p&gt;The offer/answer exchange assumes the existence of a higher layer
   protocol (such as SIP) which is capable of exchanging SDP for the
   purposes of session establishment between agents.&lt;/p&gt;
&lt;p&gt;Protocol operation begins when one agent sends an initial offer to
   another agent.  An offer is initial if it is outside of any context
   that may have already been established through the higher layer
   protocol.  It is assumed that the higher layer protocol provides
   maintenance of some kind of context which allows the various SDP
   exchanges to be associated together.&lt;/p&gt;
&lt;p&gt;The agent receiving the offer MAY generate an answer, or it MAY
   reject the offer.  The means for rejecting an offer are dependent on
   the higher layer protocol.  The offer/answer exchange is atomic; if
   the answer is rejected, the session reverts to the state prior to the
   offer (which may be absence of a session).&lt;/p&gt;
&lt;p&gt;At any time, either agent MAY generate a new offer that updates the
   session.  However, it MUST NOT generate a new offer if it has
   received an offer which it has not yet answered or rejected.
   Furthermore, it MUST NOT generate a new offer if it has generated a
   prior offer for which it has not yet received an answer or a
   rejection.  If an agent receives an offer after having sent one, but
   before receiving an answer to it, this is considered a "glare"
   condition.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  The term glare was originally used in circuit switched
  telecommunications networks to describe the condition where two
  switches both attempt to seize the same available circuit on the
  same trunk at the same time.  Here, it means both agents have
  attempted to send an updated offer at the same time.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Rosenberg &amp;amp; Schulzrinne     Standards Track                     [Page 4]&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;RFC 3264  An Offer/Answer Model Session Description Protocol   June 2002&lt;/p&gt;
&lt;p&gt;The higher layer protocol needs to provide a means for resolving such
   conditions.  The higher layer protocol will need to provide a means
   for ordering of messages in each direction.  SIP meets these
   requirements [7].&lt;/p&gt;
&lt;p&gt;5 Generating the Initial Offer&lt;/p&gt;
&lt;p&gt;The offer (and answer) MUST be a valid SDP message, as defined by RFC
   2327 [1], with one exception.  RFC 2327 mandates that either an e or
   a p line is present in the SDP message.  This specification relaxes
   that constraint; an SDP formulated for an offer/answer application
   MAY omit both the e and p lines.  The numeric value of the session id
   and version in the o line MUST be representable with a 64 bit signed
   integer.  The initial value of the version MUST be less than
   (2**62)-1, to avoid rollovers.  Although the SDP specification allows
   for multiple session descriptions to be concatenated together into a
   large SDP message, an SDP message used in the offer/answer model MUST
   contain exactly one session description.&lt;/p&gt;
&lt;p&gt;The SDP "s=" line conveys the subject of the session, which is
   reasonably defined for multicast, but ill defined for unicast.  For
   unicast sessions, it is RECOMMENDED that it consist of a single space
   character (0x20) or a dash (-).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  Unfortunately, SDP does not allow the &amp;quot;s=&amp;quot; line to be empty.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The SDP "t=" line conveys the time of the session.  Generally,
   streams for unicast sessions are created and destroyed through
   external signaling means, such as SIP.  In that case, the "t=" line
   SHOULD have a value of "0 0".&lt;/p&gt;
&lt;p&gt;The offer will contain zero or more media streams (each media stream
   is described by an "m=" line and its associated attributes).  Zero
   media streams implies that the offerer wishes to communicate, but
   that the streams for the session will be added at a later time
   through a modified offer.  The streams MAY be for a mix of unicast
   and multicast; the latter obviously implies a multicast address in
   the relevant "c=" line(s).&lt;/p&gt;
&lt;p&gt;Construction of each offered stream depends on whether the stream is
   multicast or unicast.&lt;/p&gt;
&lt;p&gt;5.1 Unicast Streams&lt;/p&gt;
&lt;p&gt;If the offerer wishes to only send media on a stream to its peer, it
   MUST mark the stream as sendonly with the "a=sendonly" attribute.  We
   refer to a stream as being marked with a certain direction if a
   direction attribute was present as either a media stream attribute or&lt;/p&gt;
&lt;p&gt;Rosenberg &amp;amp; Schulzrinne     Standards Track                     [Page 5]&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;RFC 3264  An Offer/Answer Model Session Description Protocol   June 2002&lt;/p&gt;
&lt;p&gt;a session attribute.  If the offerer wishes to only receive media
   from its peer, it MUST mark the stream as recvonly.  If the offerer
   wishes to communicate, but wishes to neither send nor receive media
   at this time, it MUST mark the stream with an "a=inactive" attribute.
   The inactive direction attribute is specified in RFC 3108 [3].  Note
   that in the case of the Real Time Transport Protocol (RTP) [4], RTCP
   is still sent and received for sendonly, recvonly, and inactive
   streams.  That is, the directionality of the media stream has no
   impact on the RTCP usage.  If the offerer wishes to both send and
   receive media with its peer, it MAY include an "a=sendrecv"
   attribute, or it MAY omit it, since sendrecv is the default.&lt;/p&gt;
&lt;p&gt;For recvonly and sendrecv streams, the port number and address in the
   offer indicate where the offerer would like to receive the media
   stream.  For sendonly RTP streams, the address and port number
   indirectly indicate where the offerer wants to receive RTCP reports.
   Unless there is an explicit indication otherwise, reports are sent to
   the port number one higher than the number indicated.  The IP address
   and port present in the offer indicate nothing about the source IP
   address and source port of RTP and RTCP packets that will be sent by
   the offerer.  A port number of zero in the offer indicates that the
   stream is offered but MUST NOT be used.  This has no useful semantics
   in an initial offer, but is allowed for reasons of completeness,
   since the answer can contain a zero port indicating a rejected stream
   (Section 6).  Furthermore, existing streams can be terminated by
   setting the port to zero (Section 8).  In general, a port number of
   zero indicates that the media stream is not wanted.&lt;/p&gt;
&lt;p&gt;The list of media formats for each media stream conveys two pieces of
   information, namely the set of formats (codecs and any parameters
   associated with the codec, in the case of RTP) that the offerer is
   capable of sending and/or receiving (depending on the direction
   attributes), and, in the case of RTP, the RTP payload type numbers
   used to identify those formats.  If multiple formats are listed, it
   means that the offerer is capable of making use of any of those
   formats during the session.  In other words, the answerer MAY change
   formats in the middle of the session, making use of any of the
   formats listed, without sending a new offer.  For a sendonly stream,
   the offer SHOULD indicate those formats the offerer is willing to
   send for this stream.  For a recvonly stream, the offer SHOULD
   indicate those formats the offerer is willing to receive for this
   stream.  For a sendrecv stream, the offer SHOULD indicate those
   codecs that the offerer is willing to send and receive with.&lt;/p&gt;
&lt;p&gt;For recvonly RTP streams, the payload type numbers indicate the value
   of the payload type field in RTP packets the offerer is expecting to
   receive for that codec.  For sendonly RTP streams, the payload type
   numbers indicate the value of the payload type field in RTP packets&lt;/p&gt;
&lt;p&gt;Rosenberg &amp;amp; Schulzrinne     Standards Track                     [Page 6]&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;RFC 3264  An Offer/Answer Model Session Description Protocol   June 2002&lt;/p&gt;
&lt;p&gt;the offerer is planning to send for that codec.  For sendrecv RTP
   streams, the payload type numbers indicate the value of the payload
   type field the offerer expects to receive, and would prefer to send.
   However, for sendonly and sendrecv streams, the answer might indicate
   different payload type numbers for the same codecs, in which case,
   the offerer MUST send with the payload type numbers from the answer.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  Different payload type numbers may be needed in each direction
  because of interoperability concerns with H.323.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As per RFC 2327, fmtp parameters MAY be present to provide additional
   parameters of the media format.&lt;/p&gt;
&lt;p&gt;In the case of RTP streams, all media descriptions SHOULD contain
   "a=rtpmap" mappings from RTP payload types to encodings.  If there is
   no "a=rtpmap", the default payload type mapping, as defined by the
   current profile in use (for example, RFC 1890 [5]) is to be used.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  This allows easier migration away from static payload types.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In all cases, the formats in the "m=" line MUST be listed in order of
   preference, with the first format listed being preferred.  In this
   case, preferred means that the recipient of the offer SHOULD use the
   format with the highest preference that is acceptable to it.&lt;/p&gt;
&lt;p&gt;If the ptime attribute is present for a stream, it indicates the
   desired packetization interval that the offerer would like to
   receive.  The ptime attribute MUST be greater than zero.&lt;/p&gt;
&lt;p&gt;If the bandwidth attribute is present for a stream, it indicates the
   desired bandwidth that the offerer would like to receive.  A value of
   zero is allowed, but discouraged.  It indicates that no media should
   be sent.  In the case of RTP, it would also disable all RTCP.&lt;/p&gt;
&lt;p&gt;If multiple media streams of different types are present, it means
   that the offerer wishes to use those streams at the same time.  A
   typical case is an audio and a video stream as part of a
   videoconference.&lt;/p&gt;
&lt;p&gt;If multiple media streams of the same type are present in an offer,
   it means that the offerer wishes to send (and/or receive) multiple
   streams of that type at the same time.  When sending multiple streams
   of the same type, it is a matter of local policy as to how each media
   source of that type (for example, a video camera and VCR in the case
   of video) is mapped to each stream.  When a user has a single source
   for a particular media type, only one policy makes sense: the source
   is sent to each stream of the same type.  Each stream MAY use
   different encodings.  When receiving multiple streams of the same&lt;/p&gt;
&lt;p&gt;Rosenberg &amp;amp; Schulzrinne     Standards Track                     [Page 7]&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;RFC 3264  An Offer/Answer Model Session Description Protocol   June 2002&lt;/p&gt;
&lt;p&gt;type, it is a matter of local policy as to how each stream is mapped
   to the various media sinks for that particular type (for example,
   speakers or a recording device in the case of audio).  There are a
   few constraints on the policies, however.  First, when receiving
   multiple streams of the same type, each stream MUST be mapped to at
   least one sink for the purpose of presentation to the user.  In other
   words, the intent of receiving multiple streams of the same type is
   that they should all be presented in parallel, rather than choosing
   just one.  Another constraint is that when multiple streams are
   received and sent to the same sink, they MUST be combined in some
   media specific way.  For example, in the case of two audio streams,
   the received media from each might be mapped to the speakers.  In
   that case, the combining operation would be to mix them.  In the case
   of multiple instant messaging streams, where the sink is the screen,
   the combining operation would be to present all of them to the user
   interface.  The third constraint is that if multiple sources are
   mapped to the same stream, those sources MUST be combined in some
   media specific way before they are sent on the stream.  Although
   policies beyond these constraints are flexible, an agent won't
   generally want a policy that will copy media from its sinks to its
   sources unless it is a conference server (i.e., don't copy received
   media on one stream to another stream).&lt;/p&gt;
&lt;p&gt;A typical usage example for multiple media streams of the same type
   is a pre-paid calling card application, where the user can press and
   hold the pound ("#") key at any time during a call to hangup and make
   a new call on the same card.  This requires media from the user to
   two destinations - the remote gateway, and the DTMF processing
   application which looks for the pound.  This could be accomplished
   with two media streams, one sendrecv to the gateway, and the other
   sendonly (from the perspective of the user) to the DTMF application.&lt;/p&gt;
&lt;p&gt;Once the offerer has sent the offer, it MUST be prepared to receive
   media for any recvonly streams described by that offer.  It MUST be
   prepared to send and receive media for any sendrecv streams in the
   offer, and send media for any sendonly streams in the offer (of
   course, it cannot actually send until the peer provides an answer
   with the needed address and port information).  In the case of RTP,
   even though it may receive media before the answer arrives, it will
   not be able to send RTCP receiver reports until the answer arrives.&lt;/p&gt;
&lt;p&gt;5.2 Multicast Streams&lt;/p&gt;
&lt;p&gt;If a session description contains a multicast media stream which is
   listed as receive (send) only, it means that the participants,
   including the offerer and answerer, can only receive (send) on that
   stream.  This differs from the unicast view, where the directionality
   refers to the flow of media between offerer and answerer.&lt;/p&gt;
&lt;p&gt;Rosenberg &amp;amp; Schulzrinne     Standards Track                     [Page 8]&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;RFC 3264  An Offer/Answer Model Session Description Protocol   June 2002&lt;/p&gt;
&lt;p&gt;Beyond that clarification, the semantics of an offered multicast
   stream are exactly as described in RFC 2327 [1].&lt;/p&gt;
&lt;p&gt;6 Generating the Answer&lt;/p&gt;
&lt;p&gt;The answer to an offered session description is based on the offered
   session description.  If the answer is different from the offer in
   any way (different IP addresses, ports, etc.), the origin line MUST
   be different in the answer, since the answer is generated by a
   different entity.  In that case, the version number in the "o=" line
   of the answer is unrelated to the version number in the o line of the
   offer.&lt;/p&gt;
&lt;p&gt;For each "m=" line in the offer, there MUST be a corresponding "m="
   line in the answer.  The answer MUST contain exactly the same number
   of "m=" lines as the offer.  This allows for streams to be matched up
   based on their order.  This implies that if the offer contained zero
   "m=" lines, the answer MUST contain zero "m=" lines.&lt;/p&gt;
&lt;p&gt;The "t=" line in the answer MUST equal that of the offer.  The time
   of the session cannot be negotiated.&lt;/p&gt;
&lt;p&gt;An offered stream MAY be rejected in the answer, for any reason.  If
   a stream is rejected, the offerer and answerer MUST NOT generate
   media (or RTCP packets) for that stream.  To reject an offered
   stream, the port number in the corresponding stream in the answer
   MUST be set to zero.  Any media formats listed are ignored.  At least
   one MUST be present, as specified by SDP.&lt;/p&gt;
&lt;p&gt;Constructing an answer for each offered stream differs for unicast
   and multicast.&lt;/p&gt;
&lt;p&gt;6.1 Unicast Streams&lt;/p&gt;
&lt;p&gt;If a stream is offered with a unicast address, the answer for that
   stream MUST contain a unicast address.  The media type of the stream
   in the answer MUST match that of the offer.&lt;/p&gt;
&lt;p&gt;If a stream is offered as sendonly, the corresponding stream MUST be
   marked as recvonly or inactive in the answer.  If a media stream is
   listed as recvonly in the offer, the answer MUST be marked as
   sendonly or inactive in the answer.  If an offered media stream is
   listed as sendrecv (or if there is no direction attribute at the
   media or session level, in which case the stream is sendrecv by
   default), the corresponding stream in the answer MAY be marked as
   sendonly, recvonly, sendrecv, or inactive.  If an offered media
   stream is listed as inactive, it MUST be marked as inactive in the
   answer.&lt;/p&gt;
&lt;p&gt;Rosenberg &amp;amp; Schulzrinne     Standards Track                     [Page 9]&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;RFC 3264  An Offer/Answer Model Session Description Protocol   June 2002&lt;/p&gt;
&lt;p&gt;For streams marked as recvonly in the answer, the "m=" line MUST
   contain at least one media format the answerer is willing to receive
   with from amongst those listed in the offer.  The stream MAY indicate
   additional media formats, not listed in the corresponding stream in
   the offer, that the answerer is willing to receive.  For streams
   marked as sendonly in the answer, the "m=" line MUST contain at least
   one media format the answerer is willing to send from amongst those
   listed in the offer.  For streams marked as sendrecv in the answer,
   the "m=" line MUST contain at least one codec the answerer is willing
   to both send and receive, from amongst those listed in the offer.
   The stream MAY indicate additional media formats, not listed in the
   corresponding stream in the offer, that the answerer is willing to
   send or receive (of course, it will not be able to send them at this
   time, since it was not listed in the offer).  For streams marked as
   inactive in the answer, the list of media formats is constructed
   based on the offer.  If the offer was sendonly, the list is
   constructed as if the answer were recvonly.  Similarly, if the offer
   was recvonly, the list is constructed as if the answer were sendonly,
   and if the offer was sendrecv, the list is constructed as if the
   answer were sendrecv.  If the offer was inactive, the list is
   constructed as if the offer were actually sendrecv and the answer
   were sendrecv.&lt;/p&gt;
&lt;p&gt;The connection address and port in the answer indicate the address
   where the answerer wishes to receive media (in the case of RTP, RTCP
   will be received on the port which is one higher unless there is an
   explicit indication otherwise).  This address and port MUST be
   present even for sendonly streams; in the case of RTP, the port one
   higher is still used to receive RTCP.&lt;/p&gt;
&lt;p&gt;In the case of RTP, if a particular codec was referenced with a
   specific payload type number in the offer, that same payload type
   number SHOULD be used for that codec in the answer.  Even if the same
   payload type number is used, the answer MUST contain rtpmap
   attributes to define the payload type mappings for dynamic payload
   types, and SHOULD contain mappings for static payload types.  The
   media formats in the "m=" line MUST be listed in order of preference,
   with the first format listed being preferred.  In this case,
   preferred means that the offerer SHOULD use the format with the
   highest preference from the answer.&lt;/p&gt;
&lt;p&gt;Although the answerer MAY list the formats in their desired order of
   preference, it is RECOMMENDED that unless there is a specific reason,
   the answerer list formats in the same relative order they were
   present in the offer.  In other words, if a stream in the offer lists
   audio codecs 8, 22 and 48, in that order, and the answerer only
   supports codecs 8 and 48, it is RECOMMENDED that, if the answerer has&lt;/p&gt;
&lt;p&gt;Rosenberg &amp;amp; Schulzrinne     Standards Track                    [Page 10]&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;RFC 3264  An Offer/Answer Model Session Description Protocol   June 2002&lt;/p&gt;
&lt;p&gt;no reason to change it, the ordering of codecs in the answer be 8,
   48, and not 48, 8.  This helps assure that the same codec is used in
   both directions.&lt;/p&gt;
&lt;p&gt;The interpretation of fmtp parameters in an offer depends on the
   parameters.  In many cases, those parameters describe specific
   configurations of the media format, and should therefore be processed
   as the media format value itself would be.  This means that the same
   fmtp parameters with the same values MUST be present in the answer if
   the media format they describe is present in the answer.  Other fmtp
   parameters are more like parameters, for which it is perfectly
   acceptable for each agent to use different values.  In that case, the
   answer MAY contain fmtp parameters, and those MAY have the same
   values as those in the offer, or they MAY be different.  SDP
   extensions that define new parameters SHOULD specify the proper
   interpretation in offer/answer.&lt;/p&gt;
&lt;p&gt;The answerer MAY include a non-zero ptime attribute for any media
   stream; this indicates the packetization interval that the answerer
   would like to receive.  There is no requirement that the
   packetization interval be the same in each direction for a particular
   stream.&lt;/p&gt;
&lt;p&gt;The answerer MAY include a bandwidth attribute for any media stream;
   this indicates the bandwidth that the answerer would like the offerer
   to use when sending media.  The value of zero is allowed, interpreted
   as described in Section 5.&lt;/p&gt;
&lt;p&gt;If the answerer has no media formats in common for a particular
   offered stream, the answerer MUST reject that media stream by setting
   the port to zero.&lt;/p&gt;
&lt;p&gt;If there are no media formats in common for all streams, the entire
   offered session is rejected.&lt;/p&gt;
&lt;p&gt;Once the answerer has sent the answer, it MUST be prepared to receive
   media for any recvonly streams described by that answer.  It MUST be
   prepared to send and receive media for any sendrecv streams in the
   answer, and it MAY send media immediately.  The answerer MUST be
   prepared to receive media for recvonly or sendrecv streams using any
   media formats listed for those streams in the answer, and it MAY send
   media immediately.  When sending media, it SHOULD use a packetization
   interval equal to the value of the ptime attribute in the offer, if
   any was present.  It SHOULD send media using a bandwidth no higher
   than the value of the bandwidth attribute in the offer, if any was
   present.  The answerer MUST send using a media format in the offer
   that is also listed in the answer, and SHOULD send using the most
   preferred media format in the offer that is also listed in the&lt;/p&gt;
&lt;p&gt;Rosenberg &amp;amp; Schulzrinne     Standards Track                    [Page 11]&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;RFC 3264  An Offer/Answer Model Session Description Protocol   June 2002&lt;/p&gt;
&lt;p&gt;answer.  In the case of RTP, it MUST use the payload type numbers
   from the offer, even if they differ from those in the answer.&lt;/p&gt;
&lt;p&gt;6.2 Multicast Streams&lt;/p&gt;
&lt;p&gt;Unlike unicast, where there is a two-sided view of the stream, there
   is only a single view of the stream for multicast.  As such,
   generating an answer to a multicast offer generally involves
   modifying a limited set of aspects of the stream.&lt;/p&gt;
&lt;p&gt;If a multicast stream is accepted, the address and port information
   in the answer MUST match that of the offer.  Similarly, the
   directionality information in the answer (sendonly, recvonly, or
   sendrecv) MUST equal that of the offer.  This is because all
   participants in a multicast session need to have equivalent views of
   the parameters of the session, an underlying assumption of the
   multicast bias of RFC 2327.&lt;/p&gt;
&lt;p&gt;The set of media formats in the answer MUST be equal to or be a
   subset of those in the offer.  Removing a format is a way for the
   answerer to indicate that the format is not supported.&lt;/p&gt;
&lt;p&gt;The ptime and bandwidth attributes in the answer MUST equal the ones
   in the offer, if present.  If not present, a non-zero ptime MAY be
   added to the answer.&lt;/p&gt;
&lt;p&gt;7 Offerer Processing of the Answer&lt;/p&gt;
&lt;p&gt;When the offerer receives the answer, it MAY send media on the
   accepted stream(s) (assuming it is listed as sendrecv or recvonly in
   the answer).  It MUST send using a media format listed in the answer,
   and it SHOULD use the first media format listed in the answer when it
   does send.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  The reason this is a SHOULD, and not a MUST (its also a SHOULD,
  and not a MUST, for the answerer), is because there will
  oftentimes be a need to change codecs on the fly.  For example,
  during silence periods, an agent might like to switch to a comfort
  noise codec.  Or, if the user presses a number on the keypad, the
  agent might like to send that using RFC 2833 [9].  Congestion
  control might necessitate changing to a lower rate codec based on
  feedback.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The offerer SHOULD send media according to the value of any ptime and
   bandwidth attribute in the answer.&lt;/p&gt;
&lt;p&gt;The offerer MAY immediately cease listening for media formats that
   were listed in the initial offer, but not present in the answer.&lt;/p&gt;
&lt;p&gt;Rosenberg &amp;amp; Schulzrinne     Standards Track                    [Page 12]&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;RFC 3264  An Offer/Answer Model Session Description Protocol   June 2002&lt;/p&gt;
&lt;p&gt;8 Modifying the Session&lt;/p&gt;
&lt;p&gt;At any point during the session, either participant MAY issue a new
   offer to modify characteristics of the session.  It is fundamental to
   the operation of the offer/answer model that the exact same
   offer/answer procedure defined above is used for modifying parameters
   of an existing session.&lt;/p&gt;
&lt;p&gt;The offer MAY be identical to the last SDP provided to the other
   party (which may have been provided in an offer or an answer), or it
   MAY be different.  We refer to the last SDP provided as the "previous
   SDP".  If the offer is the same, the answer MAY be the same as the
   previous SDP from the answerer, or it MAY be different.  If the
   offered SDP is different from the previous SDP, some constraints are
   placed on its construction, discussed below.&lt;/p&gt;
&lt;p&gt;Nearly all aspects of the session can be modified.  New streams can
   be added, existing streams can be deleted, and parameters of existing
   streams can change.  When issuing an offer that modifies the session,
   the "o=" line of the new SDP MUST be identical to that in the
   previous SDP, except that the version in the origin field MUST
   increment by one from the previous SDP.  If the version in the origin
   line does not increment, the SDP MUST be identical to the SDP with
   that version number.  The answerer MUST be prepared to receive an
   offer that contains SDP with a version that has not changed; this is
   effectively a no-op.  However, the answerer MUST generate a valid
   answer (which MAY be the same as the previous SDP from the answerer,
   or MAY be different), according to the procedures defined in Section
   6.&lt;/p&gt;
&lt;p&gt;If an SDP is offered, which is different from the previous SDP, the
   new SDP MUST have a matching media stream for each media stream in
   the previous SDP.  In other words, if the previous SDP had N "m="
   lines, the new SDP MUST have at least N "m=" lines.  The i-th media
   stream in the previous SDP, counting from the top, matches the i-th
   media stream in the new SDP, counting from the top.  This matching is
   necessary in order for the answerer to determine which stream in the
   new SDP corresponds to a stream in the previous SDP.  Because of
   these requirements, the number of "m=" lines in a stream never
   decreases, but either stays the same or increases.  Deleted media
   streams from a previous SDP MUST NOT be removed in a new SDP;
   however, attributes for these streams need not be present.&lt;/p&gt;
&lt;p&gt;8.1 Adding a Media Stream&lt;/p&gt;
&lt;p&gt;New media streams are created by new additional media descriptions
   below the existing ones, or by reusing the "slot" used by an old
   media stream which had been disabled by setting its port to zero.&lt;/p&gt;
&lt;p&gt;Rosenberg &amp;amp; Schulzrinne     Standards Track                    [Page 13]&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;RFC 3264  An Offer/Answer Model Session Description Protocol   June 2002&lt;/p&gt;
&lt;p&gt;Reusing its slot means that the new media description replaces the
   old one, but retains its positioning relative to other media
   descriptions in  the SDP.  New media descriptions MUST appear below
   any existing media sections.  The rules for formatting these media
   descriptions are identical to those described in Section 5.&lt;/p&gt;
&lt;p&gt;When the answerer receives an SDP with more media descriptions than
   the previous SDP from the offerer, or it receives an SDP with a media
   stream in a slot where the port was previously zero, the answerer
   knows that new media streams are being added.  These can be rejected
   or accepted by placing an appropriately structured media description
   in the answer.  The procedures for constructing the new media
   description in the answer are described in Section 6.&lt;/p&gt;
&lt;p&gt;8.2 Removing a Media Stream&lt;/p&gt;
&lt;p&gt;Existing media streams are removed by creating a new SDP with the
   port number for that stream set to zero.  The stream description MAY
   omit all attributes present previously, and MAY list just a single
   media format.&lt;/p&gt;
&lt;p&gt;A stream that is offered with a port of zero MUST be marked with port
   zero in the answer.  Like the offer, the answer MAY omit all
   attributes present previously, and MAY list just a single media
   format from amongst those in the offer.&lt;/p&gt;
&lt;p&gt;Removal of a media stream implies that media is no longer sent for
   that stream, and any media that is received is discarded.  In the
   case of RTP, RTCP transmission also ceases, as does processing of any
   received RTCP packets.  Any resources associated with it can be
   released.  The user interface might indicate that the stream has
   terminated, by closing the associated window on a PC, for example.&lt;/p&gt;
&lt;p&gt;8.3 Modifying a Media Stream&lt;/p&gt;
&lt;p&gt;Nearly all characteristics of a media stream can be modified.&lt;/p&gt;
&lt;p&gt;8.3.1 Modifying Address, Port or Transport&lt;/p&gt;
&lt;p&gt;The port number for a stream MAY be changed.  To do this, the offerer
   creates a new media description, with the port number in the m line
   different from the corresponding stream in the previous SDP.  If only
   the port number is to be changed, the rest of the media stream
   description SHOULD remain unchanged.  The offerer MUST be prepared to
   receive media on both the old and new ports as soon as the offer is
   sent.  The offerer SHOULD NOT cease listening for media on the old
   port until the answer is received and media arrives on the new port.
   Doing so could result in loss of media during the transition.&lt;/p&gt;
&lt;p&gt;Rosenberg &amp;amp; Schulzrinne     Standards Track                    [Page 14]&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;RFC 3264  An Offer/Answer Model Session Description Protocol   June 2002&lt;/p&gt;
&lt;p&gt;Received, in this case, means that the media is passed to a media
   sink.  This means that if there is a playout buffer, the agent would
   continue to listen on the old port until the media on the new port
   reached the top of the playout buffer.  At that time, it MAY cease
   listening for media on the old port.&lt;/p&gt;
&lt;p&gt;The corresponding media stream in the answer MAY be the same as the
   stream in the previous SDP from the answerer, or it MAY be different.
   If the updated stream is accepted by the answerer, the answerer
   SHOULD begin sending traffic for that stream to the new port
   immediately.  If the answerer changes the port from the previous SDP,
   it MUST be prepared to receive media on both the old and new ports as
   soon as the answer is sent.  The answerer MUST NOT cease listening
   for media on the old port until media arrives on the new port.  At
   that time, it MAY cease listening for media on the old port.  The
   same is true for an offerer that sends an updated offer with a new
   port; it MUST NOT cease listening for media on the old port until
   media arrives on the new port.&lt;/p&gt;
&lt;p&gt;Of course, if the offered stream is rejected, the offerer can cease
   being prepared to receive using the new port as soon as the rejection
   is received.&lt;/p&gt;
&lt;p&gt;To change the IP address where media is sent to, the same procedure
   is followed for changing the port number.  The only difference is
   that the connection line is updated, not the port number.&lt;/p&gt;
&lt;p&gt;The transport for a stream MAY be changed.  The process for doing
   this is identical to changing the port, except the transport is
   updated, not the port.&lt;/p&gt;
&lt;p&gt;8.3.2 Changing the Set of Media Formats&lt;/p&gt;
&lt;p&gt;The list of media formats used in the session MAY be changed.  To do
   this, the offerer creates a new media description, with the list of
   media formats in the "m=" line different from the corresponding media
   stream in the previous SDP.  This list MAY include new formats, and
   MAY remove formats present from the previous SDP.  However, in the
   case of RTP, the mapping from a particular dynamic payload type
   number to a particular codec within that media stream MUST NOT change
   for the duration of a session.  For example, if A generates an offer
   with G.711 assigned to dynamic payload type number 46, payload type
   number 46 MUST refer to G.711 from that point forward in any offers
   or answers for that media stream within the session.  However, it is
   acceptable for multiple payload type numbers to be mapped to the same
   codec, so that an updated offer could also use payload type number 72
   for G.711.&lt;/p&gt;
&lt;p&gt;Rosenberg &amp;amp; Schulzrinne     Standards Track                    [Page 15]&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;RFC 3264  An Offer/Answer Model Session Description Protocol   June 2002&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  The mappings need to remain fixed for the duration of the session
  because of the loose synchronization between signaling exchanges
  of SDP and the media stream.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The corresponding media stream in the answer is formulated as
   described in Section 6, and may result in a change in media formats
   as well.  Similarly, as described in Section 6, as soon as it sends
   its answer, the answerer MUST begin sending media using any formats
   in the offer that were also present in the answer, and SHOULD use the
   most preferred format in the offer that was also listed in the answer
   (assuming the stream allows for sending), and MUST NOT send using any
   formats that are not in the offer, even if they were present in a
   previous SDP from the peer.  Similarly, when the offerer receives the
   answer, it MUST begin sending media using any formats in the answer,
   and SHOULD use the most preferred one (assuming the stream allows for
   sending), and MUST NOT send using any formats that are not in the
   answer, even if they were present in a previous SDP from the peer.&lt;/p&gt;
&lt;p&gt;When an agent ceases using a media format (by not listing that format
   in an offer or answer, even though it was in a previous SDP) the
   agent will still need to be prepared to receive media with that
   format for a brief time.  How does it know when it can be prepared to
   stop receiving with that format? If it needs to know, there are three
   techniques that can be applied.  First, the agent can change ports in
   addition to changing formats.  When media arrives on the new port, it
   knows that the peer has ceased sending with the old format, and it
   can cease being prepared to receive with it.  This approach has the
   benefit of being media format independent.  However, changes in ports
   may require changes in resource reservation or rekeying of security
   protocols.  The second approach is to use a totally new set of
   dynamic payload types for all codecs when one is discarded.  When
   media is received with one of the new payload types, the agent knows
   that the peer has ceased sending with the old format.  This approach
   doesn't affect reservations or security contexts, but it is RTP
   specific and wasteful of a very small payload type space.  A third
   approach is to use a timer.  When the SDP from the peer is received,
   the timer is set.  When it fires, the agent can cease being prepared
   to receive with the old format.  A value of one minute would
   typically be more than sufficient.  In some cases, an agent may not
   care, and thus continually be prepared to receive with the old
   formats.  Nothing need be done in this case.&lt;/p&gt;
&lt;p&gt;Of course, if the offered stream is rejected, the offer can cease
   being prepared to receive using any new formats as soon as the
   rejection is received.&lt;/p&gt;
&lt;p&gt;Rosenberg &amp;amp; Schulzrinne     Standards Track                    [Page 16]&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;RFC 3264  An Offer/Answer Model Session Description Protocol   June 2002&lt;/p&gt;
&lt;p&gt;8.3.3 Changing Media Types&lt;/p&gt;
&lt;p&gt;The media type (audio, video, etc.) for a stream MAY be changed.  It
   is RECOMMENDED that the media type be changed (as opposed to adding a
   new stream), when the same logical data is being conveyed, but just
   in a different media format.  This is particularly useful for
   changing between voiceband fax and fax in a single stream, which are
   both separate media types.  To do this, the offerer creates a new
   media description, with a new media type, in place of the description
   in the previous SDP which is to be changed.&lt;/p&gt;
&lt;p&gt;The corresponding media stream in the answer is formulated as
   described in Section 6.  Assuming the stream is acceptable, the
   answerer SHOULD begin sending with the new media type and formats as
   soon as it receives the offer. The offerer MUST be prepared to
   receive media with both the old and new types until the answer is
   received, and media with the new type is received and reaches the top
   of the playout buffer.&lt;/p&gt;
&lt;p&gt;8.3.4 Changing Attributes&lt;/p&gt;
&lt;p&gt;Any other attributes in a media description MAY be updated in an
   offer or answer.  Generally, an agent MUST send media (if the
   directionality of the stream allows) using the new parameters once
   the SDP with the change is received.&lt;/p&gt;
&lt;p&gt;8.4 Putting a Unicast Media Stream on Hold&lt;/p&gt;
&lt;p&gt;If a party in a call wants to put the other party "on hold", i.e.,
   request that it temporarily stops sending one or more unicast media
   streams, a party offers the other an updated SDP.&lt;/p&gt;
&lt;p&gt;If the stream to be placed on hold was previously a sendrecv media
   stream, it is placed on hold by marking it as sendonly.  If the
   stream to be placed on hold was previously a recvonly media stream,
   it is placed on hold by marking it inactive.&lt;/p&gt;
&lt;p&gt;This means that a stream is placed "on hold" separately in each
   direction.  Each stream is placed "on hold" independently.  The
   recipient of an offer for a stream on-hold SHOULD NOT automatically
   return an answer with the corresponding stream on hold.  An SDP with
   all streams "on hold" is referred to as held SDP.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  Certain third party call control scenarios do not work when an
  answerer responds to held SDP with held SDP.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Rosenberg &amp;amp; Schulzrinne     Standards Track                    [Page 17]&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;RFC 3264  An Offer/Answer Model Session Description Protocol   June 2002&lt;/p&gt;
&lt;p&gt;Typically, when a user "presses" hold, the agent will generate an
   offer with all streams in the SDP indicating a direction of sendonly,
   and it will also locally mute, so that no media is sent to the far
   end, and no media is played out.&lt;/p&gt;
&lt;p&gt;RFC 2543 [10] specified that placing a user on hold was accomplished
   by setting the connection address to 0.0.0.0.  Its usage for putting
   a call on hold is no longer recommended, since it doesn't allow for
   RTCP to be used with held streams, doesn't work with IPv6, and breaks
   with connection oriented media.  However, it can be useful in an
   initial offer when the offerer knows it wants to use a particular set
   of media streams and formats, but doesn't know the addresses and
   ports at the time of the offer.  Of course, when used, the port
   number MUST NOT be zero, which would specify that the stream has been
   disabled.  An agent MUST be capable of receiving SDP with a
   connection address of 0.0.0.0, in which case it means that neither
   RTP nor RTCP should be sent to the peer.&lt;/p&gt;
&lt;p&gt;9 Indicating Capabilities&lt;/p&gt;
&lt;p&gt;Before an agent sends an offer, it is helpful to know if the media
   formats in that offer would be acceptable to the answerer.  Certain
   protocols, like SIP, provide a means to query for such capabilities.
   SDP can be used in responses to such queries to indicate
   capabilities.  This section describes how such an SDP message is
   formatted.  Since SDP has no way to indicate that the message is for
   the purpose of capability indication, this is determined from the
   context of the higher layer protocol.  The ability of baseline SDP to
   indicate capabilities is very limited.  It cannot express allowed
   parameter ranges or values, and can not be done in parallel with an
   offer/answer itself.  Extensions might address such limitations in
   the future.&lt;/p&gt;
&lt;p&gt;An SDP constructed to indicate media capabilities is structured as
   follows.  It MUST be a valid SDP, except that it MAY omit both "e="
   and "p=" lines.  The "t=" line MUST be equal to "0 0".  For each
   media type supported by the agent, there MUST be a corresponding
   media description of that type.  The session ID in the origin field
   MUST be unique for each SDP constructed to indicate media
   capabilities.  The port MUST be set to zero, but the connection
   address is arbitrary.  The usage of port zero makes sure that an SDP
   formatted for capabilities does not cause media streams to be
   established if it is interpreted as an offer or answer.&lt;/p&gt;
&lt;p&gt;The transport component of the "m=" line indicates the transport for
   that media type.  For each media format of that type supported by the
   agent, there SHOULD be a media format listed in the "m=" line.  In
   the case of RTP, if dynamic payload types are used, an rtpmap&lt;/p&gt;
&lt;p&gt;Rosenberg &amp;amp; Schulzrinne     Standards Track                    [Page 18]&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;RFC 3264  An Offer/Answer Model Session Description Protocol   June 2002&lt;/p&gt;
&lt;p&gt;attribute MUST be present to bind the type to a specific format.
   There is no way to indicate constraints, such as how many
   simultaneous streams can be supported for a particular codec, and so
   on.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;   v=0
   o=carol 28908764872 28908764872 IN IP4 100.3.6.6
   s=-
   t=0 0
   c=IN IP4 192.0.2.4
   m=audio 0 RTP/AVP 0 1 3
   a=rtpmap:0 PCMU/8000
   a=rtpmap:1 1016/8000
   a=rtpmap:3 GSM/8000
   m=video 0 RTP/AVP 31 34
   a=rtpmap:31 H261/90000
   a=rtpmap:34 H263/90000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Figure 1: SDP Indicating Capabilities&lt;/p&gt;
&lt;p&gt;The SDP of Figure 1 indicates that the agent can support three audio
   codecs (PCMU, 1016, and GSM) and two video codecs (H.261 and H.263).&lt;/p&gt;
&lt;p&gt;10 Example Offer/Answer Exchanges&lt;/p&gt;
&lt;p&gt;This section provides example offer/answer exchanges.&lt;/p&gt;
&lt;p&gt;10.1 Basic Exchange&lt;/p&gt;
&lt;p&gt;Assume that the caller, Alice, has included the following description
   in her offer.  It includes a bidirectional audio stream and two
   bidirectional video streams, using H.261 (payload type 31) and MPEG
   (payload type 32).  The offered SDP is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;   v=0
   o=alice 2890844526 2890844526 IN IP4 host.anywhere.com
   s=
   c=IN IP4 host.anywhere.com
   t=0 0
   m=audio 49170 RTP/AVP 0
   a=rtpmap:0 PCMU/8000
   m=video 51372 RTP/AVP 31
   a=rtpmap:31 H261/90000
   m=video 53000 RTP/AVP 32
   a=rtpmap:32 MPV/90000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Rosenberg &amp;amp; Schulzrinne     Standards Track                    [Page 19]&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;RFC 3264  An Offer/Answer Model Session Description Protocol   June 2002&lt;/p&gt;
&lt;p&gt;The callee, Bob, does not want to receive or send the first video
   stream, so he returns the SDP below as the answer:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;   v=0
   o=bob 2890844730 2890844730 IN IP4 host.example.com
   s=
   c=IN IP4 host.example.com
   t=0 0
   m=audio 49920 RTP/AVP 0
   a=rtpmap:0 PCMU/8000
   m=video 0 RTP/AVP 31
   m=video 53000 RTP/AVP 32
   a=rtpmap:32 MPV/90000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At some point later, Bob decides to change the port where he will
   receive the audio stream (from 49920 to 65422), and at the same time,
   add an additional audio stream as receive only, using the RTP payload
   format for events [9].  Bob offers the following SDP in the offer:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;   v=0
   o=bob 2890844730 2890844731 IN IP4 host.example.com
   s=
   c=IN IP4 host.example.com
   t=0 0
   m=audio 65422 RTP/AVP 0
   a=rtpmap:0 PCMU/8000
   m=video 0 RTP/AVP 31
   m=video 53000 RTP/AVP 32
   a=rtpmap:32 MPV/90000
   m=audio 51434 RTP/AVP 110
   a=rtpmap:110 telephone-events/8000
   a=recvonly
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Rosenberg &amp;amp; Schulzrinne     Standards Track                    [Page 20]&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;RFC 3264  An Offer/Answer Model Session Description Protocol   June 2002&lt;/p&gt;
&lt;p&gt;Alice accepts the additional media stream, and so generates the
   following answer:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;   v=0
   o=alice 2890844526 2890844527 IN IP4 host.anywhere.com
   s=
   c=IN IP4 host.anywhere.com
   t=0 0
   m=audio 49170 RTP/AVP 0
   a=rtpmap:0 PCMU/8000
   m=video 0 RTP/AVP 31
   a=rtpmap:31 H261/90000
   m=video 53000 RTP/AVP 32
   a=rtpmap:32 MPV/90000
   m=audio 53122 RTP/AVP 110
   a=rtpmap:110 telephone-events/8000
   a=sendonly
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;10.2 One of N Codec Selection&lt;/p&gt;
&lt;p&gt;A common occurrence in embedded phones is that the Digital Signal
   Processor (DSP) used for compression can support multiple codecs at a
   time, but once that codec is selected, it cannot be readily changed
   on the fly.  This example shows how a session can be set up using an
   initial offer/answer exchange, followed immediately by a second one
   to lock down the set of codecs.&lt;/p&gt;
&lt;p&gt;The initial offer from Alice to Bob indicates a single audio stream
   with the three audio codecs that are available in the DSP.  The
   stream is marked as inactive, since media cannot be received until a
   codec is locked down:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;   v=0
   o=alice 2890844526 2890844526 IN IP4 host.anywhere.com
   s=
   c=IN IP4 host.anywhere.com
   t=0 0
   m=audio 62986 RTP/AVP 0 4 18
   a=rtpmap:0 PCMU/8000
   a=rtpmap:4 G723/8000
   a=rtpmap:18 G729/8000
   a=inactive
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Rosenberg &amp;amp; Schulzrinne     Standards Track                    [Page 21]&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;RFC 3264  An Offer/Answer Model Session Description Protocol   June 2002&lt;/p&gt;
&lt;p&gt;Bob can support dynamic switching between PCMU and G.723.  So, he
   sends the following answer:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;   v=0
   o=bob 2890844730 2890844731 IN IP4 host.example.com
   s=
   c=IN IP4 host.example.com
   t=0 0
   m=audio 54344 RTP/AVP 0 4
   a=rtpmap:0 PCMU/8000
   a=rtpmap:4 G723/8000
   a=inactive
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Alice can then select any one of these two codecs.  So, she sends an
   updated offer with a sendrecv stream:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;   v=0
   o=alice 2890844526 2890844527 IN IP4 host.anywhere.com
   s=
   c=IN IP4 host.anywhere.com
   t=0 0
   m=audio 62986 RTP/AVP 4
   a=rtpmap:4 G723/8000
   a=sendrecv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Bob accepts the single codec:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;   v=0
   o=bob 2890844730 2890844732 IN IP4 host.example.com
   s=
   c=IN IP4 host.example.com
   t=0 0
   m=audio 54344 RTP/AVP 4
   a=rtpmap:4 G723/8000
   a=sendrecv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the answerer (Bob), was only capable of supporting one-of-N
   codecs, Bob would select one of the codecs from the offer, and place
   that in his answer. In this case, Alice would do a re-INVITE to
   activate that stream with that codec.&lt;/p&gt;
&lt;p&gt;As an alternative to using "a=inactive" in the first exchange, Alice
   can list all codecs, and as soon as she receives media from Bob,
   generate an updated offer locking down the codec to the one just
   received. Of course, if Bob only supports one-of-N codecs, there
   would only be one codec in his answer, and in this case, there is no
   need for a re-INVITE to lock down to a single codec.&lt;/p&gt;
&lt;p&gt;Rosenberg &amp;amp; Schulzrinne     Standards Track                    [Page 22]&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;RFC 3264  An Offer/Answer Model Session Description Protocol   June 2002&lt;/p&gt;
&lt;p&gt;11 Security Considerations&lt;/p&gt;
&lt;p&gt;There are numerous attacks possible if an attacker can modify offers
   or answers in transit.  Generally, these include diversion of media
   streams (enabling eavesdropping), disabling of calls, and injection
   of unwanted media streams.  If a passive listener can construct fake
   offers, and inject those into an exchange, similar attacks are
   possible.  Even if an attacker can simply observe offers and answers,
   they can inject media streams into an existing conversation.&lt;/p&gt;
&lt;p&gt;Offer/answer relies on transport within an application signaling
   protocol, such as SIP.  It also relies on that protocol for security
   capabilities.  Because of the attacks described above, that protocol
   MUST provide a means for end-to-end authentication and integrity
   protection of offers and answers.  It SHOULD offer encryption of
   bodies to prevent eavesdropping.  However, media injection attacks
   can alternatively be resolved through authenticated media exchange,
   and therefore the encryption requirement is a SHOULD instead of a
   MUST.&lt;/p&gt;
&lt;p&gt;Replay attacks are also problematic.  An attacker can replay an old
   offer, perhaps one that had put media on hold, and thus disable media
   streams in a conversation.  Therefore, the application protocol MUST
   provide a secure way to sequence offers and answers, and to detect
   and reject old offers or answers.&lt;/p&gt;
&lt;p&gt;SIP [7] meets all of these requirements.&lt;/p&gt;
&lt;p&gt;12 IANA Considerations&lt;/p&gt;
&lt;p&gt;There are no IANA considerations with this specification.&lt;/p&gt;
&lt;p&gt;13 Acknowledgements&lt;/p&gt;
&lt;p&gt;The authors would like to thank Allison Mankin, Rohan Mahy, Joerg
   Ott, and Flemming Andreasen for their detailed comments.&lt;/p&gt;
&lt;p&gt;14 Normative References&lt;/p&gt;
&lt;p&gt;[1]   Handley, M. and V. Jacobson, "SDP: Session Description
         Protocol", RFC 2327, April 1998.&lt;/p&gt;
&lt;p&gt;[2]   Bradner, S., "Key Words for Use in RFCs to Indicate Requirement
         Levels", BCP 14, RFC 2119, March 1997.&lt;/p&gt;
&lt;p&gt;[3]   Kumar, R. and M. Mostafa, "Conventions For the Use of The
         Session Description Protocol (SDP) for ATM Bearer Connections",
         RFC 3108, May 2001.&lt;/p&gt;
&lt;p&gt;Rosenberg &amp;amp; Schulzrinne     Standards Track                    [Page 23]&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;RFC 3264  An Offer/Answer Model Session Description Protocol   June 2002&lt;/p&gt;
&lt;p&gt;[4]   Schulzrinne, H., Casner, S, Frederick, R. and V. Jacobson,
         "RTP: A Transport Protocol for Real-Time Applications", RFC
         1889, January 1996.&lt;/p&gt;
&lt;p&gt;[5]   Schulzrinne, H., "RTP Profile for Audio and Video Conferences
         with Minimal Control", RFC 1890, January 1996.&lt;/p&gt;
&lt;p&gt;15 Informative References&lt;/p&gt;
&lt;p&gt;[6]   Handley, M., Perkins, C. and E. Whelan, "Session Announcement
         Protocol", RFC 2974, October 2000.&lt;/p&gt;
&lt;p&gt;[7]   Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston, A.,
         Peterson, J., Sparks, R., Handley, M. and E. Schooler, "SIP:
         Session Initiation Protocol", RFC 3261, June 2002.&lt;/p&gt;
&lt;p&gt;[8]   Schulzrinne, H., Rao, A. and R. Lanphier, "Real Time Streaming
         Protocol (RTSP)", RFC 2326, April 1998.&lt;/p&gt;
&lt;p&gt;[9]   Schulzrinne, H. and S. Petrack, "RTP Payload for DTMF Digits,
         Telephony Tones and Telephony Signals", RFC 2833, May 2000.&lt;/p&gt;
&lt;p&gt;[10]  Handley, M., Schulzrinne, H., Schooler, E. and J. Rosenberg,
         "SIP: Session Initiation Protocol", RFC 2543, March 1999.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;16 Authors&amp;#39; Addresses

   Jonathan Rosenberg
   dynamicsoft
   72 Eagle Rock Avenue
   First Floor
   East Hanover, NJ 07936

   EMail: jdrosen@dynamicsoft.com


   Henning Schulzrinne
   Dept. of Computer Science
   Columbia University
   1214 Amsterdam Avenue
   New York, NY 10027
   USA

   EMail: schulzrinne@cs.columbia.edu
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Rosenberg &amp;amp; Schulzrinne     Standards Track                    [Page 24]&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;RFC 3264  An Offer/Answer Model Session Description Protocol   June 2002&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Full Copyright Statement&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Copyright (C) The Internet Society (2002).  All Rights Reserved.&lt;/p&gt;
&lt;p&gt;This document and translations of it may be copied and furnished to
   others, and derivative works that comment on or otherwise explain it
   or assist in its implementation may be prepared, copied, published
   and distributed, in whole or in part, without restriction of any
   kind, provided that the above copyright notice and this paragraph are
   included on all such copies and derivative works.  However, this
   document itself may not be modified in any way, such as by removing
   the copyright notice or references to the Internet Society or other
   Internet organizations, except as needed for the purpose of
   developing Internet standards in which case the procedures for
   copyrights defined in the Internet Standards process must be
   followed, or as required to translate it into languages other than
   English.&lt;/p&gt;
&lt;p&gt;The limited permissions granted above are perpetual and will not be
   revoked by the Internet Society or its successors or assigns.&lt;/p&gt;
&lt;p&gt;This document and the information contained herein is provided on an
   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.&lt;/p&gt;
&lt;p&gt;Acknowledgement&lt;/p&gt;
&lt;p&gt;Funding for the RFC Editor function is currently provided by the
   Internet Society.&lt;/p&gt;
&lt;p&gt;Rosenberg &amp;amp; Schulzrinne     Standards Track                    [Page 25]&lt;/p&gt;
&lt;hr /&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Fri, 13 Mar 2015 21:10:00 +0800</pubDate><guid>tag:,2015-03-13:2015/webRtc_2015_03_13_21_10.html</guid><category>webRtc</category><category>rfc</category><category>protocol</category></item><item><title>mongo 某些知识</title><link>/2014/mongo_2014_12_04_23_01.html</link><description>&lt;h3&gt;Capped Collection&lt;/h3&gt;
&lt;p&gt;固定集合(Capped Collection)是性能出色的有着固定大小的集合,以LRU(Least Recently Used最近最少使用)规则和插入顺序进行age-out(老化移出)处理,自动维护集合中对象的插入顺序,在创建时要预先制定大小,如果空间用完,新添加的对象将会取代集合中最旧的对象,永远保持最新的数据。&lt;/p&gt;
&lt;p&gt;固定集合可以插入及更新,但更新不能超出collection的大小,否则更新失败,不允许删除,但是可以调用drop()删除集合中的所有行,但是drop后需要显式地重建集合.在32位机子上一个cappped collection的最大值约为482.5M,64位上只受系统文件大小的限制&lt;/p&gt;
&lt;p&gt;固定集合属性及用法:&lt;/p&gt;
&lt;p&gt;属性1:对固定集合进行插入速度极快&lt;/p&gt;
&lt;p&gt;属性2:按照插入顺序的查询输出速度极快&lt;/p&gt;
&lt;p&gt;属性3:能够在插入最新数据时,淘汰最早的数据&lt;/p&gt;
&lt;p&gt;用法1:储存日志信息&lt;/p&gt;
&lt;p&gt;用法2:缓存一些少量的文档&lt;/p&gt;
&lt;p&gt;创建固定集合&lt;/p&gt;
&lt;p&gt;不像普通集合,固定集合需要显示的创建使用createCollection命令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;db&lt;/span&gt;&lt;span class="nc"&gt;.createCollection&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;collect&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;capped&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;创建一个集合为collect的固定集合,大小为10000字节,还可以指定文档个数,加上Max:100属性.&lt;/p&gt;
&lt;p&gt;注意:指定文档上限,必须指定大小,文档限制是在容量没满时进行淘汰,要是满了,就根据容量限制来进行淘汰.&lt;/p&gt;
&lt;p&gt;可以再创建capped collection时指定collection中能够存放的最大文档数目,但这是要指定&lt;code&gt;size&lt;/code&gt;,因为总是先检查size后检查maxRowNumber.可以使用&lt;code&gt;validate()&lt;/code&gt;查看一个collection已经使用了多少空间,从而决定size设为多大.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;db.createCollection(&amp;quot;mycappedcoll&amp;quot;,{capped:true,size:10000,max:100})

{ &amp;quot;ok&amp;quot; : 1 }

db.mycappedcoll.validate();
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;创建collection时还有一个参数&lt;code&gt;autoIndexID&lt;/code&gt;,值可以为&lt;code&gt;true&lt;/code&gt;和&lt;code&gt;false&lt;/code&gt;,决定是否需要在&lt;code&gt;_id&lt;/code&gt;上创建索引,例如&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;db.createCollection(&amp;quot;mycappedcoll&amp;quot;,{capped:true,size:10000,max:100,autoIndexId:false})
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;默认情况下对一般的collection是创建索引的,但不会对capped collection创建.capped collection不能被Shard,这也是有道理的,一个经常被刷新且大小固定的表,做Sharding(分片)也没太大意义.&lt;/p&gt;
&lt;h3&gt;一些集合基本操作&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;db.cot1.stats(); //查看集合cot1的状态信息

db.collection1.drop(); //删除collection1集合

mongoDB中集合创建默认是隐式创建的,可以使用createCollection显示创建集合

db.createCollection(&amp;quot;collect&amp;quot;);

db.dropDatabase(); //删除当前数据库

show dbs //查询所有数据库

show tables //显示当前库中所有集合 或者 show collections;

db.colt.isCapped(); //判断集合是否为固定集合
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;转换集合&lt;/h3&gt;
&lt;p&gt;把普通的集合转换成固定集合需要使用&lt;code&gt;convertTocapped&lt;/code&gt;命令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;db&lt;/span&gt;&lt;span class="nc"&gt;.runCommand&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;convertTocapped&lt;/span&gt;&lt;span class="err"&gt;：&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;10000&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;把test普遍集合转换为固定集合,大小为10000字节.&lt;/p&gt;
&lt;h3&gt;自然排序&lt;/h3&gt;
&lt;p&gt;固定集合文档按照插入顺序储存的,默认情况下查询就是按照插入顺序返回的,也可以使用&lt;code&gt;$natural&lt;/code&gt;调整返回顺序.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;db.mycappedcolt.find().sort( &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;natural&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;:1} );&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参数1表示默认顺序,-1则相反.&lt;/p&gt;
&lt;h3&gt;GridFS&lt;/h3&gt;
&lt;p&gt;GridFS是一种在MongoDB中存储大二进制文件的机制,使用GridFS原因有以下几种:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;储存巨大的文件,比如视频、高清图片等.利用GridFS可以简化需求.&lt;/li&gt;
&lt;li&gt;GridFS会直接利用已经建立的复制或分片机制,故障恢复和扩展都很容易.&lt;/li&gt;
&lt;li&gt;GridFS可以避免用户上传内容的文件系统出现问题.&lt;/li&gt;
&lt;li&gt;GridFS不产生磁盘碎片&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;GridFS存储数据&lt;/h4&gt;
&lt;p&gt;GrdiFS使用两个表来存储数据:&lt;/p&gt;
&lt;p&gt;files 包含元数据对象&lt;/p&gt;
&lt;p&gt;chunks 包含其他一些相关信息的二进制块.&lt;/p&gt;
&lt;p&gt;为了使多个GridFS命名为一个单一的数据库,文件和块都有一个前缀,默认情况下,前缀是fs,所以任何默认的GridFS存储将包括命名空间fs.files和fs.chunks。&lt;/p&gt;
&lt;p&gt;各种第三方语言可以更改其前缀&lt;/p&gt;
&lt;h4&gt;使用GridFS mongofiles&lt;/h4&gt;
&lt;p&gt;mongofiles是从命令行操作GridFS的一种工具&lt;/p&gt;
&lt;p&gt;四个命令:&lt;code&gt;put&lt;/code&gt;(存储)、&lt;code&gt;get&lt;/code&gt;(取得/下载)、&lt;code&gt;list&lt;/code&gt;(列表)、&lt;code&gt;delete&lt;/code&gt;(删除)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./mongofiles put testfile.zip

./mongofiles list

./mongofiles get testfile.zip

./mongofiles delete testfile.zip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;验证md5&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mg5sum testfiles.zip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;此时登录mongo,show tables可以看到新增2个文件fs.files和fs.chunks.&lt;/p&gt;
&lt;p&gt;查看fs.files中的内容&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;db.fs.files.find();
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;fs.files 中存储的是一些基础的元数据信息.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;db.fs.chunks.find();
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;fs.chunks 中存储的是一些实际的内容数据信息.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Thu, 04 Dec 2014 23:01:00 +0800</pubDate><guid>tag:,2014-12-04:2014/mongo_2014_12_04_23_01.html</guid><category>mongo</category><category>database</category></item><item><title>pymongo api</title><link>/2014/pymongo_2014_12_04_19_51.html</link><description>&lt;h2&gt;牢骚&lt;/h2&gt;
&lt;p&gt;两天前看mongo，试了试，没啥问题，接下来顺理成章的就是....该怎么说，这个应该叫驱动？还是叫中间件？嘛~这点细节就不在意了。&lt;/p&gt;
&lt;h2&gt;干货&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;创建&lt;/span&gt;&lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="err"&gt;时，指定&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="err"&gt;及&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="err"&gt;参数&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pymongo&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pymongo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;27017&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="err"&gt;连接数据库&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ChatRoom&lt;/span&gt;
&lt;span class="err"&gt;或&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ChatRoom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="err"&gt;连接聚集&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Account&lt;/span&gt;
&lt;span class="err"&gt;或&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Account&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="err"&gt;查看全部聚集名称&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collection_names&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="err"&gt;查看聚集的一条记录&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_one&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_one&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;UserName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;keyword&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="err"&gt;查看聚集的字段&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_one&lt;/span&gt;&lt;span class="p"&gt;({},{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;UserName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Email&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;u&amp;#39;UserName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;libing&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ObjectId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;4ded95c3b7780a774a099b7c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;Email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;libing@35.cn&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_one&lt;/span&gt;&lt;span class="p"&gt;({},{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;UserName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Email&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;u&amp;#39;UserName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;libing&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;Email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;libing@35.cn&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="err"&gt;查看聚集的多条记录&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;item&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;UserName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;libing&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}):&lt;/span&gt;
        &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;UserName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="err"&gt;查看聚集的记录统计&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;UserName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;keyword&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="err"&gt;聚集查询结果排序&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;UserName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="err"&gt;默认为升序&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;UserName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;pymongo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ASCENDING&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="err"&gt;升序&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;UserName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;pymongo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DESCENDING&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="err"&gt;降序&lt;/span&gt;

&lt;span class="err"&gt;聚集查询结果多列排序&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;([(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;UserName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;pymongo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ASCENDING&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Email&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;pymongo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DESCENDING&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;


&lt;span class="err"&gt;添加记录&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;AccountID&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;UserName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;libing&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="err"&gt;修改记录&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;UserName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;libing&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$set&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Email&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;libing@126.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;123&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt;

&lt;span class="err"&gt;删除记录&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="err"&gt;全部删除&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;UserName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;keyword&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Thu, 04 Dec 2014 19:51:00 +0800</pubDate><guid>tag:,2014-12-04:2014/pymongo_2014_12_04_19_51.html</guid><category>mongo</category><category>database</category><category>Python</category></item><item><title>mongo api</title><link>/2014/mongo_2014_12_03_22_17.html</link><description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;为了提高股票数据的处理速度中的第一步，准备把陪伴多年的mysql换成文件存储，调了好几个，决定用moongo。so，最近在看moongo怎么用。&lt;/p&gt;
&lt;p&gt;这篇东西当做常用功能的快捷查询吧。&lt;/p&gt;
&lt;h2&gt;常用api&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="s s-Atom"&gt;mongo&lt;/span&gt; &lt;span class="s s-Atom"&gt;–path&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;AddUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s s-Atom"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s s-Atom"&gt;添加用户&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;usrename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s s-Atom"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s s-Atom"&gt;设置数据库连接验证&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cloneDataBase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;fromhost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s s-Atom"&gt;从目标服务器克隆一个数据库&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;commandHelp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s s-Atom"&gt;returns&lt;/span&gt; &lt;span class="s s-Atom"&gt;the&lt;/span&gt; &lt;span class="s s-Atom"&gt;help&lt;/span&gt; &lt;span class="s s-Atom"&gt;for&lt;/span&gt; &lt;span class="s s-Atom"&gt;the&lt;/span&gt; &lt;span class="s s-Atom"&gt;command&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;copyDatabase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;fromdb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s s-Atom"&gt;todb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s s-Atom"&gt;fromhost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s s-Atom"&gt;复制数据库fromdb—源数据库名称，todb—目标数据库名称，fromhost—源数据库服务器地址&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;createCollection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;&lt;span class="nn"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3333&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nn"&gt;capped&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;333&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nn"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;88888&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="s s-Atom"&gt;创建一个数据集，相当于一个表&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;currentOp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="s s-Atom"&gt;取消当前库的当前操作&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dropDataBase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="s s-Atom"&gt;删除当前数据库&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s s-Atom"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s s-Atom"&gt;run&lt;/span&gt; &lt;span class="s s-Atom"&gt;code&lt;/span&gt; &lt;span class="s s-Atom"&gt;server&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s s-Atom"&gt;side&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getCollection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;cname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s s-Atom"&gt;取得一个数据集合，同用法：db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;cname&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s s-Atom"&gt;or&lt;/span&gt; &lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;cname&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getCollenctionNames&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="s s-Atom"&gt;取得所有数据集合的名称列表&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getLastError&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="s s-Atom"&gt;返回最后一个错误的提示消息&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getLastErrorObj&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="s s-Atom"&gt;返回最后一个错误的对象&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getMongo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="s s-Atom"&gt;取得当前服务器的连接对象get&lt;/span&gt; &lt;span class="s s-Atom"&gt;the&lt;/span&gt; &lt;span class="s s-Atom"&gt;server&lt;/span&gt; &lt;span class="s s-Atom"&gt;connection&lt;/span&gt; &lt;span class="s s-Atom"&gt;object&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getMondo&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;setSlaveOk&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="s s-Atom"&gt;allow&lt;/span&gt; &lt;span class="s s-Atom"&gt;this&lt;/span&gt; &lt;span class="s s-Atom"&gt;connection&lt;/span&gt; &lt;span class="s s-Atom"&gt;to&lt;/span&gt; &lt;span class="s s-Atom"&gt;read&lt;/span&gt; &lt;span class="s s-Atom"&gt;from&lt;/span&gt; &lt;span class="s s-Atom"&gt;then&lt;/span&gt; &lt;span class="s s-Atom"&gt;nonmaster&lt;/span&gt; &lt;span class="s s-Atom"&gt;membr&lt;/span&gt; &lt;span class="s s-Atom"&gt;of&lt;/span&gt; &lt;span class="s s-Atom"&gt;a&lt;/span&gt; &lt;span class="s s-Atom"&gt;replica&lt;/span&gt; &lt;span class="s s-Atom"&gt;pair&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="s s-Atom"&gt;返回当操作数据库的名称&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getPrevError&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="s s-Atom"&gt;返回上一个错误对象&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getProfilingLevel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="s s-Atom"&gt;?什么等级&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getReplicationInfo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="s s-Atom"&gt;?什么信息&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getSisterDB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s s-Atom"&gt;get&lt;/span&gt; &lt;span class="s s-Atom"&gt;the&lt;/span&gt; &lt;span class="s s-Atom"&gt;db&lt;/span&gt; &lt;span class="s s-Atom"&gt;at&lt;/span&gt; &lt;span class="s s-Atom"&gt;the&lt;/span&gt; &lt;span class="s s-Atom"&gt;same&lt;/span&gt; &lt;span class="s s-Atom"&gt;server&lt;/span&gt; &lt;span class="s s-Atom"&gt;as&lt;/span&gt; &lt;span class="s s-Atom"&gt;this&lt;/span&gt; &lt;span class="s s-Atom"&gt;onew&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;killOp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="s s-Atom"&gt;停止（杀死）在当前库的当前操作&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;printCollectionStats&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="s s-Atom"&gt;返回当前库的数据集状态&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;printReplicationInfo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;printSlaveReplicationInfo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;printShardingStatus&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="s s-Atom"&gt;返回当前数据库是否为共享数据库&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;removeUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s s-Atom"&gt;删除用户&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;repairDatabase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="s s-Atom"&gt;修复当前数据库&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;resetError&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;runCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;cmdObj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s s-Atom"&gt;run&lt;/span&gt; &lt;span class="s s-Atom"&gt;a&lt;/span&gt; &lt;span class="s s-Atom"&gt;database&lt;/span&gt; &lt;span class="s s-Atom"&gt;command&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="s s-Atom"&gt;if&lt;/span&gt; &lt;span class="s s-Atom"&gt;cmdObj&lt;/span&gt; &lt;span class="o"&gt;is&lt;/span&gt; &lt;span class="s s-Atom"&gt;a&lt;/span&gt; &lt;span class="s s-Atom"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;turns&lt;/span&gt; &lt;span class="s s-Atom"&gt;it&lt;/span&gt; &lt;span class="s s-Atom"&gt;into&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s s-Atom"&gt;cmdObj:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setProfilingLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;level&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s s-Atom"&gt;off&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s s-Atom"&gt;slow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s s-Atom"&gt;all&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;shutdownServer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="s s-Atom"&gt;关闭当前服务程序&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;version&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="s s-Atom"&gt;返回当前程序的版本信息&lt;/span&gt;

&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nn"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="s s-Atom"&gt;返回xxxxdb数据集ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="s s-Atom"&gt;的数据集&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nn"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="s s-Atom"&gt;返回xxxxdb数据集ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="s s-Atom"&gt;的数据总数&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nn"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nf"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;返回xxxxdb数据集ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="s s-Atom"&gt;的数据集从第二条开始的数据集&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nn"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nf"&gt;skip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s s-Atom"&gt;返回xxxxdb数据集ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="s s-Atom"&gt;的数据集从0到第八条的数据集&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nn"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nf"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;skip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s s-Atom"&gt;返回xxxxdb数据集ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="s s-Atom"&gt;=的数据集从第二条到第八条的数据&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nn"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nf"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="s s-Atom"&gt;返回xxxxdb数据集ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="s s-Atom"&gt;的排序数据集&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;findOne&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s s-Atom"&gt;query&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="s s-Atom"&gt;返回符合条件的一条数据&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getDB&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="s s-Atom"&gt;返回此数据集所属的数据库名称&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getIndexes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="s s-Atom"&gt;返回些数据集的索引信息&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;group&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nn"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s s-Atom"&gt;…&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nn"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s s-Atom"&gt;…&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nn"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s s-Atom"&gt;…&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="nn"&gt;cond&lt;/span&gt;&lt;span class="p"&gt;:...]})&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;mapReduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;mayFunction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s s-Atom"&gt;reduceFunction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s s-Atom"&gt;在数据集中删除一条数据&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;renameCollection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;newName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s s-Atom"&gt;重命名些数据集名称&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s s-Atom"&gt;往数据集中插入一条数据&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;stats&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="s s-Atom"&gt;返回此数据集的状态&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;storageSize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="s s-Atom"&gt;返回此数据集的存储大小&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;totalIndexSize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="s s-Atom"&gt;返回此数据集的索引文件大小&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;totalSize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="s s-Atom"&gt;返回些数据集的总大小&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s s-Atom"&gt;object&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="s s-Atom"&gt;upsert_bool&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="s s-Atom"&gt;在此数据集中更新一条数据&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="s s-Atom"&gt;验证此数据集&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getShardVersion&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="s s-Atom"&gt;返回数据集共享版本号&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s s-Atom"&gt;‘name’:&amp;#39;foobar’}) select * from xxxxdb where name=’foobar’&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db.xxxxdb.find() select * from xxxxdb&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db.xxxxdb.find({‘ID’:10}).count() select count(*) from xxxxdb where ID=10&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db.xxxxdb.find().skip(10).limit(20) 从查询结果的第十条开始读20条数据 select * from xxxxdb limit 10,20 ———-mysql&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db.xxxxdb.find({‘ID’:{$in:[25,35,45]}}) select * from xxxxdb where ID in (25,35,45)&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db.xxxxdb.find().sort({‘ID’:-1}) select * from xxxxdb order by ID desc&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db.xxxxdb.distinct(‘name’,{‘ID’:{$lt:20}}) select distinct(name) from xxxxdb where ID&amp;lt;20&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db.xxxxdb.group({key:{&amp;#39;name&amp;#39;:true},cond:{&amp;#39;name&amp;#39;:&amp;#39;foo&amp;#39;},reduce:function(obj,prev){prev.msum+=obj.marks;},initial:{msum:0}})&lt;/span&gt;
&lt;span class="s s-Atom"&gt;select name,sum(marks) from xxxxdb group by name&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db.xxxxdb.find(&amp;#39;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="s s-Atom"&gt;′&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;&lt;span class="nn"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="s s-Atom"&gt;select&lt;/span&gt; &lt;span class="s s-Atom"&gt;name&lt;/span&gt; &lt;span class="s s-Atom"&gt;from&lt;/span&gt; &lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt; &lt;span class="s s-Atom"&gt;where&lt;/span&gt; &lt;span class="nv"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;name&amp;#39;:&amp;#39;foobar’,&amp;#39;age&amp;#39;:25}) insert into xxxxdb (&amp;#39;name&amp;#39;,&amp;#39;age’&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;foobar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;name&amp;#39;:&amp;#39;foobar’,&amp;#39;age&amp;#39;:25,’email’:&amp;#39;cclove2@&lt;/span&gt;&lt;span class="mf"&gt;163.&lt;/span&gt;&lt;span class="s s-Atom"&gt;com’&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt; &lt;span class="s s-Atom"&gt;delete&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="s s-Atom"&gt;from&lt;/span&gt; &lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;age&amp;#39;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="s s-Atom"&gt;delete&lt;/span&gt; &lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt; &lt;span class="s s-Atom"&gt;where&lt;/span&gt; &lt;span class="s s-Atom"&gt;age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;age&amp;#39;:&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nn"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt; &lt;span class="s s-Atom"&gt;delete&lt;/span&gt; &lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt; &lt;span class="s s-Atom"&gt;where&lt;/span&gt; &lt;span class="s s-Atom"&gt;age&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;age&amp;#39;:&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nn"&gt;lte&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt; &lt;span class="s s-Atom"&gt;delete&lt;/span&gt; &lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt; &lt;span class="s s-Atom"&gt;where&lt;/span&gt; &lt;span class="s s-Atom"&gt;age&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;age&amp;#39;:&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nn"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt; &lt;span class="s s-Atom"&gt;delete&lt;/span&gt; &lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt; &lt;span class="s s-Atom"&gt;where&lt;/span&gt; &lt;span class="s s-Atom"&gt;age&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s s-Atom"&gt;‘age’:&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nn"&gt;gte&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt; &lt;span class="s s-Atom"&gt;delete&lt;/span&gt; &lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt; &lt;span class="s s-Atom"&gt;where&lt;/span&gt; &lt;span class="s s-Atom"&gt;age&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s s-Atom"&gt;‘age’:&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nn"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt; &lt;span class="s s-Atom"&gt;delete&lt;/span&gt; &lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt; &lt;span class="s s-Atom"&gt;where&lt;/span&gt; &lt;span class="s s-Atom"&gt;age&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s s-Atom"&gt;‘name’:&amp;#39;foobar’},{‘$set’:{‘age’:36}}) update xxxxdb set age=36 where name=’foobar’&lt;/span&gt;
&lt;span class="s s-Atom"&gt;db.xxxxdb.update({‘name’:&amp;#39;foobar’&lt;/span&gt;&lt;span class="p"&gt;},{&lt;/span&gt;&lt;span class="s s-Atom"&gt;‘&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="s s-Atom"&gt;inc’:&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s s-Atom"&gt;‘age’:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt; &lt;span class="s s-Atom"&gt;update&lt;/span&gt; &lt;span class="s s-Atom"&gt;xxxxdb&lt;/span&gt; &lt;span class="s s-Atom"&gt;set&lt;/span&gt; &lt;span class="s s-Atom"&gt;age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s s-Atom"&gt;age&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="s s-Atom"&gt;where&lt;/span&gt; &lt;span class="s s-Atom"&gt;name=’foobar’&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;提醒&lt;/h2&gt;
&lt;p&gt;在windows下，&lt;/p&gt;
&lt;p&gt;cmd窗口的默认编码是GBK，但mongodb的字符编码都是utf-8，所以修改cmd窗口的编码为utf-8就可以了。&lt;/p&gt;
&lt;p&gt;例如：
1. chcp 65001
2. 更改“属性”中的字体，除“点阵字体”外所有的都行
再次运行就显示正常了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Wed, 03 Dec 2014 22:31:00 +0800</pubDate><guid>tag:,2014-12-03:2014/mongo_2014_12_03_22_17.html</guid><category>mongo</category><category>database</category></item><item><title>Python Garbage Collection</title><link>/2014/Python_Garbage_Collection_2014_10_02_13_03.html</link><description>&lt;h2&gt;Python 垃圾回收机制 ##&lt;/h2&gt;
&lt;h3&gt;概述&lt;/h3&gt;
&lt;p&gt;无论何种垃圾收集机制, 一般都是两阶段: 垃圾检测和垃圾回收.&lt;/p&gt;
&lt;p&gt;在Python中, 大多数对象的生命周期都是通过对象的引用计数来管理的.&lt;/p&gt;
&lt;p&gt;问题: 但是存在循环引用的问题: a 引用 b, b 引用 a, 导致每一个对象的引用计数都不为0, 所占用的内存永远不会被回收&lt;/p&gt;
&lt;p&gt;要解决循环引用: 必需引入其他垃圾收集技术来打破循环引用. Python中使用了标记-清除以及分代收集&lt;/p&gt;
&lt;p&gt;即, Python 中垃圾回收机制: 引用计数(主要), 标记清除, 分代收集(辅助)&lt;/p&gt;
&lt;h3&gt;引用计数&lt;/h3&gt;
&lt;p&gt;引用计数, 意味着必须在每次分配和释放内存的时候, 加入管理引用计数的动作&lt;/p&gt;
&lt;p&gt;引用计数的优点: 最直观最简单, 实时性, 任何内存, 一旦没有指向它的引用, 就会立即被回收&lt;/p&gt;
&lt;h4&gt;计数存储&lt;/h4&gt;
&lt;p&gt;回顾 Python 的对象&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/Python_Garbage_Collection_2014_10_02_13_03/PyObject.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/Python_Garbage_Collection_2014_10_02_13_03/PyVarObject.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;e.g. 引用计数增加以及减少&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;getrefcount&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getrefcount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getrefcount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getrefcount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;计数增加&lt;/h4&gt;
&lt;p&gt;增加对象引用计数, refcnt incr&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#define Py_INCREF(op) (                         \
  _Py_INC_REFTOTAL  _Py_REF_DEBUG_COMMA       \
  ((PyObject*)(op))-&amp;gt;ob_refcnt++)
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;计数减少&lt;/h4&gt;
&lt;p&gt;减少对象引用计数, refcnt desc&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#define _Py_DEC_REFTOTAL        _Py_RefTotal--
#define _Py_REF_DEBUG_COMMA     ,

#define Py_DECREF(op)                                   \
  do {                                                \
      if (_Py_DEC_REFTOTAL  _Py_REF_DEBUG_COMMA       \
      --((PyObject*)(op))-&amp;gt;ob_refcnt != 0)            \
          _Py_CHECK_REFCNT(op)                        \
      else                                            \
      _Py_Dealloc((PyObject *)(op));                  \
  } while (0)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;即, 发现refcnt变成0的时候, 会调用&lt;code&gt;_Py_Dealloc&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
#define _Py_REF_DEBUG_COMMA     ,

#define _Py_Dealloc(op) (                               \
  _Py_INC_TPFREES(op) _Py_COUNT_ALLOCS_COMMA          \
  (*Py_TYPE(op)-&amp;gt;tp_dealloc)((PyObject *)(op)))
#endif /* !Py_TRACE_REFS */
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;会调用各自类型的&lt;code&gt;tp_dealloc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;例如dict&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;PyTypeObject PyDict_Type = {
    PyVarObject_HEAD_INIT(&amp;amp;PyType_Type, 0)
    &amp;quot;dict&amp;quot;,
    sizeof(PyDictObject),
    0,
    (destructor)dict_dealloc,                   /* tp_dealloc */
    ....
}

static void
dict_dealloc(register PyDictObject *mp)
{
    .....
    // 如果满足条件, 放入到缓冲池freelist中
    if (numfree &amp;lt; PyDict_MAXFREELIST &amp;amp;&amp;amp; Py_TYPE(mp) == &amp;amp;PyDict_Type)
        free_list[numfree++] = mp;
    // 否则, 调用tp_free
    else
        Py_TYPE(mp)-&amp;gt;tp_free((PyObject *)mp);
    Py_TRASHCAN_SAFE_END(mp)
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python基本类型的&lt;code&gt;tp_dealloc&lt;/code&gt;, 通常都会与各自的缓冲池机制相关, 释放会优先放入缓冲池中(对应的分配会优先从缓冲池取). 这个内存分配与回收同缓冲池机制相关&lt;/p&gt;
&lt;p&gt;当无法放入缓冲池时, 会调用各自类型的&lt;code&gt;tp_free&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;int, 比较特殊&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;// int, 通用整数对象缓冲池机制
(freefunc)int_free,                         /* tp_free */
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;string&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;// string
PyObject_Del,                               /* tp_free */
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;dict/tuple/list&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;PyObject_GC_Del,                            /* tp_free */
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后, 我们再回头看, 自定义对象的&lt;code&gt;tp_free&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;PyTypeObject PyType_Type = {
    PyVarObject_HEAD_INIT(&amp;amp;PyType_Type, 0)
    &amp;quot;type&amp;quot;,                                     /* tp_name */
    ...
    PyObject_GC_Del,                            /* tp_free */
};
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;即, 最终, 当计数变为0, 触发内存回收动作. 涉及函数&lt;code&gt;PyObject_Del&lt;/code&gt;和&lt;code&gt;PyObject_GC_Del&lt;/code&gt;, 并且, 自定义类以及容器类型(dict/list/tuple/set等)使用的都是后者&lt;code&gt;PyObject_GC_Del&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;内存回收 PyObject_Del / PyObject_GC_Del&lt;/h4&gt;
&lt;p&gt;如果引用计数=0:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;放入缓冲池&lt;/li&gt;
&lt;li&gt;真正销毁, PyObject_Del/PyObject_GC_Del内存操作&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这两个操作都是进行内存级别的操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PyObject_Del&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;PyObject_Del(op) releases the memory allocated for an object. It does not run a destructor -- it only frees the memory. PyObject_Free is identical.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这块删除, &lt;code&gt;PyObject_Free&lt;/code&gt; 涉及到了Python底层内存的分配和管理机制, 具体见前面的博文&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;PyObject_GC_Del&lt;/p&gt;
&lt;p&gt;void
PyObject_GC_Del(void &lt;em&gt;op)
{
    PyGC_Head &lt;/em&gt;g = AS_GC(op);&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;// Returns true if a given object is tracked
if (IS_TRACKED(op))
    // 从跟踪链表中移除
    gc_list_remove(g);
if (generations[0].count &amp;gt; 0) {
    generations[0].count--;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;PyObject_FREE(g);
}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;IS_TRACKED&lt;/code&gt; 涉及到标记-清除的机制&lt;/p&gt;
&lt;p&gt;&lt;code&gt;generations&lt;/code&gt; 涉及到了分代回收&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PyObject_FREE&lt;/code&gt;, 则和Python底层内存池机制相关&lt;/p&gt;
&lt;h3&gt;标记-清除&lt;/h3&gt;
&lt;h4&gt;问题: 什么对象可能产生循环引用?&lt;/h4&gt;
&lt;p&gt;只需要关注关注可能产生循环引用的对象&lt;/p&gt;
&lt;p&gt;PyIntObject/PyStringObject等不可能&lt;/p&gt;
&lt;p&gt;Python中的循环引用总是发生在container对象之间, 所谓containser对象即是内部可持有对其他对象的引用: list/dict/class/instance等等&lt;/p&gt;
&lt;p&gt;垃圾收集带来的开销依赖于container对象的数量, 必需跟踪所创建的每一个container对象, 并将这些对象组织到一个集合中.&lt;/p&gt;
&lt;h4&gt;可收集对象链表&lt;/h4&gt;
&lt;p&gt;可收集对象链表: 将需要被收集和跟踪的container, 放到可收集的链表中&lt;/p&gt;
&lt;p&gt;任何一个python对象都分为两部分: &lt;code&gt;PyObject_HEAD&lt;/code&gt; + 对象本身数据&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* PyObject_HEAD defines the initial segment of every PyObject. */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;define&lt;span class="w"&gt; &lt;/span&gt;PyObject_HEAD&lt;span class="w"&gt;                   &lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;_PyObject_HEAD_EXTRA&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;Py_ssize_t&lt;span class="w"&gt; &lt;/span&gt;ob_refcnt&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;struct&lt;span class="w"&gt; &lt;/span&gt;_typeobject&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;ob_type&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="o"&gt;//----------------------------------------------------&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;define&lt;span class="w"&gt; &lt;/span&gt;_PyObject_HEAD_EXTRA&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;struct&lt;span class="w"&gt; &lt;/span&gt;_object&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;_ob_next&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;struct&lt;span class="w"&gt; &lt;/span&gt;_object&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;_ob_prev&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;双向链表结构&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;垃圾回收&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可收集对象链表&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Modules/gcmodule.c&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; /* GC information is stored BEFORE the object structure. */
  typedef union _gc_head {
      struct {
          // 建立链表需要的前后指针
          union _gc_head *gc_next;
          union _gc_head *gc_prev;
          // 在初始化时会被初始化为 GC_UNTRACED
          Py_ssize_t gc_refs;
      } gc;
      long double dummy;  /* force worst-case alignment */
  } PyGC_Head;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;创建container的过程: &lt;code&gt;container对象 = pyGC_Head | PyObject_HEAD | Container Object&lt;/code&gt;&lt;/p&gt;
&lt;p PyObject="PyObject" _="
" _op="*op"&gt;PyObject &lt;em&gt;
_PyObject_GC_New(PyTypeObject &lt;/em&gt;tp)&lt;/p&gt;
&lt;p&gt;=&amp;gt; _PyObject_GC_Malloc&lt;/p&gt;
&lt;h1&gt;define _PyGC_REFS_UNTRACKED                    (-2)&lt;/h1&gt;
&lt;h1&gt;define GC_UNTRACKED                    _PyGC_REFS_UNTRACKED&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;PyObject *
_PyObject_GC_Malloc(size_t basicsize)
{
    PyObject *op;
    PyGC_Head *g;
    if (basicsize &amp;gt; PY_SSIZE_T_MAX - sizeof(PyGC_Head))
        return PyErr_NoMemory();

    // 为 对象本身+PyGC_Head申请内存, 注意分配的size
    g = (PyGC_Head *)PyObject_MALLOC(
        sizeof(PyGC_Head) + basicsize);
    if (g == NULL)
        return PyErr_NoMemory();

    // 初始化 GC_UNTRACED
    g-&amp;gt;gc.gc_refs = GC_UNTRACKED;
    generations[0].count++; /* number of allocated GC objects */

    // 如果大于阈值, 执行分代回收
    if (generations[0].count &amp;gt; generations[0].threshold &amp;amp;&amp;amp;
        enabled &amp;amp;&amp;amp;
        generations[0].threshold &amp;amp;&amp;amp;
        !collecting &amp;amp;&amp;amp;
        !PyErr_Occurred()) {

        collecting = 1;
        collect_generations();
        collecting = 0;
    }
    op = FROM_GC(g);
    return op;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;PyObject_HEAD and PyGC_HEAD&lt;/h4&gt;
&lt;p&gt;注意, &lt;code&gt;FROM_GC&lt;/code&gt;和&lt;code&gt;AS_GC&lt;/code&gt;用于 &lt;code&gt;PyObject_HEAD &amp;lt;=&amp;gt; PyGC_HEAD&lt;/code&gt;地址相互转换&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Modules/gcmodule.c&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; /* Get an object&amp;#39;s GC head */
  #define AS_GC(o) ((PyGC_Head *)(o)-1)

  /* Get the object given the GC head */
  #define FROM_GC(g) ((PyObject *)(((PyGC_Head *)g)+1))

objimpl.h

#define _Py_AS_GC(o) ((PyGC_Head *)(o)-1)
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;问题: 什么时候将container放到这个对象链表中&lt;/h4&gt;
&lt;p&gt;e.g list&lt;/p&gt;
&lt;p&gt;&lt;em&gt;listobject.c&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;PyObject *
PyList_New(Py_ssize_t size)
{
    PyListObject *op;
    op = PyObject_GC_New(PyListObject, &amp;amp;PyList_Type);
    _PyObject_GC_TRACK(op);
    return (PyObject *) op;
}

// =&amp;gt;  _PyObject_GC_TRACK

// objimpl.h
// 加入到可收集对象链表中

#define _PyObject_GC_TRACK(o) do { \
    PyGC_Head *g = _Py_AS_GC(o); \
    if (g-&amp;gt;gc.gc_refs != _PyGC_REFS_UNTRACKED) \
        Py_FatalError(&amp;quot;GC object already tracked&amp;quot;); \
    g-&amp;gt;gc.gc_refs = _PyGC_REFS_REACHABLE; \
    g-&amp;gt;gc.gc_next = _PyGC_generation0; \
    g-&amp;gt;gc.gc_prev = _PyGC_generation0-&amp;gt;gc.gc_prev; \
    g-&amp;gt;gc.gc_prev-&amp;gt;gc.gc_next = g; \
    _PyGC_generation0-&amp;gt;gc.gc_prev = g; \
    } while (0);
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;问题: 什么时候将container从这个对象链表中摘除&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;// Objects/listobject.c

static void
list_dealloc(PyListObject *op)
{
    Py_ssize_t i;
    PyObject_GC_UnTrack(op);
    .....
}

// =&amp;gt; PyObject_GC_UnTrack =&amp;gt; _PyObject_GC_UNTRACK

// 对象销毁的时候
#define _PyObject_GC_UNTRACK(o) do { \
    PyGC_Head *g = _Py_AS_GC(o); \
    assert(g-&amp;gt;gc.gc_refs != _PyGC_REFS_UNTRACKED); \
    g-&amp;gt;gc.gc_refs = _PyGC_REFS_UNTRACKED; \
    g-&amp;gt;gc.gc_prev-&amp;gt;gc.gc_next = g-&amp;gt;gc.gc_next; \
    g-&amp;gt;gc.gc_next-&amp;gt;gc.gc_prev = g-&amp;gt;gc.gc_prev; \
    g-&amp;gt;gc.gc_next = NULL; \
    } while (0);
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;问题: 如何进行标记-清除&lt;/h4&gt;
&lt;p&gt;现在, 我们得到了一个链表&lt;/p&gt;
&lt;p&gt;Python将自己的垃圾收集限制在这个链表上, 循环引用一定发生在这个链表的一群独享之间.&lt;/p&gt;
&lt;h5&gt;概览&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;_PyObject_GC_Malloc&lt;/code&gt; 分配内存时, 发现超过阈值, 此时, 会触发gc, &lt;code&gt;collect_generation&lt;/code&gt;s 然后调用collect, collect包含标记-清除逻辑&lt;/p&gt;
&lt;p&gt;&lt;em&gt;gcmodule.c&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  /* This is the main function.  Read this to understand how the
   * collection process works. */
  static Py_ssize_t
  collect(int generation)
  {
    // 第1步: 将所有比 当前代 年轻的代中的对象 都放到 当前代 的对象链表中
    /* merge younger generations with one we are currently collecting */
    for (i = 0; i &amp;lt; generation; i++) {
        gc_list_merge(GEN_HEAD(i), GEN_HEAD(generation));
    }


    // 第2步
    update_refs(young);
    // 第3步
    subtract_refs(young);

    // 第4步
    gc_list_init(&amp;amp;unreachable);
    move_unreachable(young, &amp;amp;unreachable);

    // 第5步
      /* Move reachable objects to next generation. */
      if (young != old) {
          if (generation == NUM_GENERATIONS - 2) {
              long_lived_pending += gc_list_size(young);
          }
          gc_list_merge(young, old);
      }
      else {
          /* We only untrack dicts in full collections, to avoid quadratic
             dict build-up. See issue #14775. */
          untrack_dicts(young);
          long_lived_pending = 0;
          long_lived_total = gc_list_size(young);
      }

    // 第6步
      delete_garbage(&amp;amp;unreachable, old);

  }
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;第一步: gc_list_merge #####&lt;/h5&gt;
&lt;p&gt;将所有比 当前代 年轻的代中的对象 都放到 当前代 的对象链表中&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;=&amp;gt; gc_list_merge

// 执行拷贝而已
/* append list `from` onto list `to`; `from` becomes an empty list */
static void
gc_list_merge(PyGC_Head *from, PyGC_Head *to)
{
    PyGC_Head *tail;
    assert(from != to);
    if (!gc_list_is_empty(from)) {
        tail = to-&amp;gt;gc.gc_prev;
        tail-&amp;gt;gc.gc_next = from-&amp;gt;gc.gc_next;
        tail-&amp;gt;gc.gc_next-&amp;gt;gc.gc_prev = tail;
        to-&amp;gt;gc.gc_prev = from-&amp;gt;gc.gc_prev;
        to-&amp;gt;gc.gc_prev-&amp;gt;gc.gc_next = to;
    }
    // 清空
    gc_list_init(from);
}

=&amp;gt;

static void
gc_list_init(PyGC_Head *list)
{
    list-&amp;gt;gc.gc_prev = list;
    list-&amp;gt;gc.gc_next = list;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;即, 此刻, 所有待进行处理的对象都集中在同一个链表中&lt;/p&gt;
&lt;p&gt;处理,&lt;/p&gt;
&lt;p&gt;其逻辑是, 要去除循环引用, 得到有效引用计数&lt;/p&gt;
&lt;p&gt;有效引用计数: 将循环引用的计数去除, 最终得到的 =&amp;gt; 将环从引用中摘除, 各自引用计数数值-1&lt;/p&gt;
&lt;p&gt;实际操作, 并不要直接修改对象的 &lt;code&gt;ob_refcnt&lt;/code&gt;, 而是修改其副本, &lt;code&gt;PyGC_Head中的gc.gc_ref&lt;/code&gt;&lt;/p&gt;
&lt;h5&gt;第二步: update_refs&lt;/h5&gt;
&lt;p&gt;遍历对象链表, 将每个对象的&lt;code&gt;gc.gc_ref&lt;/code&gt;值设置为&lt;code&gt;ob_refcnt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;gcmodule.c&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;static void
update_refs(PyGC_Head *containers)
{
    PyGC_Head *gc = containers-&amp;gt;gc.gc_next;
    for (; gc != containers; gc = gc-&amp;gt;gc.gc_next) {
        assert(gc-&amp;gt;gc.gc_refs == GC_REACHABLE);
        gc-&amp;gt;gc.gc_refs = Py_REFCNT(FROM_GC(gc));
        /* Python&amp;#39;s cyclic gc should never see an incoming refcount
         * of 0:  if something decref&amp;#39;ed to 0, it should have been
         * deallocated immediately at that time.
         * Possible cause (if the assert triggers):  a tp_dealloc
         * routine left a gc-aware object tracked during its teardown
         * phase, and did something-- or allowed something to happen --
         * that called back into Python.  gc can trigger then, and may
         * see the still-tracked dying object.  Before this assert
         * was added, such mistakes went on to allow gc to try to
         * delete the object again.  In a debug build, that caused
         * a mysterious segfault, when _Py_ForgetReference tried
         * to remove the object from the doubly-linked list of all
         * objects a second time.  In a release build, an actual
         * double deallocation occurred, which leads to corruption
         * of the allocator&amp;#39;s internal bookkeeping pointers.  That&amp;#39;s
         * so serious that maybe this should be a release-build
         * check instead of an assert?
         */
        assert(gc-&amp;gt;gc.gc_refs != 0);
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;第三步: 计算有效引用计数&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  /* A traversal callback for subtract_refs. */
  static int
  visit_decref(PyObject *op, void *data)
  {
      assert(op != NULL);
      // 判断op指向的对象是否是被垃圾收集监控的, 对象的type对象中有Py_TPFLAGS_HAVE_GC符号
      if (PyObject_IS_GC(op)) {
          PyGC_Head *gc = AS_GC(op);
          /* We&amp;#39;re only interested in gc_refs for objects in the
           * generation being collected, which can be recognized
           * because only they have positive gc_refs.
           */
          assert(gc-&amp;gt;gc.gc_refs != 0); /* else refcount was too small */
          if (gc-&amp;gt;gc.gc_refs &amp;gt; 0)
              gc-&amp;gt;gc.gc_refs--;  // -1
      }
      return 0;
  }


  /* Subtract internal references from gc_refs.  After this, gc_refs is &amp;gt;= 0
   * for all objects in containers, and is GC_REACHABLE for all tracked gc
   * objects not in containers.  The ones with gc_refs &amp;gt; 0 are directly
   * reachable from outside containers, and so can&amp;#39;t be collected.
   */
  static void
  subtract_refs(PyGC_Head *containers)
  {
      traverseproc traverse;
      PyGC_Head *gc = containers-&amp;gt;gc.gc_next;
      // 遍历链表
      for (; gc != containers; gc=gc-&amp;gt;gc.gc_next) {
          // 与特定的类型相关, 得到类型对应的traverse函数
          traverse = Py_TYPE(FROM_GC(gc))-&amp;gt;tp_traverse;
          // 调用
          (void) traverse(FROM_GC(gc),
                         (visitproc)visit_decref, // 回调形式传入
                         NULL);
      }
  }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们可以看看dictobject的traverse函数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  static int
  dict_traverse(PyObject *op, visitproc visit, void *arg)
  {
      Py_ssize_t i = 0;
      PyObject *pk;
      PyObject *pv;

      // 遍历所有键和值
      while (PyDict_Next(op, &amp;amp;i, &amp;amp;pk, &amp;amp;pv)) {
          Py_VISIT(pk);
          Py_VISIT(pv);
      }
      return 0;
  }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;逻辑大概是: 遍历容器对象里面的所有对象, 通过&lt;code&gt;visit_decref&lt;/code&gt;将这些对象的引用计数都-1,&lt;/p&gt;
&lt;p&gt;最终, 遍历完链表之后, 整个可收集对象链表中所有container对象之间的循环引用都被去掉了&lt;/p&gt;
&lt;h5&gt;第四步: 垃圾标记&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;move_unreachable&lt;/code&gt;, 将可收集对象链表中, 根据有效引用计数 不等于0(root对象) 和 等于0(非root对象, 垃圾, 可回收), 一分为二&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; /* Move the unreachable objects from young to unreachable.  After this,
   * all objects in young have gc_refs = GC_REACHABLE, and all objects in
   * unreachable have gc_refs = GC_TENTATIVELY_UNREACHABLE.  All tracked
   * gc objects not in young or unreachable still have gc_refs = GC_REACHABLE.
   * All objects in young after this are directly or indirectly reachable
   * from outside the original young; and all objects in unreachable are
   * not.
   */
  static void
  move_unreachable(PyGC_Head *young, PyGC_Head *unreachable)
  {
      PyGC_Head *gc = young-&amp;gt;gc.gc_next;

      /* Invariants:  all objects &amp;quot;to the left&amp;quot; of us in young have gc_refs
       * = GC_REACHABLE, and are indeed reachable (directly or indirectly)
       * from outside the young list as it was at entry.  All other objects
       * from the original young &amp;quot;to the left&amp;quot; of us are in unreachable now,
       * and have gc_refs = GC_TENTATIVELY_UNREACHABLE.  All objects to the
       * left of us in &amp;#39;young&amp;#39; now have been scanned, and no objects here
       * or to the right have been scanned yet.
       */

      while (gc != young) {
          PyGC_Head *next;

          // 对于root object,
          if (gc-&amp;gt;gc.gc_refs) {
              /* gc is definitely reachable from outside the
               * original &amp;#39;young&amp;#39;.  Mark it as such, and traverse
               * its pointers to find any other objects that may
               * be directly reachable from it.  Note that the
               * call to tp_traverse may append objects to young,
               * so we have to wait until it returns to determine
               * the next object to visit.
               */
              PyObject *op = FROM_GC(gc);
              traverseproc traverse = Py_TYPE(op)-&amp;gt;tp_traverse;
              assert(gc-&amp;gt;gc.gc_refs &amp;gt; 0);
              // 设置其gc-&amp;gt;gc.gc_refs = GC_REACHABLE
              gc-&amp;gt;gc.gc_refs = GC_REACHABLE;

              // 注意这里逻辑, visit_reachable, 意图是?
              (void) traverse(op,
                              (visitproc)visit_reachable,
                              (void *)young);
              next = gc-&amp;gt;gc.gc_next;
              if (PyTuple_CheckExact(op)) {
                  _PyTuple_MaybeUntrack(op);
              }
          }
          // 有效引用计数=0, 非root对象, 移动到unreachable链表中
          else {
              /* This *may* be unreachable.  To make progress,
               * assume it is.  gc isn&amp;#39;t directly reachable from
               * any object we&amp;#39;ve already traversed, but may be
               * reachable from an object we haven&amp;#39;t gotten to yet.
               * visit_reachable will eventually move gc back into
               * young if that&amp;#39;s so, and we&amp;#39;ll see it again.
               */
              next = gc-&amp;gt;gc.gc_next;
              gc_list_move(gc, unreachable);
              gc-&amp;gt;gc.gc_refs = GC_TENTATIVELY_UNREACHABLE;
          }
          gc = next;
      }
  }
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;第五步: 将存活对象放入下一代&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  /* Move reachable objects to next generation. */
  if (young != old) {
      if (generation == NUM_GENERATIONS - 2) {
          long_lived_pending += gc_list_size(young);
      }
      gc_list_merge(young, old);
  }
  else {
      /* We only untrack dicts in full collections, to avoid quadratic
         dict build-up. See issue #14775. */
      untrack_dicts(young);
      long_lived_pending = 0;
      long_lived_total = gc_list_size(young);
  }
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;第六步: 执行回收&lt;/h5&gt;
&lt;p&gt;&lt;em&gt;gcmoudle.c&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  static int
  gc_list_is_empty(PyGC_Head *list)
  {
      return (list-&amp;gt;gc.gc_next == list);
  }


  /* Break reference cycles by clearing the containers involved.  This is
   * tricky business as the lists can be changing and we don&amp;#39;t know which
   * objects may be freed.  It is possible I screwed something up here.
   */
  static void
  delete_garbage(PyGC_Head *collectable, PyGC_Head *old)
  {
      inquiry clear;

      // 遍历
      while (!gc_list_is_empty(collectable)) {
          PyGC_Head *gc = collectable-&amp;gt;gc.gc_next;
          // 得到对象
          PyObject *op = FROM_GC(gc);

          assert(IS_TENTATIVELY_UNREACHABLE(op));
          if (debug &amp;amp; DEBUG_SAVEALL) {
              PyList_Append(garbage, op);
          }
          else {
              // 清引用
              if ((clear = Py_TYPE(op)-&amp;gt;tp_clear) != NULL) {
                  Py_INCREF(op);
                  // 这个操作会调整container对象中每个引用所有对象的引用计数, 从而完成打破循环的最终目标
                  clear(op);
                  Py_DECREF(op);
              }
          }

          // 重新送回到reachable链表.
          // 原因: 在进行clear动作, 如果成功, 会把自己从垃圾收集机制维护的链表中摘除, 由于某些原因, 对象可能在clear的时候, 没有成功完成必要动作, 还不能被销毁, 所以放回去
          if (collectable-&amp;gt;gc.gc_next == gc) {
              /* object is still alive, move it, it may die later */
              gc_list_move(gc, old);
              gc-&amp;gt;gc.gc_refs = GC_REACHABLE;
          }
      }
  }

=&amp;gt; 来看下, list的clear

static int
list_clear(PyListObject *a)
{
    Py_ssize_t i;
    PyObject **item = a-&amp;gt;ob_item;
    if (item != NULL) {
        /* Because XDECREF can recursively invoke operations on
           this list, we make it empty first. */
        i = Py_SIZE(a);
        Py_SIZE(a) = 0;
        a-&amp;gt;ob_item = NULL;
        a-&amp;gt;allocated = 0;
        while (--i &amp;gt;= 0) {
            // 减引用
            Py_XDECREF(item[i]);
        }
        PyMem_FREE(item);
    }
    /* Never fails; the return value can be ignored.
       Note that there is no guarantee that the list is actually empty
       at this point, because XDECREF may have populated it again! */
    return 0;
}


// e.g. 处理list3, 调用其list_clear, 减少list4的引用计数, list4.ob_refcnt=0, 引发对象销毁, 调用list4的list_dealloc


static void
list_dealloc(PyListObject *op)
{
    Py_ssize_t i;
    PyObject_GC_UnTrack(op);  //  从可收集对象链表中去除, 会影响到list4所引用所有对象的引用计数, =&amp;gt; list3.refcnt=0, list3的销毁动作也被触发

    Py_TRASHCAN_SAFE_BEGIN(op)
    if (op-&amp;gt;ob_item != NULL) {
        /* Do it backwards, for Christian Tismer.
           There&amp;#39;s a simple test case where somehow this reduces
           thrashing when a *very* large list is created and
           immediately deleted. */
        i = Py_SIZE(op);
        while (--i &amp;gt;= 0) {
            Py_XDECREF(op-&amp;gt;ob_item[i]);
        }
        PyMem_FREE(op-&amp;gt;ob_item);
    }
    if (numfree &amp;lt; PyList_MAXFREELIST &amp;amp;&amp;amp; PyList_CheckExact(op))
        free_list[numfree++] = op;
    else
        Py_TYPE(op)-&amp;gt;tp_free((PyObject *)op);
    Py_TRASHCAN_SAFE_END(op)
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;gc逻辑&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;分配内存
-&amp;gt; 发现超过阈值了
-&amp;gt; 触发垃圾回收
-&amp;gt; 将所有可收集对象链表放到一起
-&amp;gt; 遍历, 计算有效引用计数
-&amp;gt; 分成 有效引用计数=0 和 有效引用计数 &amp;gt; 0 两个集合
-&amp;gt; 大于0的, 放入到更老一代
-&amp;gt; =0的, 执行回收
-&amp;gt; 回收遍历容器内的各个元素, 减掉对应元素引用计数(破掉循环引用)
-&amp;gt; 执行-1的逻辑, 若发现对象引用计数=0, 触发内存回收
-&amp;gt; python底层内存管理机制回收内存
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;分代回收&lt;/h3&gt;
&lt;p&gt;分代收集: 以空间换时间&lt;/p&gt;
&lt;p&gt;思想: 将系统中的所有内存块根据其存货的时间划分为不同的集合, 每个集合就成为一个"代", 垃圾收集的频率随着"代"的存活时间的增大而减小(活得越长的对象, 就越不可能是垃圾, 就应该减少去收集的频率)&lt;/p&gt;
&lt;p&gt;Python中, 引入了分代收集, 总共三个"代". Python 中, 一个代就是一个链表, 所有属于同一"代"的内存块都链接在同一个链表中&lt;/p&gt;
&lt;h4&gt;表头数据结构&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;gcmodule.c&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  struct gc_generation {
      PyGC_Head head;
      int threshold; /* collection threshold */  // 阈值
      int count; /* count of allocations or collections of younger
                    generations */    // 实时个数
  };
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;三个代的定义&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;  #define NUM_GENERATIONS 3&lt;/span&gt;
&lt;span class="x"&gt;  #define GEN_HEAD(n) (&amp;amp;generations[n].head)&lt;/span&gt;

&lt;span class="x"&gt;  //  三代都放到这个数组中&lt;/span&gt;
&lt;span class="x"&gt;  /* linked lists of container objects */&lt;/span&gt;
&lt;span class="x"&gt;  static struct gc_generation generations[NUM_GENERATIONS] = {&lt;/span&gt;
&lt;span class="x"&gt;      /* PyGC_Head,                               threshold,      count */&lt;/span&gt;
&lt;span class="x"&gt;      &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;GEN_HEAD&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="nv"&gt;GEN_HEAD&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;,           700,            0},    //700个container, 超过立即触发垃圾回收机制&lt;/span&gt;
&lt;span class="x"&gt;      &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;GEN_HEAD&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="nv"&gt;GEN_HEAD&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;,           10,             0},    // 10个&lt;/span&gt;
&lt;span class="x"&gt;      &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;GEN_HEAD&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="nv"&gt;GEN_HEAD&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;,           10,             0},    // 10个&lt;/span&gt;
&lt;span class="x"&gt;  };&lt;/span&gt;

&lt;span class="x"&gt;  PyGC_Head *_PyGC_generation0 = GEN_HEAD(0);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;超过阈值, 触发垃圾回收&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; PyObject *
  _PyObject_GC_Malloc(size_t basicsize)
  {
      // 执行分配
      ....
      generations[0].count++; /* number of allocated GC objects */  //增加一个
      if (generations[0].count &amp;gt; generations[0].threshold &amp;amp;&amp;amp; // 发现大于预支了
          enabled &amp;amp;&amp;amp;
          generations[0].threshold &amp;amp;&amp;amp;
          !collecting &amp;amp;&amp;amp;
          !PyErr_Occurred())
          {
              collecting = 1;
              collect_generations();  //  执行收集
              collecting = 0;
          }
      op = FROM_GC(g);
      return op;
  }

=&amp;gt; collect_generations

  static Py_ssize_t
  collect_generations(void)
  {
      int i;
      Py_ssize_t n = 0;

      /* Find the oldest generation (highest numbered) where the count
       * exceeds the threshold.  Objects in the that generation and
       * generations younger than it will be collected. */

      // 从最老的一代, 开始回收
      for (i = NUM_GENERATIONS-1; i &amp;gt;= 0; i--) {  // 遍历所有generation
          if (generations[i].count &amp;gt; generations[i].threshold) {  // 如果超过了阈值
              /* Avoid quadratic performance degradation in number
                 of tracked objects. See comments at the beginning
                 of this file, and issue #4074.
              */
              if (i == NUM_GENERATIONS - 1
                  &amp;amp;&amp;amp; long_lived_pending &amp;lt; long_lived_total / 4)
                  continue;
              n = collect(i); // 执行收集
              break;  // notice: break了
          }
      }
      return n;
  }
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Python 中的gc模块&lt;/h3&gt;
&lt;p&gt;gc模块, 提供了观察和手动使用gc的接口&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;gc&lt;/span&gt;

&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG_STATS&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG_LEAK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意&lt;code&gt;__del__&lt;/code&gt;给gc带来的影响&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;版权声明：自由转载-非商用-非衍生-保持署名 | &lt;a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"&gt;Creative Commons BY-NC-ND 3.0&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Thu, 02 Oct 2014 13:03:00 +0800</pubDate><guid>tag:,2014-10-02:2014/Python_Garbage_Collection_2014_10_02_13_03.html</guid><category>GC</category><category>Features</category><category>Python</category></item><item><title>Python Memory Management(2)</title><link>/2014/Python_Memory_Management_2014_09_10_23_17.html</link><description>&lt;h2&gt;Python 的内存分配策略&lt;/h2&gt;
&lt;h3&gt;arena&lt;/h3&gt;
&lt;p&gt;多个pool聚合的结果。&lt;/p&gt;
&lt;h3&gt;arena size&lt;/h3&gt;
&lt;p&gt;pool的大小默认值位4KB&lt;/p&gt;
&lt;p&gt;arena的大小默认值256KB, 能放置 256/4=64 个pool&lt;/p&gt;
&lt;p&gt;&lt;em&gt;obmalloc.c&lt;/em&gt;中代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#define ARENA_SIZE              (256 &amp;lt;&amp;lt; 10)     /* 256KB */
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;arena 结构&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;一个完整的arena = arena_object + pool集合&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;typedef uchar block;

/* Record keeping for arenas. */
struct arena_object {
    /* The address of the arena, as returned by malloc.  Note that 0
     * will never be returned by a successful malloc, and is used
     * here to mark an arena_object that doesn&amp;#39;t correspond to an
     * allocated arena.
     */
    uptr address;

    /* Pool-aligned pointer to the next pool to be carved off. */
    block* pool_address;

    /* The number of available pools in the arena:  free pools + never-
     * allocated pools.
     */
    uint nfreepools;

    /* The total number of pools in the arena, whether or not available. */
    uint ntotalpools;

    /* Singly-linked list of available pools. */
    // 单链表, 可用pool集合
    struct pool_header* freepools;

    /* Whenever this arena_object is not associated with an allocated
     * arena, the nextarena member is used to link all unassociated
     * arena_objects in the singly-linked `unused_arena_objects` list.
     * The prevarena member is unused in this case.
     *
     * When this arena_object is associated with an allocated arena
     * with at least one available pool, both members are used in the
     * doubly-linked `usable_arenas` list, which is maintained in
     * increasing order of `nfreepools` values.
     *
     * Else this arena_object is associated with an allocated arena
     * all of whose pools are in use.  `nextarena` and `prevarena`
     * are both meaningless in this case.
     */
    // arena链表
    struct arena_object* nextarena;
    struct arena_object* prevarena;
};
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;arena_object的作用:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;与其他arena连接, 组成双向链表&lt;/li&gt;
&lt;li&gt;维护arena中可用的pool, 单链表&lt;/li&gt;
&lt;li&gt;其他信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;pool_header&lt;/code&gt; 与 &lt;code&gt;arena_object&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pool_header和管理的blocks内存是一块连续的内存 =&amp;gt; pool_header被申请时, 其管理的block集合的内存一并被申请&lt;/li&gt;
&lt;li&gt;arena_object和其管理的内存是分离的 =&amp;gt; arena_object被申请时, 其管理的pool集合的内存没有被申请, 而是在某一时刻建立的联系&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/Python_Memory_Management_2014_09_10_23_17/python-memory-arena.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;arena的两种状态&lt;/h3&gt;
&lt;p&gt;arena存在两种状态: 未使用(没有建立联系)/可用(建立了联系)&lt;/p&gt;
&lt;p&gt;全局由两个链表维护着&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* The head of the singly-linked, NULL-terminated list of available&lt;/span&gt;
&lt;span class="cm"&gt; * arena_objects.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;单链表&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
static&lt;span class="w"&gt; &lt;/span&gt;struct&lt;span class="w"&gt; &lt;/span&gt;arena_object&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;unused_arena_objects&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;NULL&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cm"&gt;/* The head of the doubly-linked, NULL-terminated at each end, list of&lt;/span&gt;
&lt;span class="cm"&gt; * arena_objects associated with arenas that have pools available.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;双向链表&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
static&lt;span class="w"&gt; &lt;/span&gt;struct&lt;span class="w"&gt; &lt;/span&gt;arena_object&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;usable_arenas&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;NULL&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;arena的初始化&lt;/h3&gt;
&lt;p&gt;首先, 来看下初始化相关的一些参数定义
代码&lt;em&gt;obmalloc.c&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* Array of objects used to track chunks of memory (arenas). */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;arena_object&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;数组&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
static&lt;span class="w"&gt; &lt;/span&gt;struct&lt;span class="w"&gt; &lt;/span&gt;arena_object&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;arenas&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;NULL&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cm"&gt;/* Number of slots currently allocated in the `arenas` vector. */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;当前&lt;/span&gt;arenas&lt;span class="err"&gt;中管理的&lt;/span&gt;arena_object&lt;span class="err"&gt;的个数&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;初始化时&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
static&lt;span class="w"&gt; &lt;/span&gt;uint&lt;span class="w"&gt; &lt;/span&gt;maxarenas&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cm"&gt;/* How many arena_objects do we initially allocate?&lt;/span&gt;
&lt;span class="cm"&gt; * 16 = can allocate 16 arenas = 16 * ARENA_SIZE = 4MB before growing the&lt;/span&gt;
&lt;span class="cm"&gt; * `arenas` vector.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;初始化时申请的&lt;/span&gt;arena_object&lt;span class="err"&gt;个数&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;define&lt;span class="w"&gt; &lt;/span&gt;INITIAL_ARENA_OBJECTS&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;16&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cm"&gt;/* Number of arenas allocated that haven&amp;#39;t been free()&amp;#39;d. */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
static&lt;span class="w"&gt; &lt;/span&gt;size_t&lt;span class="w"&gt; &lt;/span&gt;narenas_currently_allocated&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;


&lt;span class="cm"&gt;/* The head of the singly-linked, NULL-terminated list of available&lt;/span&gt;
&lt;span class="cm"&gt; * arena_objects.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;未使用状态&lt;/span&gt;arena&lt;span class="err"&gt;的单链表&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
static&lt;span class="w"&gt; &lt;/span&gt;struct&lt;span class="w"&gt; &lt;/span&gt;arena_object&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;unused_arena_objects&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;NULL&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cm"&gt;/* The head of the doubly-linked, NULL-terminated at each end, list of&lt;/span&gt;
&lt;span class="cm"&gt; * arena_objects associated with arenas that have pools available.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;可用状态&lt;/span&gt;arena&lt;span class="err"&gt;的双向链表&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
static&lt;span class="w"&gt; &lt;/span&gt;struct&lt;span class="w"&gt; &lt;/span&gt;arena_object&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;usable_arenas&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;NULL&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后, 看下&lt;em&gt;obmalloc.c&lt;/em&gt;中arena初始化的代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/*&lt;/span&gt; Allocate a new arena.  If we run out of memory&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;return&lt;/span&gt; NULL.  Else
 &lt;span class="o"&gt;*&lt;/span&gt; allocate a new arena&lt;span class="p"&gt;,&lt;/span&gt; and &lt;span class="kr"&gt;return&lt;/span&gt; the address of an arena_object
 &lt;span class="o"&gt;*&lt;/span&gt; describing the new arena.  It&lt;span class="s"&gt;&amp;#39;s expected that the caller will set&lt;/span&gt;
&lt;span class="s"&gt; * `usable_arenas` to the return value.&lt;/span&gt;
&lt;span class="s"&gt; */&lt;/span&gt;
&lt;span class="s"&gt;static struct arena_object*&lt;/span&gt;
&lt;span class="s"&gt;new_arena(void)&lt;/span&gt;
&lt;span class="s"&gt;{&lt;/span&gt;
&lt;span class="s"&gt;    struct arena_object* arenaobj;&lt;/span&gt;
&lt;span class="s"&gt;    uint excess;        /* number of bytes above pool alignment */&lt;/span&gt;
&lt;span class="s"&gt;    void *address;&lt;/span&gt;
&lt;span class="s"&gt;    int err;&lt;/span&gt;

&lt;span class="s"&gt;    // 判断是否需要扩充&amp;quot;未使用&amp;quot;的arena_object列表&lt;/span&gt;
&lt;span class="s"&gt;    if (unused_arena_objects == NULL) {&lt;/span&gt;
&lt;span class="s"&gt;        uint i;&lt;/span&gt;
&lt;span class="s"&gt;        uint numarenas;&lt;/span&gt;
&lt;span class="s"&gt;        size_t nbytes;&lt;/span&gt;

&lt;span class="s"&gt;        /* Double the number of arena objects on each allocation.&lt;/span&gt;
&lt;span class="s"&gt;         * Note that it&amp;#39;&lt;/span&gt;s possible &lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="sb"&gt;`numarenas`&lt;/span&gt; to overflow.
         &lt;span class="o"&gt;*/&lt;/span&gt;
        &lt;span class="o"&gt;//&lt;/span&gt; 确定需要申请的个数&lt;span class="p"&gt;,&lt;/span&gt; 首次初始化&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 之后每次翻倍
        numarenas &lt;span class="o"&gt;=&lt;/span&gt; maxarenas &lt;span class="o"&gt;?&lt;/span&gt; maxarenas &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; INITIAL_ARENA_OBJECTS&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;numarenas &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; maxarenas&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                &lt;span class="o"&gt;/*&lt;/span&gt; overflow &lt;span class="o"&gt;*/&lt;/span&gt;  &lt;span class="o"&gt;//&lt;/span&gt;溢出了

        &lt;span class="m"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;...&lt;/span&gt;

        nbytes &lt;span class="o"&gt;=&lt;/span&gt; numarenas &lt;span class="o"&gt;*&lt;/span&gt; sizeof&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;arenas&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;//&lt;/span&gt; 申请内存
        arenaobj &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;struct arena_object &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;realloc&lt;span class="p"&gt;(&lt;/span&gt;arenas&lt;span class="p"&gt;,&lt;/span&gt; nbytes&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;arenaobj &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        arenas &lt;span class="o"&gt;=&lt;/span&gt; arenaobj&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="o"&gt;/*&lt;/span&gt; We might need to fix pointers that were copied.  However&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="o"&gt;*&lt;/span&gt; new_arena only gets called when all the pages &lt;span class="kr"&gt;in&lt;/span&gt; the
         &lt;span class="o"&gt;*&lt;/span&gt; previous arenas are full.  Thus&lt;span class="p"&gt;,&lt;/span&gt; there are &lt;span class="o"&gt;*&lt;/span&gt;no&lt;span class="o"&gt;*&lt;/span&gt; pointers
         &lt;span class="o"&gt;*&lt;/span&gt; into the old array. Thus&lt;span class="p"&gt;,&lt;/span&gt; we don&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;t have to worry about&lt;/span&gt;
         &lt;span class="o"&gt;*&lt;/span&gt; invalid pointers.  Just to be sure&lt;span class="p"&gt;,&lt;/span&gt; some asserts&lt;span class="o"&gt;:&lt;/span&gt;
         &lt;span class="o"&gt;*/&lt;/span&gt;
        assert&lt;span class="p"&gt;(&lt;/span&gt;usable_arenas &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        assert&lt;span class="p"&gt;(&lt;/span&gt;unused_arena_objects &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="o"&gt;//&lt;/span&gt; 初始化
        &lt;span class="o"&gt;/*&lt;/span&gt; Put the new arenas on the unused_arena_objects list. &lt;span class="o"&gt;*/&lt;/span&gt;
        &lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;i &lt;span class="o"&gt;=&lt;/span&gt; maxarenas&lt;span class="p"&gt;;&lt;/span&gt; i &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; numarenas&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;i&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            arenas&lt;span class="p"&gt;[&lt;/span&gt;i&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="m"&gt;.&lt;/span&gt;address &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;              &lt;span class="o"&gt;/*&lt;/span&gt; mark as unassociated &lt;span class="o"&gt;*/&lt;/span&gt;
            &lt;span class="o"&gt;//&lt;/span&gt; 新申请的一律为&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 标识着这个arena处于&lt;span class="s"&gt;&amp;quot;未使用&amp;quot;&lt;/span&gt;
            arenas&lt;span class="p"&gt;[&lt;/span&gt;i&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="m"&gt;.&lt;/span&gt;nextarena &lt;span class="o"&gt;=&lt;/span&gt; i &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; numarenas &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt;
                                   &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;arenas&lt;span class="p"&gt;[&lt;/span&gt;i&lt;span class="m"&gt;+1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="o"&gt;//&lt;/span&gt; 将其放入unused_arena_objects链表中
        &lt;span class="o"&gt;//&lt;/span&gt; unused_arena_objects 为新分配内存空间的开头
        &lt;span class="o"&gt;/*&lt;/span&gt; Update globals. &lt;span class="o"&gt;*/&lt;/span&gt;
        unused_arena_objects &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;arenas&lt;span class="p"&gt;[&lt;/span&gt;maxarenas&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="o"&gt;//&lt;/span&gt; 更新数量
        maxarenas &lt;span class="o"&gt;=&lt;/span&gt; numarenas&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;/*&lt;/span&gt; Take the &lt;span class="kr"&gt;next&lt;/span&gt; available arena object off the head of the list. &lt;span class="o"&gt;*/&lt;/span&gt;
    assert&lt;span class="p"&gt;(&lt;/span&gt;unused_arena_objects &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="o"&gt;//&lt;/span&gt; 从unused_arena_objects中&lt;span class="p"&gt;,&lt;/span&gt; 获取一个未使用的object
    arenaobj &lt;span class="o"&gt;=&lt;/span&gt; unused_arena_objects&lt;span class="p"&gt;;&lt;/span&gt;
    unused_arena_objects &lt;span class="o"&gt;=&lt;/span&gt; arenaobj&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;nextarena&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; 更新链表

    &lt;span class="o"&gt;//&lt;/span&gt; 开始处理这个 arenaobject

    assert&lt;span class="p"&gt;(&lt;/span&gt;arenaobj&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;address &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;//&lt;/span&gt; 申请内存&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;256&lt;/span&gt;KB&lt;span class="p"&gt;,&lt;/span&gt; 内存地址赋值给arena的address. 这块内存可用
&lt;span class="c1"&gt;#ifdef ARENAS_USE_MMAP&lt;/span&gt;
    address &lt;span class="o"&gt;=&lt;/span&gt; mmap&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; ARENA_SIZE&lt;span class="p"&gt;,&lt;/span&gt; PROT_READ&lt;span class="o"&gt;|&lt;/span&gt;PROT_WRITE&lt;span class="p"&gt;,&lt;/span&gt;
                   MAP_PRIVATE&lt;span class="o"&gt;|&lt;/span&gt;MAP_ANONYMOUS&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    err &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;address &lt;span class="o"&gt;==&lt;/span&gt; MAP_FAILED&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;#else&lt;/span&gt;
    address &lt;span class="o"&gt;=&lt;/span&gt; malloc&lt;span class="p"&gt;(&lt;/span&gt;ARENA_SIZE&lt;span class="p"&gt;);&lt;/span&gt;
    err &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;address &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;#endif&lt;/span&gt;
    &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;err&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;/*&lt;/span&gt; The allocation failed&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;NULL&lt;/span&gt; after putting the
         &lt;span class="o"&gt;*&lt;/span&gt; arenaobj back.
         &lt;span class="o"&gt;*/&lt;/span&gt;
        arenaobj&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;nextarena &lt;span class="o"&gt;=&lt;/span&gt; unused_arena_objects&lt;span class="p"&gt;;&lt;/span&gt;
        unused_arena_objects &lt;span class="o"&gt;=&lt;/span&gt; arenaobj&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    arenaobj&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;address &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;uptr&lt;span class="p"&gt;)&lt;/span&gt;address&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="o"&gt;++&lt;/span&gt;narenas_currently_allocated&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="o"&gt;//&lt;/span&gt; 设置pool集合相关信息
    arenaobj&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;freepools &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="o"&gt;//&lt;/span&gt; 设置为&lt;span class="kc"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 只有在释放一个pool的时候才有用
    &lt;span class="o"&gt;/*&lt;/span&gt; pool_address &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; first pool&lt;span class="o"&gt;-&lt;/span&gt;aligned address &lt;span class="kr"&gt;in&lt;/span&gt; the arena
       nfreepools &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; number of whole pools that fit after alignment &lt;span class="o"&gt;*/&lt;/span&gt;
    arenaobj&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;pool_address &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;block&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;arenaobj&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;address&lt;span class="p"&gt;;&lt;/span&gt;
    arenaobj&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;nfreepools &lt;span class="o"&gt;=&lt;/span&gt; ARENA_SIZE &lt;span class="o"&gt;/&lt;/span&gt; POOL_SIZE&lt;span class="p"&gt;;&lt;/span&gt;

    assert&lt;span class="p"&gt;(&lt;/span&gt;POOL_SIZE &lt;span class="o"&gt;*&lt;/span&gt; arenaobj&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;nfreepools &lt;span class="o"&gt;==&lt;/span&gt; ARENA_SIZE&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="o"&gt;//&lt;/span&gt; 将pool的起始地址调整为系统页的边界
    &lt;span class="o"&gt;//&lt;/span&gt; 申请到 &lt;span class="m"&gt;256&lt;/span&gt;KB&lt;span class="p"&gt;,&lt;/span&gt; 放弃了一些内存&lt;span class="p"&gt;,&lt;/span&gt; 而将可使用的内存边界pool_address调整到了与系统页对齐
    excess &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;uint&lt;span class="p"&gt;)(&lt;/span&gt;arenaobj&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;address &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; POOL_SIZE_MASK&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;excess &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;--&lt;/span&gt;arenaobj&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;nfreepools&lt;span class="p"&gt;;&lt;/span&gt;
        arenaobj&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;pool_address &lt;span class="o"&gt;+=&lt;/span&gt; POOL_SIZE &lt;span class="o"&gt;-&lt;/span&gt; excess&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    arenaobj&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;ntotalpools &lt;span class="o"&gt;=&lt;/span&gt; arenaobj&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;nfreepools&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kr"&gt;return&lt;/span&gt; arenaobj&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;图示: 初始化arenas数组, 初始化后的所有arena都在&lt;code&gt;unused_arena_objects&lt;/code&gt;单链表里面
&lt;center&gt;&lt;img alt="" src="/article_img/Python_Memory_Management_2014_09_10_23_17/python-memory-arena2.png" /&gt;&lt;/center&gt;
图示: 从arenas取一个arena进行初始化
&lt;center&gt;&lt;img alt="" src="/article_img/Python_Memory_Management_2014_09_10_23_17/python-memory-arena3.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;没有可用的arena?&lt;/h3&gt;
&lt;p&gt;此时&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;// 判断成立
if (unused_arena_objects == NULL) {
    ....
    // 确定需要申请的个数, 首次初始化, 16, 之后每次翻倍
    numarenas = maxarenas ? maxarenas &amp;lt;&amp;lt; 1 : INITIAL_ARENA_OBJECTS;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后, 假设第一次分配了16个, 发现没有arena之后, 第二次处理结果: &lt;code&gt;numarenas = 32&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;即, 数组扩大了一倍。&lt;/p&gt;
&lt;h3&gt;arena分配&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;new&lt;/code&gt;了一个全新的 arena之后,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  void *
  PyObject_Malloc(size_t nbytes)
  {
    // 刚开始没有可用的arena
    if (usable_arenas == NULL) {
        // new一个, 作为双向链表的表头
        usable_arenas = new_arena();
        if (usable_arenas == NULL) {
            UNLOCK();
            goto redirect;
        }

        usable_arenas-&amp;gt;nextarena =
                  usable_arenas-&amp;gt;prevarena = NULL;

    }

    .......

    // 从arena中获取一个pool
    pool = (poolp)usable_arenas-&amp;gt;pool_address;
    assert((block*)pool &amp;lt;= (block*)usable_arenas-&amp;gt;address +
                                 ARENA_SIZE - POOL_SIZE);
    pool-&amp;gt;arenaindex = usable_arenas - arenas;
    assert(&amp;amp;arenas[pool-&amp;gt;arenaindex] == usable_arenas);
    pool-&amp;gt;szidx = DUMMY_SIZE_IDX;

    // 更新 pool_address 向下一个节点
    usable_arenas-&amp;gt;pool_address += POOL_SIZE;
    // 可用节点数量-1
    --usable_arenas-&amp;gt;nfreepools;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;图示: 从全新的arena中获取一个pool&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/Python_Memory_Management_2014_09_10_23_17/python-memory-arena4.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;假设arena是旧的, 怎么分配的pool&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pool = usable_arenas-&amp;gt;freepools;
if (pool != NULL) {
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个arena-&amp;gt;freepools是何方神圣?&lt;/p&gt;
&lt;p&gt;当arena中一整块pool被释放的时候:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;void
PyObject_Free(void *p)
{
    struct arena_object* ao;
    uint nf;  /* ao-&amp;gt;nfreepools */

    /* Link the pool to freepools.  This is a singly-linked
    * list, and pool-&amp;gt;prevpool isn&amp;#39;t used there.
    */
    ao = &amp;amp;arenas[pool-&amp;gt;arenaindex];
    pool-&amp;gt;nextpool = ao-&amp;gt;freepools;
    ao-&amp;gt;freepools = pool;
    nf = ++ao-&amp;gt;nfreepools;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也就是说, 在pool整块被释放的时候, 会将pool加入到&lt;code&gt;arena-&amp;gt;freepools&lt;/code&gt;作为单链表的表头, 然后, 在从非全新arena中分配pool时, 优先从&lt;code&gt;arena-&amp;gt;freepools&lt;/code&gt;里面取, 如果取不到, 再从arena内存块里面获取。&lt;/p&gt;
&lt;p&gt;图示&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/Python_Memory_Management_2014_09_10_23_17/python-memory-arena5.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;一个arena满了之后呢&lt;/h3&gt;
&lt;p&gt;很自然, 从下一个arena中获取&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;void *
PyObject_Malloc(size_t nbytes)
{
    // 当发现用完了最后一个pool!!!!!!!!!!!
    // nfreepools = 0
    if (usable_arenas-&amp;gt;nfreepools == 0) {
    assert(usable_arenas-&amp;gt;nextarena == NULL || usable_arenas-&amp;gt;nextarena-&amp;gt;prevarena == usable_arenas);
    /* Unlink the arena:  it is completely allocated. */

    // 找到下一个节点!
    usable_arenas = usable_arenas-&amp;gt;nextarena;
    // 右下一个
    if (usable_arenas != NULL) {
        usable_arenas-&amp;gt;prevarena = NULL; // 更新下一个节点的prevarens
        assert(usable_arenas-&amp;gt;address != 0);
    }
    // 没有下一个, 此时 usable_arenas = NULL, 下次进行内存分配的时候, 就会从arenas数组中取一个
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意: 这里有个逻辑, 就是每分配一个pool, 就检查是不是用到了最后一个, 如果是, 需要变更&lt;code&gt;usable_arenas&lt;/code&gt;到下一个可用的节点, 如果没有可用的, 那么下次进行内存分配的时候, 会判定从arenas数组中取一个。&lt;/p&gt;
&lt;h3&gt;arena回收&lt;/h3&gt;
&lt;p&gt;内存分配和回收最小单位是block, 当一个block被回收的时候, 可能触发pool被回收, pool被回收, 将会触发arena的回收机制。&lt;/p&gt;
&lt;p&gt;四种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;arena中所有pool都是闲置的(empty), 将arena内存释放, 返回给操作系统。&lt;/li&gt;
&lt;li&gt;如果arena中之前所有的pool都是占用的(used), 现在释放了一个pool(empty), 需要将 arena加入到usable_arenas, 会加入链表表头。&lt;/li&gt;
&lt;li&gt;如果arena中empty的pool个数n, 则从useable_arenas开始寻找可以插入的位置. 将arena插入。 (useable_arenas是一个有序链表, 按empty pool的个数, 保证empty pool数量越多, 被使用的几率越小, 最终被整体释放的机会越大)&lt;/li&gt;
&lt;li&gt;其他情况, 不对arena 进行处理。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;具体可以看&lt;code&gt;PyObject_Free&lt;/code&gt;的代码。&lt;/p&gt;
&lt;h2&gt;内存分配步骤&lt;/h2&gt;
&lt;p&gt;好的, 到这里, 我们已经知道了block和pool的关系(包括pool怎么管理block的), 以及arena和pool的关系(怎么从arena中拉到可用的pool)&lt;/p&gt;
&lt;p&gt;那么, 在分析&lt;code&gt;PyObject_Malloc(size_t nbytes)&lt;/code&gt;如何进行内存分配的时候, 我们就刨除掉这些管理代码。&lt;/p&gt;
&lt;p&gt;关注: 如何寻找得到一块可用的nbytes的block内存。&lt;/p&gt;
&lt;p&gt;其实代码那么多, 寻址得到对应的block也就这么几行代码, 其他代码都是pool没有, 找arena, 申请arena, arena没有, 找arenas, 最终的到一块pool, 初始化, 返回第一个block。&lt;/p&gt;
&lt;p&gt;如果有的情况, 用现成的:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pool = usedpools[size + size];
if pool可用:
    pool 没满, 取一个block返回
    pool 满了, 从下一个pool取一个block返回
否则:
    获取arena, 从里面初始化一个pool, 拿到第一个block, 返回
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从上面这个判断逻辑来看, 内存分配其实主要操作的是pool, 跟arena并不是基本的操作单元(只是用来管理pool的)&lt;/p&gt;
&lt;p&gt;结论: 进行内存分配和销毁, 所有操作都是在pool上进行的。
&lt;code&gt;usedpools&lt;/code&gt; 是什么鬼? 其实是可用pool缓冲池, 后面说。&lt;/p&gt;
&lt;h2&gt;内存池&lt;/h2&gt;
&lt;h3&gt;arena 内存池的大小&lt;/h3&gt;
&lt;p&gt;取决于用户, Python提供的编译符号, 用于决定是否控制。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;obmalloc.c&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#ifdef WITH_MEMORY_LIMITS&lt;/span&gt;
&lt;span class="cp"&gt;#ifndef SMALL_MEMORY_LIMIT&lt;/span&gt;
&lt;span class="cp"&gt;#define SMALL_MEMORY_LIMIT      (64 * 1024 * 1024)      &lt;/span&gt;&lt;span class="cm"&gt;/* 64 MB -- more? */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;

&lt;span class="cp"&gt;#ifdef WITH_MEMORY_LIMITS&lt;/span&gt;
&lt;span class="cp"&gt;#define MAX_ARENAS              (SMALL_MEMORY_LIMIT / ARENA_SIZE)&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;具体使用中, python并不直接与arenas和arena打交道, 当Python申请内存时, 最基本的操作单元并不是arena, 而是pool。&lt;/p&gt;
&lt;p&gt;问题: pool中所有block的size一样, 但是在arena中, 每个pool的size都可能不一样, 那么最终这些pool是怎么维护的? 怎么根据大小找到需要的block所在的pool? =&amp;gt; usedpools&lt;/p&gt;
&lt;h3&gt;pool在内存池中的三种状态&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;used状态: pool中至少有一个block已经被使用, 并且至少有一个block未被使用. 这种状态的pool受控于Python内部维护的usedpool数组。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;full状态: pool中所有的block都已经被使用, 这种状态的pool在arena中, 但不在arena的freepools链表中
处于full的pool各自独立, 不会被链表维护起来。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;empty状态: pool中所有block都未被使用, 处于这个状态的pool的集合通过其pool_header中的nextpool构成一个链表, 链表的表头是arena_object中的freepools。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;usedpools&lt;/h3&gt;
&lt;p&gt;usedpools数组: 维护着所有处于used状态的pool, 当申请内存的时候, 会通过usedpools寻找到一块可用的(处于used状态的)pool, 从中分配一个block。&lt;/p&gt;
&lt;p&gt;结构:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  #define SMALL_REQUEST_THRESHOLD 512
  // 512/8 = 64
  #define NB_SMALL_SIZE_CLASSES   (SMALL_REQUEST_THRESHOLD / ALIGNMENT)

  #define PTA(x)  ((poolp )((uchar *)&amp;amp;(usedpools[2*(x)]) - 2*sizeof(block *)))
  #define PT(x)   PTA(x), PTA(x)

  // 2 * ((64 + 7) / 8) * 8 = 128, 大小为128的数组
  static poolp usedpools[2 * ((NB_SMALL_SIZE_CLASSES + 7) / 8) * 8] = {
      PT(0), PT(1), PT(2), PT(3), PT(4), PT(5), PT(6), PT(7)
  #if NB_SMALL_SIZE_CLASSES &amp;gt; 8
      , PT(8), PT(9), PT(10), PT(11), PT(12), PT(13), PT(14), PT(15)
  #if NB_SMALL_SIZE_CLASSES &amp;gt; 16
      , PT(16), PT(17), PT(18), PT(19), PT(20), PT(21), PT(22), PT(23)
  #if NB_SMALL_SIZE_CLASSES &amp;gt; 24
      , PT(24), PT(25), PT(26), PT(27), PT(28), PT(29), PT(30), PT(31)
  #if NB_SMALL_SIZE_CLASSES &amp;gt; 32
      , PT(32), PT(33), PT(34), PT(35), PT(36), PT(37), PT(38), PT(39)
  #if NB_SMALL_SIZE_CLASSES &amp;gt; 40
      , PT(40), PT(41), PT(42), PT(43), PT(44), PT(45), PT(46), PT(47)
  #if NB_SMALL_SIZE_CLASSES &amp;gt; 48
      , PT(48), PT(49), PT(50), PT(51), PT(52), PT(53), PT(54), PT(55)
  #if NB_SMALL_SIZE_CLASSES &amp;gt; 56
      , PT(56), PT(57), PT(58), PT(59), PT(60), PT(61), PT(62), PT(63)
  #if NB_SMALL_SIZE_CLASSES &amp;gt; 64
  #error &amp;quot;NB_SMALL_SIZE_CLASSES should be less than 64&amp;quot;
  #endif /* NB_SMALL_SIZE_CLASSES &amp;gt; 64 */
  #endif /* NB_SMALL_SIZE_CLASSES &amp;gt; 56 */
  #endif /* NB_SMALL_SIZE_CLASSES &amp;gt; 48 */
  #endif /* NB_SMALL_SIZE_CLASSES &amp;gt; 40 */
  #endif /* NB_SMALL_SIZE_CLASSES &amp;gt; 32 */
  #endif /* NB_SMALL_SIZE_CLASSES &amp;gt; 24 */
  #endif /* NB_SMALL_SIZE_CLASSES &amp;gt; 16 */
  #endif /* NB_SMALL_SIZE_CLASSES &amp;gt;  8 */
  };

  即

  // 得到usedpools数组
static poolp usedpools[128] = {
   PTA(0), PTA(0), PTA(1), PTA(1), PTA(2), PTA(2), PTA(3), PTA(3),
   ....
   PTA(63), PTA(63)
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;解开看(&lt;em&gt;obmalloc.c&lt;/em&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  typedef uchar block;

  /* Pool for small blocks. */
  struct pool_header {
      union { block *_padding;
              uint count; } ref;          /* number of allocated blocks    */
      block *freeblock;                   /* pool&amp;#39;s free list head         */
      struct pool_header *nextpool;       /* next pool of this size class  */
      struct pool_header *prevpool;       /* previous pool       &amp;quot;&amp;quot;        */
      uint arenaindex;                    /* index into arenas of base adr */
      uint szidx;                         /* block size class index        */
      uint nextoffset;                    /* bytes to virgin block         */
      uint maxnextoffset;                 /* largest valid nextoffset      */
  };
  typedef struct pool_header *poolp;
  usedpools[0] = PTA(0) = ((poolp )((uchar *)&amp;amp;(usedpools[0]) - 2*sizeof(block *)))
  usedpools[1] = PTA(0) = ((poolp )((uchar *)&amp;amp;(usedpools[0]) - 2*sizeof(block *)))



  *p = usedpools[0] =&amp;gt; p-&amp;gt;nextpool and p-&amp;gt;prevpool are both p
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;为了看懂这步的trick, 心好累&amp;gt;_&amp;lt;#&lt;/p&gt;
&lt;p&gt;直接上图：&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/Python_Memory_Management_2014_09_10_23_17/python-memory-usedpool.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;new一个pool时维护&lt;/h3&gt;
&lt;p&gt;init获得的情况, 其实就是将刚刚从arena中获取的pool加入到 usedpools 对应的双向链表中, 然后初始化, 然后返回block。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;     init_pool:
          /* Frontlink to used pools. */

          // 1. 获取得到usedpools链表头
          next = usedpools[size + size]; /* == prev */

          // 2. 将新的pool加入到双向链表
          pool-&amp;gt;nextpool = next;
          pool-&amp;gt;prevpool = next;
          next-&amp;gt;nextpool = pool;
          next-&amp;gt;prevpool = pool;
          pool-&amp;gt;ref.count = 1;

          // 3. 后面的是具体pool和block的了
          if (pool-&amp;gt;szidx == size) {
              /* Luckily, this pool last contained blocks
               * of the same size class, so its header
               * and free list are already initialized.
               */
              bp = pool-&amp;gt;freeblock;
              pool-&amp;gt;freeblock = *(block **)bp;
              UNLOCK();
              return (void *)bp;
          }
          /*
           * Initialize the pool header, set up the free list to
           * contain just the second block, and return the first
           * block.
           */
          pool-&amp;gt;szidx = size;
          size = INDEX2SIZE(size);
          bp = (block *)pool + POOL_OVERHEAD;
          pool-&amp;gt;nextoffset = POOL_OVERHEAD + (size &amp;lt;&amp;lt; 1);
          pool-&amp;gt;maxnextoffset = POOL_SIZE - size;
          pool-&amp;gt;freeblock = bp + size;
          *(block **)(pool-&amp;gt;freeblock) = NULL;
          UNLOCK();
          return (void *)bp;   // here
      }
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;从现有pool中获取block&lt;/h3&gt;
&lt;p&gt;从现有的pool, 其实就是 usedpools得到双向链表头部, 判断是不是空链表, 不是的话代表有可用的pool, 直接从里面获取。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  if ((nbytes - 1) &amp;lt; SMALL_REQUEST_THRESHOLD) {
      LOCK();
      /*
       * Most frequent paths first
       */
      size = (uint)(nbytes - 1) &amp;gt;&amp;gt; ALIGNMENT_SHIFT;
      pool = usedpools[size + size];

      // 注意这里的判断, pool != pool-&amp;gt; nextpool 表示得到的链表不是空的
      if (pool != pool-&amp;gt;nextpool) {
          /*
           * There is a used pool for this size class.
           * Pick up the head block of its free list.
           */
          ++pool-&amp;gt;ref.count;
          bp = pool-&amp;gt;freeblock;
          assert(bp != NULL);
          if ((pool-&amp;gt;freeblock = *(block **)bp) != NULL) {
              UNLOCK();
              return (void *)bp;
          }
          /*
           * Reached the end of the free list, try to extend it.
           */
          if (pool-&amp;gt;nextoffset &amp;lt;= pool-&amp;gt;maxnextoffset) {
              /* There is room for another block. */
              pool-&amp;gt;freeblock = (block*)pool +
                                pool-&amp;gt;nextoffset;
              pool-&amp;gt;nextoffset += INDEX2SIZE(size);
              *(block **)(pool-&amp;gt;freeblock) = NULL;
              UNLOCK();
              return (void *)bp;
          }
          /* Pool is full, unlink from used pools. */
          next = pool-&amp;gt;nextpool;
          pool = pool-&amp;gt;prevpool;
          next-&amp;gt;prevpool = pool;
          pool-&amp;gt;nextpool = next;
          UNLOCK();
          return (void *)bp;   // here
      }
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;全局结构&lt;/h3&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/Python_Memory_Management_2014_09_10_23_17/python-memory-usedpool2.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;先这样吧, Python中整个内存池基本结构和机制大概如此, 是不是发现有好多数组/链表等等, 在分配/回收上处理下做成各种池.....
后面还有内存相关的就是垃圾收集了, 后面再说了吧wklken2015-08-29&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;版权声明：自由转载-非商用-非衍生-保持署名 | Creative Commons BY-NC-ND 3.0 &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Wed, 10 Sep 2014 23:17:00 +0800</pubDate><guid>tag:,2014-09-10:2014/Python_Memory_Management_2014_09_10_23_17.html</guid><category>Memory</category><category>Features</category><category>Python</category></item><item><title>Python Memory Management(1)</title><link>/2014/Python_Memory_Management_2014_09_09_20_04.html</link><description>&lt;h2&gt;Python的内存管理架构&lt;/h2&gt;
&lt;h3&gt;基本分层&lt;/h3&gt;
&lt;p&gt;在Objects/obmalloc.c源码中, 给了一个分层划分&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    _____   ______   ______       ________
   [ int ] [ dict ] [ list ] ... [ string ]       Python core         |
+3 | &amp;lt;----- Object-specific memory -----&amp;gt; | &amp;lt;-- Non-object memory --&amp;gt; |
    _______________________________       |                           |
   [   Python&amp;#39;s object allocator   ]      |                           |
+2 | ####### Object memory ####### | &amp;lt;------ Internal buffers ------&amp;gt; |
    ______________________________________________________________    |
   [          Python&amp;#39;s raw memory allocator (PyMem_ API)          ]   |
+1 | &amp;lt;----- Python memory (under PyMem manager&amp;#39;s control) ------&amp;gt; |   |
    __________________________________________________________________
   [    Underlying general-purpose allocator (ex: C library malloc)   ]
 0 | &amp;lt;------ Virtual memory allocated for the python process -------&amp;gt; |

   =========================================================================
    _______________________________________________________________________
   [                OS-specific Virtual Memory Manager (VMM)               ]
-1 | &amp;lt;--- Kernel dynamic storage allocation &amp;amp; management (page-based) ---&amp;gt; |
    __________________________________   __________________________________
   [                                  ] [                                  ]
-2 | &amp;lt;-- Physical memory: ROM/RAM --&amp;gt; | | &amp;lt;-- Secondary storage (swap) --&amp;gt; |
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;layer 3: Object-specific memory(int/dict/list/string....)
         Python 实现并维护
         更高抽象层次的内存管理策略, 主要是各类特定对象的缓冲池机制. 具体见前面几篇涉及的内存分配机制

layer 2: Python&amp;#39;s object allocator
         Python 实现并维护
         实现了创建/销毁Python对象的接口(PyObject_New/Del), 涉及对象参数/引用计数等

layer 1: Python&amp;#39;s raw memory allocator (PyMem_ API)
         Python 实现并维护, 包装了第0层的内存管理接口, 提供统一的raw memory管理接口
         封装的原因: 不同操作系统 C 行为不一定一致, 保证可移植性, 相同语义相同行为

layer 0: Underlying general-purpose allocator (ex: C library malloc)
         操作系统提供的内存管理接口, 由操作系统实现并管理, Python不能干涉这一层的行为
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第三层layer 3前面已经介绍过了, 几乎每种常用的数据类型都伴有一套缓冲池机制。&lt;/p&gt;
&lt;p&gt;在这里, 我们关注的是layer 2/1，&lt;/p&gt;
&lt;p&gt;简要介绍下layer 1, 然后重点关注layer 2, 这才是重点。&lt;/p&gt;
&lt;h3&gt;layer 1: PyMem_ API&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;PyMem_ API&lt;/code&gt;是对操作系统内存管理接口进行的封装&lt;/p&gt;
&lt;p&gt;查看pymem.h可以看到&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;// Raw memory interface
// 这里存在三个宏定义, 宏可以避免一次函数调用的开销, 提高运行效率
// 不允许非配空间大小为0的内存空间
#define PyMem_MALLOC(n)     ((size_t)(n) &amp;gt; (size_t)PY_SSIZE_T_MAX ? NULL \
                : malloc((n) ? (n) : 1))


#define PyMem_REALLOC(p, n) ((size_t)(n) &amp;gt; (size_t)PY_SSIZE_T_MAX  ? NULL \
                : realloc((p), (n) ? (n) : 1))
#define PyMem_FREE      free

// 这里做了三个函数的声明, 平台独立的 malloc/realloc/free
PyAPI_FUNC(void *) PyMem_Malloc(size_t);
PyAPI_FUNC(void *) PyMem_Realloc(void *, size_t);
PyAPI_FUNC(void) PyMem_Free(void *);

// ============================================================

// Type-oriented memory interface
// 这里还有三个类型相关的内存接口, 批量分配/重分配 n 个 类型为 type内存
#define PyMem_New(type, n) \
  ( ((size_t)(n) &amp;gt; PY_SSIZE_T_MAX / sizeof(type)) ? NULL :  \
    ( (type *) PyMem_Malloc((n) * sizeof(type)) ) )
#define PyMem_NEW(type, n) \
  ( ((size_t)(n) &amp;gt; PY_SSIZE_T_MAX / sizeof(type)) ? NULL :  \
    ( (type *) PyMem_MALLOC((n) * sizeof(type)) ) )

#define PyMem_Resize(p, type, n) \
  ( (p) = ((size_t)(n) &amp;gt; PY_SSIZE_T_MAX / sizeof(type)) ? NULL :    \
    (type *) PyMem_Realloc((p), (n) * sizeof(type)) )
#define PyMem_RESIZE(p, type, n) \
  ( (p) = ((size_t)(n) &amp;gt; PY_SSIZE_T_MAX / sizeof(type)) ? NULL :    \
    (type *) PyMem_REALLOC((p), (n) * sizeof(type)) )
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后&lt;code&gt;object.c&lt;/code&gt;中, 我们关注实现, 三个实现的函数调用了对应的宏&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;// 使用 C 写Python扩展模块时使用函数而不是对应的宏
void *
PyMem_Malloc(size_t nbytes)
{
    return PyMem_MALLOC(nbytes);
}

void *
PyMem_Realloc(void *p, size_t nbytes)
{
    return PyMem_REALLOC(p, nbytes);
}

void
PyMem_Free(void *p)
{
    PyMem_FREE(p);
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这些接口都相对简单&lt;/p&gt;
&lt;p&gt;好了, 结束, 开始关注layer 2: Python's object allocator。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Python 的内存分配策略&lt;/h2&gt;
&lt;p&gt;先来看Objects/obmalloc.c中的一段注释&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * &amp;quot;Memory management is where the rubber meets the road -- if we do the wrong&lt;/span&gt;
&lt;span class="cm"&gt; * thing at any level, the results will not be good. And if we don&amp;#39;t make the&lt;/span&gt;
&lt;span class="cm"&gt; * levels work well together, we are in serious trouble.&amp;quot; (1)&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * (1) Paul R. Wilson, Mark S. Johnstone, Michael Neely, and David Boles,&lt;/span&gt;
&lt;span class="cm"&gt; *    &amp;quot;Dynamic Storage Allocation: A Survey and Critical Review&amp;quot;,&lt;/span&gt;
&lt;span class="cm"&gt; *    in Proc. 1995 Int&amp;#39;l. Workshop on Memory Management, September 1995.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python引入了内存池机制, 用于管理对小块内存的申请和释放&lt;/p&gt;
&lt;p&gt;逻辑&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果要分配的内存空间大于 SMALL_REQUEST_THRESHOLD bytes(512 bytes), 将直接使用layer 1的内存分配接口进行分配&lt;/li&gt;
&lt;li&gt;否则, 使用不同的block来满足分配需求&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;整个小块内存池可以视为一个层次结构&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;内存池(概念上的, 标识Python对于整个小块内存分配和释放的内存管理机制)&lt;/li&gt;
&lt;li&gt;arena&lt;/li&gt;
&lt;li&gt;pool&lt;/li&gt;
&lt;li&gt;block&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;block&lt;/h3&gt;
&lt;p&gt;Python内存的最小单位, 所有block长度都是8字节对齐的。&lt;/p&gt;
&lt;p&gt;注意这里block只是一个概念, 在源代码中并没有实体存在。&lt;/p&gt;
&lt;p&gt;不同类型block, 对应不同内存大小, 这个内存大小的值被称为size class。&lt;/p&gt;
&lt;p&gt;不同长度的block：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; * Request in bytes     Size of allocated block      Size class idx
 * ----------------------------------------------------------------
 *        1-8                     8                       0
 *        9-16                   16                       1
 *       17-24                   24                       2
 *       25-32                   32                       3
 *       33-40                   40                       4
 *       41-48                   48                       5
 *       49-56                   56                       6
 *       57-64                   64                       7
 *       65-72                   72                       8
 *        ...                   ...                     ...
 *      497-504                 504                      62
 *      505-512                 512                      63
 *
 *      0, SMALL_REQUEST_THRESHOLD + 1 and up: routed to the underlying
 *      allocator.
 */
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;例如&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;申请一块大小28字节的内存, 实际从内存中划到32字节的一个block (从size class index为3的pool里面划出)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/Python_Memory_Management_2014_09_09_20_04/python-memory-blocks.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;注意: 这里有个&lt;code&gt;Size class idx&lt;/code&gt;, 这个主要为了后面pool中用到。&lt;/p&gt;
&lt;p&gt;size class和size class index之间的转换&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#define ALIGNMENT               8               /* must be 2^N */
#define ALIGNMENT_SHIFT         3
#define ALIGNMENT_MASK          (ALIGNMENT - 1)

// size class index =&amp;gt; size class
#define INDEX2SIZE(I) (((uint)(I) + 1) &amp;lt;&amp;lt; ALIGNMENT_SHIFT)

/* 即
    (0+1) * 8 = 8
    (1+1) * 8 = 16
*/

// size class =&amp;gt; size class index
size = (uint)(nbytes - 1) &amp;gt;&amp;gt; ALIGNMENT_SHIFT;

/* 即
    (8 - 1) / 8 = 0
    (16 - 8) / 8 = 1
*/
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;pool&lt;/h3&gt;
&lt;p&gt;pool管理block, 一个pool管理着一堆有固定大小的内存块&lt;/p&gt;
&lt;p&gt;本质: pool管理着一大块内存, 它有一定的策略, 将这块大的内存划分为多个大小一致的小块内存。&lt;/p&gt;
&lt;h3&gt;pool size&lt;/h3&gt;
&lt;p&gt;在Python中, 一个pool的大小通常为一个系统内存页， 4kB。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;obmalloc.c&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#define SYSTEM_PAGE_SIZE        (4 * 1024)
#define SYSTEM_PAGE_SIZE_MASK   (SYSTEM_PAGE_SIZE - 1)

#define POOL_SIZE               SYSTEM_PAGE_SIZE        /* must be 2^N */
#define POOL_SIZE_MASK          SYSTEM_PAGE_SIZE_MASK
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;pool组成&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;pool的4kB内存 = pool_header + block集合(N多大小一样的block)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;pool_header
    /&lt;em&gt; Pool for small blocks. &lt;/em&gt;/
    struct pool_header {
        union { block &lt;em&gt;_padding;
                uint count; } ref;          /&lt;/em&gt; number of allocated blocks    &lt;em&gt;/
        block &lt;/em&gt;freeblock;                   /&lt;em&gt; pool's free list head         &lt;/em&gt;/
        struct pool_header &lt;em&gt;nextpool;       /&lt;/em&gt; next pool of this size class  &lt;em&gt;/
        struct pool_header &lt;/em&gt;prevpool;       /&lt;em&gt; previous pool       ""        &lt;/em&gt;/
        uint arenaindex;                    /&lt;em&gt; index into arenas of base adr &lt;/em&gt;/
        uint szidx;                         /&lt;em&gt; block size class index        &lt;/em&gt;/ - size class index
        uint nextoffset;                    /&lt;em&gt; bytes to virgin block         &lt;/em&gt;/
        uint maxnextoffset;                 /&lt;em&gt; largest valid nextoffset      &lt;/em&gt;/
    };&lt;/p&gt;
&lt;p&gt;pool_header的作用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;与其他pool链接, 组成双向链表&lt;/li&gt;
&lt;li&gt;维护pool中可用的block, 单链表&lt;/li&gt;
&lt;li&gt;保存 szidx , 这个和该pool中block的大小有关系, (block size=8, szidx=0), (block size=16, szidx=1)...用于内存分配时匹配到拥有对应大小block的pool&lt;/li&gt;
&lt;li&gt;arenaindex, 后面说&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结构图: &lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/Python_Memory_Management_2014_09_09_20_04/python-memory-pools.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;pool初始化&lt;/h3&gt;
&lt;p&gt;从内存中初始化一个全新的空的&lt;code&gt;pool&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Objects/obmalloc.c&lt;/em&gt;的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;void *
PyObject_Malloc(size_t nbytes)
{
  ...
    init_pool:
    // 1. 连接到 used_pools 双向链表, 作为表头
    // 注意, 这里 usedpools[0] 保存着 block size = 8 的所有used_pools的表头
    /* Frontlink to used pools. */
    next = usedpools[size + size]; /* == prev */
    pool-&amp;gt;nextpool = next;
    pool-&amp;gt;prevpool = next;
    next-&amp;gt;nextpool = pool;
    next-&amp;gt;prevpool = pool;
    pool-&amp;gt;ref.count = 1;

    // 如果已经初始化过了...这里看初始化, 跳过
    if (pool-&amp;gt;szidx == size) {
    /* Luckily, this pool last contained blocks
    * of the same size class, so its header
    * and free list are already initialized.
    */
        bp = pool-&amp;gt;freeblock;
        pool-&amp;gt;freeblock = *(block **)bp;
        UNLOCK();
        return (void *)bp;
    }


    /*
     * Initialize the pool header, set up the free list to
     * contain just the second block, and return the first
     * block.
     */
    // 开始初始化pool_header
    // 这里 size = (uint)(nbytes - 1) &amp;gt;&amp;gt; ALIGNMENT_SHIFT;  其实是Size class idx, 即szidx

    pool-&amp;gt;szidx = size;

    // 计算获得每个block的size
    size = INDEX2SIZE(size);

    // 注意 #define POOL_OVERHEAD           ROUNDUP(sizeof(struct pool_header))
    // bp =&amp;gt; 初始化为pool + pool_header size,  跳过pool_header的内存
    bp = (block *)pool + POOL_OVERHEAD;

    // 计算偏移量, 这里的偏移量是绝对值
    // #define POOL_SIZE               SYSTEM_PAGE_SIZE        /* must be 2^N */
    // POOL_SIZE = 4kb, POOL_OVERHEAD = pool_header size
    // 下一个偏移位置: pool_header size + 2 * size

    pool-&amp;gt;nextoffset = POOL_OVERHEAD + (size &amp;lt;&amp;lt; 1);
    // 4kb - size
    pool-&amp;gt;maxnextoffset = POOL_SIZE - size;

    // freeblock指向 bp + size = pool_header size + size
    pool-&amp;gt;freeblock = bp + size;

    // 赋值NULL
    *(block **)(pool-&amp;gt;freeblock) = NULL;
    UNLOCK();
    return (void *)bp;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;初始化后的图&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/Python_Memory_Management_2014_09_09_20_04/python-memory-pools2.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;pool进行block分配 - 0 总体代码&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; if (pool != pool-&amp;gt;nextpool) {   //
    /*
    * There is a used pool for this size class.
    * Pick up the head block of its free list.
    */
    ++pool-&amp;gt;ref.count;
    bp = pool-&amp;gt;freeblock; // 指针指向空闲block起始位置
    assert(bp != NULL);

    // 代码-1
    // 调整 pool-&amp;gt;freeblock (假设A节点)指向链表下一个, 即bp首字节指向的下一个节点(假设B节点) , 如果此时!= NULL
    // 表示 A节点可用, 直接返回
    if ((pool-&amp;gt;freeblock = *(block **)bp) != NULL) {
        UNLOCK();
        return (void *)bp;
    }

    // 代码-2
    /*
    * Reached the end of the free list, try to extend it.
    */
    // 有足够的空间, 分配一个, pool-&amp;gt;freeblock 指向后移
    if (pool-&amp;gt;nextoffset &amp;lt;= pool-&amp;gt;maxnextoffset) {
        /* There is room for another block. */
        // 变更位置信息
        pool-&amp;gt;freeblock = (block*)pool +
                              pool-&amp;gt;nextoffset;
        pool-&amp;gt;nextoffset += INDEX2SIZE(size);


        *(block **)(pool-&amp;gt;freeblock) = NULL; // 注意, 指向NULL
        UNLOCK();

        // 返回bp
        return (void *)bp;
    }

    // 代码-3
    /* Pool is full, unlink from used pools. */  // 满了, 需要从下一个pool获取
    next = pool-&amp;gt;nextpool;
    pool = pool-&amp;gt;prevpool;
    next-&amp;gt;prevpool = pool;
    pool-&amp;gt;nextpool = next;
    UNLOCK();
    return (void *)bp;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;pool进行block分配 - 1 刚开始&lt;/h3&gt;
&lt;p&gt;内存块尚未分配完, 且此时不存在回收的block, 全新进来的时候, 分配第一块block。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(pool-&amp;gt;freeblock = *(block **)bp) == NULL
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所以进入的逻辑是代码-2&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;bp = pool-&amp;gt;freeblock; // 指针指向空闲block起始位置

.....


// 代码-2
/*
 * Reached the end of the free list, try to extend it.
 */
// 有足够的空间, 分配一个, pool-&amp;gt;freeblock 指向后移
if (pool-&amp;gt;nextoffset &amp;lt;= pool-&amp;gt;maxnextoffset) {
    /* There is room for another block. */
    // 变更位置信息
    pool-&amp;gt;freeblock = (block*)pool +
    pool-&amp;gt;nextoffset;
    pool-&amp;gt;nextoffset += INDEX2SIZE(size);

    *(block **)(pool-&amp;gt;freeblock) = NULL; // 注意, 指向NULL
    UNLOCK();

    // 返回bp
    return (void *)bp;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;结果图示：&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/Python_Memory_Management_2014_09_09_20_04/python-memory-pools3.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;pool进行block分配 - 2 回收了某几个block&lt;/h3&gt;
&lt;p&gt;回收涉及的代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;void
PyObject_Free(void *p)
{
    poolp pool;
    block *lastfree;
    poolp next, prev;
    uint size;

    pool = POOL_ADDR(p);
    if (Py_ADDRESS_IN_RANGE(p, pool)) {
        /* We allocated this address. */
        LOCK();
        /* Link p to the start of the pool&amp;#39;s freeblock list.  Since
         * the pool had at least the p block outstanding, the pool
         * wasn&amp;#39;t empty (so it&amp;#39;s already in a usedpools[] list, or
         * was full and is in no list -- it&amp;#39;s not in the freeblocks
         * list in any case).
         */
        assert(pool-&amp;gt;ref.count &amp;gt; 0);            /* else it was empty */
        // p被释放, p的第一个字节值被设置为当前freeblock的值
        *(block **)p = lastfree = pool-&amp;gt;freeblock;
        // freeblock被更新为指向p的首地址
        pool-&amp;gt;freeblock = (block *)p;

        // 相当于往list中头插入了一个节点

     ...
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;没释放一个block, 该block就会变成 &lt;code&gt;pool-&amp;gt;freeblock&lt;/code&gt; 的头节点, 而单链表一个节点如何指向下一个节点呢? 通过赋值, 节点内存空间保存着下个节点的地址, 最后一个节点指向NULL(知道上面代码-1的判断条件了吧&amp;gt;_&amp;lt;#)&lt;/p&gt;
&lt;p&gt;假设已经连续分配了5块, 第1块和第4块被释放&lt;/p&gt;
&lt;p&gt;此时内存图示：&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/Python_Memory_Management_2014_09_09_20_04/python-memory-pools4.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;此时再一个block分配调用进来, 执行分配, 进入的逻辑是代码-1&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;bp = pool-&amp;gt;freeblock; // 指针指向空闲block起始位置
// 代码-1
// 调整 pool-&amp;gt;freeblock (假设A节点)指向链表下一个, 即bp首字节指向的下一个节点(假设B节点) , 如果此时!= NULL
// 表示 A节点可用, 直接返回
if ((pool-&amp;gt;freeblock = *(block **)bp) != NULL) {
    UNLOCK();
    return (void *)bp;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/Python_Memory_Management_2014_09_09_20_04/python-memory-pools5.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;pool进行block分配 - 3 pool用完了&lt;/h3&gt;
&lt;p&gt;pool中内存空间都用完了, 进入代码-3&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;bp = pool-&amp;gt;freeblock; // 指针指向空闲block起始位置


// 代码-3
/* Pool is full, unlink from used pools. */  // 满了, 需要从下一个pool获取
next = pool-&amp;gt;nextpool;
pool = pool-&amp;gt;prevpool;
next-&amp;gt;prevpool = pool;
pool-&amp;gt;nextpool = next;
UNLOCK();
return (void *)bp;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;获取下一个pool(链表上每个pool的block size都是一致的)
好了, pool到此位置。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;版权声明：自由转载-非商用-非衍生-保持署名 | &lt;a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"&gt;Creative Commons BY-NC-ND 3.0&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Tue, 09 Sep 2014 20:04:00 +0800</pubDate><guid>tag:,2014-09-09:2014/Python_Memory_Management_2014_09_09_20_04.html</guid><category>Memory</category><category>Features</category><category>Python</category></item><item><title>数据预处理技巧</title><link>/2014/Data_Process_2014_08_18_20_05.html</link><description>&lt;p&gt;参考资料：
&lt;a href="http://ufldl.stanford.edu/wiki/index.php/Data_Preprocessing"&gt;Data Preprocessing&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;开头！&lt;/h2&gt;
&lt;p&gt;一般来说，算法的好坏一定程度上和数据是否归一化，是否白化有关。但是在具体问题中，这些数据预处理中的参数其实还是很难准确得到的，当然了，除非你对对应的算法有非常的深刻的理解。下面就从归一化和白化两个角度来介绍下数据预处理的相关技术。&lt;/p&gt;
&lt;h3&gt;数据归一化&lt;/h3&gt;
&lt;p&gt;数据的归一化一般包括样本尺度归一化，逐样本的均值相减，特征的标准化这3个。其中数据尺度归一化的原因是：数据中每个维度表示的意义不同，所以有可能导致该维度的变化范围不同，因此有必要将他们都归一化到一个固定的范围，一般情况下是归一化到[0 1]或者[-1 1]。这种数据归一化还有一个好处是对后续的一些默认参数（比如白化操作）不需要重新过大的更改。&lt;/p&gt;
&lt;p&gt;逐样本的均值相减主要应用在那些具有稳定性的数据集中，也就是那些数据的每个维度间的统计性质是一样的。比如说，在自然图片中，这样就可以减小图片中亮度对数据的影响，因为我们一般很少用到亮度这个信息。不过逐样本的均值相减这只适用于一般的灰度图，在rgb等色彩图中，由于不同通道不具备统计性质相同性所以基本不会常用。&lt;/p&gt;
&lt;p&gt;特征标准化是指对数据的每一维进行均值化和方差相等化。这在很多机器学习的算法中都非常重要，比如SVM等。&lt;/p&gt;
&lt;h3&gt;数据白化&lt;/h3&gt;
&lt;p&gt;数据的白化是在数据归一化之后进行的。实践证明，很多deep learning算法性能提高都要依赖于数据的白化。在对数据进行白化前要求先对数据进行特征零均值化，不过一般只要 我们做了特征标准化，那么这个条件必须就满足了。在数据白化过程中，最主要的还是参数epsilon的选择，因为这个参数的选择对deep learning的结果起着至关重要的作用。&lt;/p&gt;
&lt;h4&gt;简单缩放&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;在简单缩放中，我们的目的是通过对数据的每一个维度的值进行重新调节（这些维度可能是相互独立的），使得最终的数据向量落在 [0,1]或[ − 1,1] 的区间内（根据数据情况而定）。这对后续的处理十分重要，因为很多默认参数（如 PCA-白化中的 epsilon）都假定数据已被缩放到合理区间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例子:在处理自然图像时，我们获得的像素值在 [0,255] 区间中，常用的处理是将这些像素值除以 255，使它们缩放到 [0,1] 中.&lt;/p&gt;
&lt;h4&gt;逐样本均值消减&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你的数据是平稳的（即数据每一个维度的统计都服从相同分布），那么你可以考虑在每个样本上减去数据的统计平均值(逐样本计算)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例子：对于图像，这种归一化可以移除图像的平均亮度值 (intensity)。很多情况下我们对图像的照度并不感兴趣，而更多地关注其内容，这时对每个数据点移除像素的均值是有意义的。注意：虽然该方法广泛地应用于图像，但在处理彩色图像时需要格外小心，具体来说，是因为不同色彩通道中的像素并不都存在平稳特性。&lt;/p&gt;
&lt;h4&gt;特征标准化&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;特征标准化指的是（独立地）使得数据的每一个维度具有零均值和单位方差。这是归一化中最常见的方法并被广泛地使用（例如，在使用支持向量机（SVM）时，特征标准化常被建议用作预处理的一部分）。在实际应用中，特征标准化的具体做法是：首先计算每一个维度上数据的均值（使用全体数据计算），之后在每一个维度上都减去该均值。下一步便是在数据的每一维度上除以该维度上数据的标准差。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例子:处理音频数据时，常用 Mel 倒频系数 MFCCs 来表征数据。然而MFCC特征的第一个分量（表示直流分量）数值太大，常常会掩盖其他分量。这种情况下，为了平衡各个分量的影响，通常对特征的每个分量独立地使用标准化处理。 &lt;/p&gt;
&lt;p&gt;在基于重构的模型中（比如说常见的RBM，Sparse coding, autoencoder都属于这一类，因为他们基本上都是重构输入数据），通常是选择一个适当的epsilon值使得能够对输入数据进行低通滤波。但是何谓适当的epsilon呢？这还是很难掌握的，因为epsilon太小，则起不到过滤效果，会引入很多噪声，而且基于重构的模型又要去拟合这些噪声；epsilon太大，则又对元素数据有过大的模糊。因此一般的方法是画出变化后数据的特征值分布图，如果那些小的特征值基本都接近0，则此时的epsilon是比较合理的。如下图所示，让那个长长的尾巴接近于x轴。该图的横坐标表示的是第几个特征值，因为已经将数据集的特征值从大到小排序过。&lt;/p&gt;
&lt;p&gt;&lt;img alt="1.png" src="/article_img/Data_Process_2014_08_18_20_05/1.png" /&gt;&lt;/p&gt;
&lt;p&gt;文章中给出了个小小的实用技巧：如果数据已被缩放到合理范围(如[0,1])，可以从epsilon = 0.01或epsilon = 0.1开始调节epsilon。&lt;/p&gt;
&lt;p&gt;基于正交化的ICA模型中，应该保持参数epsilon尽量小，因为这类模型需要对学习到的特征做正交化，以解除不同维度之间的相关性。（暂时没看懂，因为还没有时间去研究过ICA模型，等以后研究过后再来理解）。&lt;/p&gt;
&lt;p&gt;教程中的最后是一些常见数据的预处理标准流程，其实也只是针对具体数据集而已的，所以仅供参考。&lt;/p&gt;
&lt;h3&gt;其他&lt;/h3&gt;
&lt;h4&gt;大图像&lt;/h4&gt;
&lt;p&gt;对于大图像，采用基于 PCA/ZCA 的白化方法是不切实际的，因为协方差矩阵太大。在这些情况下我们退而使用 1/f 白化方法&lt;/p&gt;
&lt;h4&gt;自然灰度图像&lt;/h4&gt;
&lt;p&gt;灰度图像具有平稳特性，我们通常在第一步对每个数据样本分别做均值消减（即减去直流分量），然后采用 PCA/ZCA 白化处理，其中的 epsilon 要足够大以达到低通滤波的效果。 &lt;/p&gt;
&lt;h4&gt;彩色图像&lt;/h4&gt;
&lt;p&gt;对于彩色图像，色彩通道间并不存在平稳特性。因此我们通常首先对数据进行特征缩放（使像素值位于 [0,1] 区间），然后使用足够大的 epsilon 来做 PCA/ZCA。注意在进行 PCA 变换前需要对特征进行分量均值归零化。&lt;/p&gt;
&lt;h4&gt;音频 (MFCC/频谱图)&lt;/h4&gt;
&lt;p&gt;对于音频数据 (MFCC 和频谱图)，每一维度的取值范围（方差）不同。例如 MFCC 的第一分量是直流分量，通常其幅度远大于其他分量，尤其当特征中包含时域导数 (temporal derivatives) 时（这是音频处理中的常用方法）更是如此。因此，对这类数据的预处理通常从简单的数据标准化开始（即使得数据的每一维度均值为零、方差为 1），然后进行 PCA/ZCA 白化（使用合适的 epsilon）。 &lt;/p&gt;
&lt;h4&gt;MNIST 手写数字&lt;/h4&gt;
&lt;p&gt;MNIST 数据集的像素值在 [0,255] 区间中。我们首先将其缩放到 [0,1] 区间。实际上，进行逐样本均值消去也有助于特征学习。注：也可选择以对 MNIST 进行 PCA/ZCA 白化，但这在实践中不常用。 &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Mon, 18 Aug 2014 20:05:00 +0800</pubDate><guid>tag:,2014-08-18:2014/Data_Process_2014_08_18_20_05.html</guid><category>algorithm</category><category>PCA</category><category>ML</category></item><item><title>ML中的PCA及白化</title><link>/2014/PCA_in_ML_2014_08_18_19_50.html</link><description>&lt;h3&gt;PCA&lt;/h3&gt;
&lt;p&gt;PCA的具有2个功能,一是维数约简（可以加快算法的训练速度，减小内存消耗等），一是数据的可视化。&lt;/p&gt;
&lt;p&gt;PCA并不是线性回归，因为线性回归是保证得到的函数是y值方面误差最小，而PCA是保证得到的函数到所降的维度上的误差最小。另外线性回归是通过x值来预测y值，而PCA中是将所有的x样本都同等对待。&lt;/p&gt;
&lt;p&gt;在使用PCA前需要对数据进行预处理，首先是均值化，即对每个特征维，都减掉该维的平均值，然后就是将不同维的数据范围归一化到同一范围，方法一般都是除以最大值。但是比较奇怪的是，在对自然图像进行均值处理时并不是不是减去该维的平均值，而是减去这张图片本身的平均值。因为PCA的预处理是按照不同应用场合来定的。&lt;/p&gt;
&lt;p&gt;自然图像指的是人眼经常看见的图像，其符合某些统计特征。一般实际过程中，只要是拿正常相机拍的，没有加入很多人工创作进去的图片都可以叫做是自然图片，因为很多算法对这些图片的输入类型还是比较鲁棒的。在对自然图像进行学习时，其实不需要太关注对图像做方差归一化，因为自然图像每一部分的统计特征都相似，只需做均值为0化就ok了。不过对其它的图片进行训练时，比如首先字识别等，就需要进行方差归一化了。&lt;/p&gt;
&lt;p&gt;PCA的计算过程主要是要求2个东西，一个是降维后的各个向量的方向，另一个是原先的样本在新的方向上投影后的值。&lt;/p&gt;
&lt;p&gt;首先需求出训练样本的协方差矩阵，如公式所示（输入数据已经均值化过）：&lt;/p&gt;
&lt;p&gt;$$ \Sigma = \frac{1}{m}\sum_{i=1}^{m}(x^i)(x^i)^T $$&lt;/p&gt;
&lt;p&gt;求出训练样本的协方差矩阵后，将其进行SVD分解，得出的U向量中的每一列就是这些数据样本的新的方向向量了，排在前面的向量代表的是主方向，依次类推。用U’*X得到的就是降维后的样本值z了，即：&lt;/p&gt;
&lt;p&gt;$$ x_{rot}=U^Tx=\begin{bmatrix}u_1^Tx \\ u_2^Tx\end{bmatrix} $$&lt;/p&gt;
&lt;p&gt;（其实这个z值的几何意义是原先点到该方向上的距离值，但是这个距离有正负之分），这样PCA的2个主要计算任务已经完成了。用U*z就可以将原先的数据样本x给还原出来。&lt;/p&gt;
&lt;p&gt;在使用有监督学习时，如果要采用PCA降维，那么只需将训练样本的x值抽取出来，计算出主成分矩阵U以及降维后的值z，然后让z和原先样本的y值组合构成新的训练样本来训练分类器。在测试过程中，同样可以用原先的U来对新的测试样本降维，然后输入到训练好的分类器中即可。&lt;/p&gt;
&lt;p&gt;有一个观点需要注意，那就是PCA并不能阻止过拟合现象。表明上看PCA是降维了，因为在同样多的训练样本数据下，其特征数变少了，应该是更不容易产生过拟合现象。但是在实际操作过程中，这个方法阻止过拟合现象效果很小，主要还是通过规则项来进行阻止过拟合的。&lt;/p&gt;
&lt;p&gt;并不是所有ML算法场合都需要使用PCA来降维，因为只有当原始的训练样本不能满足我们所需要的情况下才使用，比如说模型的训练速度，内存大小，希望可视化等。如果不需要考虑那些情况，则也不一定需要使用PCA算法了。&lt;/p&gt;
&lt;h3&gt;Whitening&lt;/h3&gt;
&lt;p&gt;Whitening的目的是去掉数据之间的相关联度，是很多算法进行预处理的步骤。比如说当训练图片数据时，由于图片中相邻像素值有一定的关联，所以很多信息是冗余的。这时候去相关的操作就可以采用白化操作。数据的whitening必须满足两个条件：一是不同特征间相关性最小，接近0；二是所有特征的方差相等（不一定为1）。常见的白化操作有PCA whitening和ZCA whitening。&lt;/p&gt;
&lt;p&gt;PCA whitening是指将数据x经过PCA降维为z后，可以看出z中每一维是独立的，满足whitening白化的第一个条件，这是只需要将z中的每一维都除以标准差就得到了每一维的方差为1，也就是说方差相等。公式为：&lt;/p&gt;
&lt;p&gt;$$ x_{PCAwhite,i}=\frac{x_{rot,i}}{\sqrt{\lambda_i}} $$&lt;/p&gt;
&lt;p&gt;ZCA whitening是指数据x先经过PCA变换为z，但是并不降维，因为这里是把所有的成分都选进去了。这是也同样满足whtienning的第一个条件，特征间相互独立。然后同样进行方差为1的操作，最后将得到的矩阵左乘一个特征向量矩阵U即可。&lt;/p&gt;
&lt;p&gt;ZCA whitening公式为：&lt;/p&gt;
&lt;p&gt;$$ x_{ZCAwhite}=Ux_{PCAwhite} $$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://www.cnblogs.com/90zeng/p/PCA_and_Whitening_Images.html?utm_source=tuicool&amp;amp;utm_medium=referral"&gt;过程参考&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Mon, 18 Aug 2014 19:50:00 +0800</pubDate><guid>tag:,2014-08-18:2014/PCA_in_ML_2014_08_18_19_50.html</guid><category>algorithm</category><category>PCA</category><category>ML</category></item><item><title>matrix</title><link>/2014/matrix_2014_08_17_10_44.html</link><description>&lt;h2&gt;矩阵基本概念&lt;/h2&gt;
&lt;h3&gt;梯度&lt;/h3&gt;
&lt;p&gt;量度标量场改变的速度与方向；标量场的斜度是个向量。&lt;/p&gt;
&lt;h3&gt;旋度&lt;/h3&gt;
&lt;p&gt;量度向量场倾向绕著一个点旋转的程度；向量的卷曲是个向量场。&lt;/p&gt;
&lt;h3&gt;散度(divergence)&lt;/h3&gt;
&lt;p&gt;量度向量场倾向源于一点的程度。&lt;/p&gt;
&lt;h3&gt;点积&lt;/h3&gt;
&lt;p&gt;在数学中，数量积（dot product; scalar product，也称为点积）是接受在实数R上的两个向量并返回一个实数值标量的二元运算。它是欧几里得空间的标准内积。&lt;/p&gt;
&lt;p&gt;两个向量$ a = [a_1, a_2, \cdot \cdot \cdot , a_n] $和$ b = [b_1, b_2, \cdot \cdot \cdot , b_n] $的点积定义为：
$$ a \cdot b=a_1b_1+a_2b_2+ \cdot \cdot \cdot +a_nb_n $$&lt;/p&gt;
&lt;p&gt;使用矩阵乘法并把（纵列）向量当作n*1矩阵，点积还可以写为：
$ a\cdot b=a*b^T $，这里的$ b^T $指示矩阵b的转置。&lt;/p&gt;
&lt;p&gt;上边的为代数定义，如果要写成几何定义的话：$ \vec{a}\cdot \vec{b} = \mid \vec{a} \mid \mid \vec{b} \mid \cos \theta $，$ \theta $为两个向量的夹角。该定义只对二维和三维空间有效。&lt;/p&gt;
&lt;h3&gt;正交&lt;/h3&gt;
&lt;p&gt;两个向量正交意味着它们是相互垂直的。若向量α与β正交，则记为α⊥β。&lt;/p&gt;
&lt;h3&gt;正交函数系&lt;/h3&gt;
&lt;p&gt;在三角函数系中任何不同的两个函数的乘积在区间[-π,π]上的积分等于0，则称这样的三角函数组成的体系叫正交函数系。&lt;/p&gt;
&lt;p&gt;三角函数系{1,cosx,sinx,cos2x,sin2x,……,cosnx,sinnx,……}&lt;/p&gt;
&lt;h3&gt;正交矩阵&lt;/h3&gt;
&lt;p&gt;A是一个n阶方阵,$ A^{-1}=A^T $  或 $AA^T=A^TA=EA $,则A叫做正交矩阵。&lt;/p&gt;
&lt;p&gt;条件:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A^T是正交矩阵&lt;/li&gt;
&lt;li&gt;$ AA^T=A^TA=EA $&lt;/li&gt;
&lt;li&gt;A的各行是单位向量且两两正交&lt;/li&gt;
&lt;li&gt;A的各列是单位向量且两两正交&lt;/li&gt;
&lt;li&gt;(Ax,Ay)=(x,y) x,y∈R&lt;/li&gt;
&lt;li&gt;|A| = 1或-1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;定理:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;方阵A正交的充要条件是A的行（列) 向量组是单位正交向量组；&lt;/li&gt;
&lt;li&gt;方阵A正交的充要条件是A的n个行（列)向量是n维向量空间的一组标准正交基；&lt;/li&gt;
&lt;li&gt;A是正交矩阵的充要条件是：A的行向量组两两正交且都是单位向量；&lt;/li&gt;
&lt;li&gt;A的列向量组也是正交单位向量组。&lt;/li&gt;
&lt;li&gt;正交方阵是欧氏空间中标准正交基到标准正交基的过渡矩阵。
在矩阵论中，实数正交矩阵是方块矩阵Q，它的转置矩阵是它的逆矩阵，如果正交矩阵的行列式为 +1，则我们称之为特殊正交矩阵&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;基矩阵&lt;/h3&gt;
&lt;p&gt;矩阵里的基是指能组成其他矩阵形式的基本矩阵。现在我们用矩阵形式写出基向量和基，这样的矩阵我们叫它基矩阵。&lt;/p&gt;
&lt;p&gt;例如：在3-D空间中，我们用空间坐标系来规范物体的位置，空间坐标系由3个相互垂直的坐标轴组成，我们就把它们作为我们观察3-D空间的基础，空间中物体的位置可以通过它们来衡量。当我们把这3个坐标轴上单位长度的向量记为3个相互正交的单位向量i,j,k，空间中每一个点的位置都可以被这3个向量线性表出，如P&amp;lt;1,-2,3&amp;gt;这个点可以表为i-2j+3k。&lt;/p&gt;
&lt;p&gt;我们把这3个正交的单位向量称为空间坐标系的基，它们单位长度为1且正交，所以可以成为标准正交基。三个向量叫做基向量。现在我们用矩阵形式写出基向量和基。&lt;/p&gt;
&lt;h3&gt;极大线性无关组&lt;/h3&gt;
&lt;p&gt;极大线性无关组，就是其他的东西都可以由“基”线性表示，而这些“基”本身又是线性无关的。&lt;/p&gt;
&lt;p&gt;设S是一个n维向量组,$ α_1,α_2,\cdot \cdot \cdot α_r $ 是S的一个部分组，如果&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;α1,α2,...αr 线性无关；&lt;/li&gt;
&lt;li&gt;向量组S中每一个向量均可由此部分组线性表示，&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那么α1,α2,...αr 称为向量组S的一个极大线性无关组,或极大无关组。&lt;/p&gt;
&lt;p&gt;性质 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;极大线性无关组与向量组本身等价&lt;/li&gt;
&lt;li&gt;两个极大线性无关组都是等价的&lt;/li&gt;
&lt;li&gt;向量个数小于或等于后者&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;酉矩阵&lt;/h3&gt;
&lt;p&gt;n阶复方阵U的n个列向量是U空间的一个标准正交基，则U是酉矩阵(Unitary Matrix)。显然酉矩阵是正交矩阵往复数域上的推广。酉矩阵又称为幺正矩阵。&lt;/p&gt;
&lt;p&gt;U是酉矩阵的充分必要条件是，它的n个列向量是两两正交的单位向量。&lt;/p&gt;
&lt;p&gt;一个简单的充分必要判别准则是：$ U^{-1} = U^H $
酉矩阵的共轭转置和它的逆矩阵相等。&lt;/p&gt;
&lt;p&gt;酉方阵在量子力学中有着重要的应用。酉等价是标准正交基到标准正交基的特殊基变换。&lt;/p&gt;
&lt;h3&gt;秩&lt;/h3&gt;
&lt;p&gt;讲到矩阵的秩，几乎必然要引入矩阵的SVD分解：X=USV'，U,V正交阵，S是对角阵。如果是完全SVD分解的话，那S对角线上非零元的个数就是这个矩阵的秩了（这些对角线元素叫做奇异值），还有些零元，这些零元对秩没有贡献。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;把矩阵当做样本集合，每一行（或每一列，这个无所谓）是一个样本，那么矩阵的秩就是这些样本所张成的线性子空间维数。如果矩阵秩远小于样本维数（即矩阵列数），那么这些样本相当于只生活在外围空间中的一个低维子空间，这样就能实施降维操作。举个例子，同一个人在不同光照下采得的正脸图像，假设每一张都是192x168的，且采集了50张，那构成的数据矩阵就为50行192x168列的，但是如果你做SVD分解就会发现，大概只有前10个奇异值比较大，其他的奇异值都接近零，因此实际上可以将接近零的奇异值所对应的那些维度丢掉，只保留前10个奇异值对应的子空间，从而将数据降维到10维的子空间了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把矩阵当做一个映射，既然是映射，那就得考虑它作用在向量x上的效果Ax。注意Ax相当于A的列的某个线性组合，如果矩阵是低秩的，这意味着这些列所张成的空间是外围空间的一个低维子空间，这个空间由Ax表达（其中x任意）。换句话说，这个矩阵把R^n空间映射到R^m空间，但是其映射的像只在R^m空间的一个低维子空间内生活。从SVD理解的话，Ax=USV'x，因此有三个变换：第一是V'x，相当于在原始的R^n空间旋转了一下坐标轴，这样只是坐标的变化，不改变向量本身（例如长度不变）；第二是S(V'x)，这相当于沿着各个坐标轴做拉伸，并且如果S的对角线上某些元素为零，那么这些元素所对应的那些坐标轴就相当于直接丢掉了；最后再U(SV'x)，还是一个坐标轴旋转。总的来看，Ax就相当于把一个向量x沿着某些特定的方向做不同程度的拉伸（附带上一些不关乎本质的旋转），甚至丢弃，那些没被丢弃的方向个数就是秩了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;矩阵基本计算&lt;/h2&gt;
&lt;h3&gt;矩阵加法&lt;/h3&gt;
&lt;p&gt;前提条件：同型矩阵&lt;br&gt;
操作数：两个m*n矩阵$ A=[a_{ij}],B=[b_{ij}] $&lt;br&gt;
基本动作：元素对应相加 &lt;br&gt;&lt;/p&gt;
&lt;p&gt;$$ A+B = \begin{bmatrix} a_{11}+b_{11} &amp;amp;a_{12}+b_{12} &amp;amp;\cdot \cdot \cdot &amp;amp;a_{1n}+b_{1n} \\ a_{21}+b_{21} &amp;amp;a_{22}+b_{22} &amp;amp;\cdot \cdot \cdot &amp;amp;a_{2n}+b_{2n} \\ \cdot &amp;amp;\cdot  &amp;amp;\cdot  &amp;amp;\cdot \\ a_{m1}+b_{m1} &amp;amp;a_{m2}+b_{m2} &amp;amp;\cdot \cdot \cdot &amp;amp;a_{mn}+b_{mn} \end{bmatrix} = [a_{ij}+b_{ij}] $$&lt;/p&gt;
&lt;h3&gt;矩阵减法&lt;/h3&gt;
&lt;p&gt;前提条件：同型矩阵&lt;br&gt;
操作数：两个m*n矩阵$A=[a_{ij}],B=[b_{ij}]$&lt;br&gt;
基本动作：元素对应相减 &lt;br&gt;&lt;/p&gt;
&lt;p&gt;$$ A-B = \begin{bmatrix} a_{11}-b_{11} &amp;amp;a_{12}-b_{12} &amp;amp;\cdot \cdot \cdot &amp;amp;a_{1n}-b_{1n} \\ a_{21}-b_{21} &amp;amp;a_{22}-b_{22} &amp;amp;\cdot \cdot \cdot &amp;amp;a_{2n}-b_{2n} \\ \cdot &amp;amp;\cdot  &amp;amp;\cdot  &amp;amp;\cdot \\ a_{m1}-b_{m1} &amp;amp;a_{m2}-b_{m2} &amp;amp;\cdot \cdot \cdot &amp;amp;a_{mn}-b_{mn} \end{bmatrix} = [a_{ij}-b_{ij}] $$&lt;/p&gt;
&lt;h3&gt;矩阵取负&lt;/h3&gt;
&lt;p&gt;前提条件：无&lt;br&gt;
操作数：任意一个m*n矩阵$ A=[a_{ij}] $ &lt;br&gt;
基本动作：元素对应取负 &lt;br&gt;&lt;/p&gt;
&lt;p&gt;$$ -A = \begin{bmatrix} -a_{11} &amp;amp;-a_{12} &amp;amp;\cdot \cdot \cdot &amp;amp;-a_{1n} \\ -a_{21} &amp;amp;-a_{22} &amp;amp;\cdot \cdot \cdot &amp;amp;-a_{2n} \\ \cdot &amp;amp;\cdot  &amp;amp;\cdot  &amp;amp;\cdot \\ -a_{m1} &amp;amp;-a_{m2} &amp;amp;\cdot \cdot \cdot &amp;amp;-a_{mn} \end{bmatrix} = [-a_{ij}] $$&lt;/p&gt;
&lt;h3&gt;矩阵乘法&lt;/h3&gt;
&lt;p&gt;前提条件：左矩阵A的列数与右矩阵B的行数相等&lt;br&gt;
操作数：m*n矩阵$ A=[a_{ij}]$，n*m矩阵$B=[b_{ij}]$，A是具有m行的行矩阵$ A = \begin{bmatrix} a_1 \\ a_2 \\ \cdot \\ a_m \end{bmatrix} $，B是具有n列的列矩阵$ B = \begin{bmatrix} b_1 &amp;amp; b_2 &amp;amp; \cdot \cdot \cdot &amp;amp; b_n \end{bmatrix} $ &lt;br&gt;
基本动作：行列积 &lt;br&gt;&lt;/p&gt;
&lt;p&gt;$$ AB = \begin{bmatrix} a_1 \\ a_2 \\ \cdot \\ a_m \end{bmatrix} \begin{bmatrix} b_1 &amp;amp; b_2 &amp;amp; \cdot \cdot \cdot &amp;amp; b_n \end{bmatrix}  = \begin{bmatrix} a_1 b_1 &amp;amp;a_1 b_2  &amp;amp;\cdot \cdot \cdot  &amp;amp;a_1b_n \\ a_2 b_1 &amp;amp;a_2 b_2  &amp;amp;\cdot \cdot \cdot  &amp;amp;a_2 b_n \\ \cdot &amp;amp;\cdot  &amp;amp;\cdot \cdot \cdot  &amp;amp;\cdot \\ a_m b_1 &amp;amp;a_m b_2  &amp;amp;\cdot \cdot \cdot  &amp;amp;a_m b_n \end{bmatrix} $$&lt;/p&gt;
&lt;h3&gt;矩阵数乘&lt;/h3&gt;
&lt;p&gt;前提条件：无&lt;br&gt;
操作数：任意一个m*n矩阵$ A=[a_{ij}] $，数k&lt;br&gt;
基本动作：数k乘以每一个元素 &lt;br&gt;&lt;/p&gt;
&lt;p&gt;$$ kA = \begin{bmatrix} ka_{11} &amp;amp;ka_{12}  &amp;amp;\cdot \cdot \cdot  &amp;amp;ka_{1n} \\ ka_{21} &amp;amp;ka_{22}  &amp;amp;\cdot \cdot \cdot  &amp;amp;ka_{2n} \\ \cdot &amp;amp;\cdot  &amp;amp;\cdot \cdot \cdot  &amp;amp;\cdot \\ ka_{m1} &amp;amp;ka_{m2}  &amp;amp;\cdot \cdot \cdot  &amp;amp;ka_{mn} \end{bmatrix}= [ka_{ij}]$$&lt;/p&gt;
&lt;h3&gt;矩阵转置&lt;/h3&gt;
&lt;p&gt;前提条件：无&lt;br&gt;
操作数：任意一个m*n矩阵$ A=[a_{ij}] $ &lt;br&gt;
基本动作：行列互换，第i行第j列的元素换为第j行第i列的元素，m*n的矩阵转置后为n*m矩阵 &lt;br&gt;&lt;/p&gt;
&lt;p&gt;$$ A^T = \begin{bmatrix} a_{11} &amp;amp;a_{21}  &amp;amp;\cdot \cdot \cdot  &amp;amp;a_{m1} \\ a_{12} &amp;amp;a_{22}  &amp;amp;\cdot \cdot \cdot  &amp;amp;a_{m2} \\ \cdot &amp;amp;\cdot  &amp;amp;\cdot \cdot \cdot  &amp;amp;\cdot \\ a_{1n} &amp;amp;a_{2n} &amp;amp;\cdot \cdot \cdot  &amp;amp;a_{mn} \end{bmatrix} $$&lt;/p&gt;
&lt;p&gt;矩阵运算不满足交换律和消去率。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Sun, 17 Aug 2014 13:37:00 +0800</pubDate><guid>tag:,2014-08-17:2014/matrix_2014_08_17_10_44.html</guid><category>algorithm</category><category>Math</category></item><item><title>PCA</title><link>/2014/PCA_2014_08_15_22_49.html</link><description>&lt;h2&gt;Principal Component Analysis&lt;/h2&gt;
&lt;p&gt;PCA 不仅仅是对高维数据进行降维，更重要的是经过降维去除了噪声，发现了数据中的模式。&lt;/p&gt;
&lt;p&gt;PCA把原先的n个特征用数目更少的m个特征取代，新特征是旧特征的线性组合，这些线性组合最大化样本方差，尽量使新的m个特征互不相关。从旧特征到新特征的映射捕获数据中的固有变异性。&lt;/p&gt;
&lt;h3&gt;降维的必要性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;多重共线性--预测变量之间相互关联。多重共线性会导致解空间的不稳定，从而可能导致结果的不连贯。&lt;/li&gt;
&lt;li&gt;高维空间本身具有稀疏性。一维正态分布有68%的值落于正负标准差之间，而在十维空间上只有0.02%。&lt;/li&gt;
&lt;li&gt;过多的变量会妨碍查找规律的建立。&lt;/li&gt;
&lt;li&gt;仅在变量层面上分析可能会忽略变量之间的潜在联系。例如几个预测变量可能落入仅反映数据某一方面特征的一个组内。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;降维的目的&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;减少预测变量的个数&lt;/li&gt;
&lt;li&gt;确保这些变量是相互独立的&lt;/li&gt;
&lt;li&gt;提供一个框架来解释结果&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;降维的方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;主成分分析&lt;/li&gt;
&lt;li&gt;因子分析&lt;/li&gt;
&lt;li&gt;用户自定义复合&lt;/li&gt;
&lt;li&gt;等等......&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;预备知识&lt;/h2&gt;
&lt;h3&gt;协方差&lt;/h3&gt;
&lt;p&gt;样本X和样本Y的协方差(Covariance)：&lt;/p&gt;
&lt;p&gt;$$ Cov(X,Y)=\frac{\sum_{i=1}^{n}{(X_i-\overline{X})(Y_i-\overline{Y})}}{(n-1)} $$&lt;/p&gt;
&lt;p&gt;协方差为正时说明X和Y是正相关关系，协方差为负时X和Y是负相关关系，协方差为0时X和Y相互独立。&lt;/p&gt;
&lt;p&gt;Cov(X,X)就是X的方差(Variance)。&lt;/p&gt;
&lt;p&gt;当样本是n维数据时，它们的协方差实际上是协方差矩阵（对称方阵），方阵的边长是。比如对于3维数据(x,y,z)，计算它的协方差就是：$ C_n^2 $。比如对于3维数据(x,y,z)，计算它的协方差就是：&lt;/p&gt;
&lt;p&gt;$$ C=\begin{array}{ccc}cov(x,x)&amp;amp; cov(x,y)&amp;amp; cov(x,z) \\ cov(y,x)&amp;amp;cov(y,y)&amp;amp; cov(y,z) \\ cov(z,x)&amp;amp; cov(z,y)&amp;amp; cov(z,z)\end{array} $$&lt;/p&gt;
&lt;p&gt;若 $ AX=\lambda{X} $，则称$ \lambda $是A的特征值，X是对应的特征向量。实际上可以这样理解：矩阵A作用在它的特征向量X上，仅仅使得X的长度发生了变化，缩放比例就是相应的特征值$ \lambda $。&lt;/p&gt;
&lt;p&gt;当A是n阶可逆矩阵时，A与$ P^{-1}Ap $相似，相似矩阵具有相同的特征值。&lt;/p&gt;
&lt;p&gt;特别地，当A是对称矩阵时，A的奇异值等于A的特征值，存在正交矩阵$ Q(Q^{-1}=QT)$，使得：&lt;/p&gt;
&lt;p&gt;$$ Q^TAQ=\begin{pmatrix} &amp;amp;\lambda_1 &amp;amp; &amp;amp; &amp;amp; \\ &amp;amp; &amp;amp;\lambda_2 &amp;amp; &amp;amp;\\ &amp;amp; &amp;amp; &amp;amp;... &amp;amp; \\ &amp;amp; &amp;amp; &amp;amp; &amp;amp;\lambda_n \end{pmatrix} $$&lt;/p&gt;
&lt;p&gt;对A进行奇异值分解就能求出所有特征值和Q矩阵。&lt;/p&gt;
&lt;p&gt;$ A*Q=Q*D $, D是由特征值组成的对角矩阵&lt;/p&gt;
&lt;p&gt;由特征值和特征向量的定义知，Q的列向量就是A的特征向量。&lt;/p&gt;
&lt;h2&gt;正题&lt;/h2&gt;
&lt;h3&gt;步骤&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;指标数据标准化； 　　&lt;/li&gt;
&lt;li&gt;指标之间的相关性判定； 　&lt;/li&gt;
&lt;li&gt;计算特征值与特征向量&lt;/li&gt;
&lt;li&gt;计算主成分贡献率及累计贡献率&lt;/li&gt;
&lt;li&gt;计算主成分载荷&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;pca.py&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="c1"&gt;#-*- coding:utf-8 -*-&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pylab&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pca&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;nRedDim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;normalise&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="c1"&gt;# 数据标准化&lt;/span&gt;
        &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;

        &lt;span class="c1"&gt;# 协方差矩阵&lt;/span&gt;
        &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;cov&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="c1"&gt;# 计算特征值特征向量，按降序排序&lt;/span&gt;
        &lt;span class="n"&gt;evals&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;evecs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;linalg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kp"&gt;indices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;argsort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;evals&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kp"&gt;indices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;indices&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;evecs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;evecs&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt;&lt;span class="kp"&gt;indices&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;evals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;evals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kp"&gt;indices&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;nRedDim&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;evecs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;evecs&lt;/span&gt;&lt;span class="p"&gt;[:,:&lt;/span&gt;&lt;span class="n"&gt;nRedDim&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;normalise&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;evecs&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
                &lt;span class="n"&gt;evecs&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;linalg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;norm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;evecs&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="kp"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;evals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

        &lt;span class="c1"&gt;# 产生新的数据矩阵&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;evecs&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="kp"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="c1"&gt;# 重新计算原数据&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;evecs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;evals&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;evecs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;__main__:&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;#-*- coding:utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pylab&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pca&lt;/span&gt;
&lt;span class="n"&gt;mpl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rcParams&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;font.sans-serif&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SimHei&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;mpl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rcParams&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;axes.unicode_minus&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kp"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kp"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kp"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kp"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;xlabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ylabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;原数据集&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;evals&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;evecs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pca&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pca&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;xlabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ylabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;重新构造数据&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;center&gt;&lt;img alt="1.png" src="/article_img/PCA_2014_08_15_22_49/1.png" /&gt;&lt;/center&gt;
&lt;center&gt;&lt;img alt="2.png" src="/article_img/PCA_2014_08_15_22_49/2.png" /&gt;&lt;/center&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Fri, 15 Aug 2014 22:49:00 +0800</pubDate><guid>tag:,2014-08-15:2014/PCA_2014_08_15_22_49.html</guid><category>algorithm</category><category>PCA</category><category>ML</category><category>Math</category></item><item><title>奇异值</title><link>/2014/SVD_2014_08_15_21_28.html</link><description>&lt;h2&gt;SVD&lt;/h2&gt;
&lt;h3&gt;先简单概念性质的东西&lt;/h3&gt;
&lt;p&gt;SVD分解（奇异值分解），本应是本科生就掌握的方法，然而却经常被忽视。实际上，SVD分解不但很直观，而且极其有用。SVD分解提供了一种方法将一个矩阵拆分成简单的，并且有意义的几块。它的几何解释可以看做将一个空间进行旋转，尺度拉伸，再旋转三步过程。&lt;/p&gt;
&lt;p&gt;首先来看一个对角矩阵&lt;/p&gt;
&lt;p&gt;$$ M=\begin{bmatrix}3 &amp;amp;0 \\ 0 &amp;amp;1 \end{bmatrix} $$&lt;/p&gt;
&lt;p&gt;几何上, 我们将一个矩阵理解为对于点(x, y)从一个平面到另一个平面的映射:&lt;/p&gt;
&lt;p&gt;$$ \begin{bmatrix}3 &amp;amp;0 \\ 0 &amp;amp;1 \end{bmatrix} \begin{bmatrix}x \\ y \end{bmatrix} = \begin{bmatrix}3x \\ y \end{bmatrix} $$&lt;/p&gt;
&lt;p&gt;下图显示了这个映射的效果: 平面被横向拉伸了3倍，纵向没有变化。&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="1.jpg" src="/article_img/SVD_2014_08_15_21_28/1.jpg" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;对于另一个矩阵&lt;/p&gt;
&lt;p&gt;$$ M=\begin{bmatrix}2 &amp;amp;1 \\ 1 &amp;amp;2 \end{bmatrix} $$&lt;/p&gt;
&lt;p&gt;它的效果是&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="2.jpg" src="/article_img/SVD_2014_08_15_21_28/2.jpg" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;这样一个变化并不是很好描述，然而当我们将坐标系旋转45度后，我们可以看出&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="3.jpg" src="/article_img/SVD_2014_08_15_21_28/3.jpg" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;这时，我们发现这个新的网格上发生的变化和网格在对角阵下发生变化的效果相似。&lt;/p&gt;
&lt;p&gt;这是一个对称矩阵的例子，可以看出，对称矩阵经过旋转后，其作用就和对角阵类似了。数学上，对于一个对称矩阵 M, 我们可以找到一组正交向量 $v_i$ 从而 $Mv_i$ 相当于 $v_i$ 上的标量乘积; 也就是&lt;/p&gt;
&lt;p&gt;$$ Mv_i = \lambda_i v_i $$&lt;/p&gt;
&lt;p&gt;$ \lambda_i $ 是标量，也就是对应对角阵中对角线上的元素. 由于这个性质，我们称 $v_i$ 是 M 的特征向量;  $\lambda_i$ 为特征值. 一个对称矩阵不同特征值对应的特征向量是正交的。&lt;/p&gt;
&lt;p&gt;对于更广泛的情况，我们看看是否能从一个正交网格转换到另一个正交网格. 考虑一个非对称矩阵:&lt;/p&gt;
&lt;p&gt;$$ M=\begin{bmatrix}1 &amp;amp;1 \\ 0 &amp;amp;1 \end{bmatrix} $$&lt;/p&gt;
&lt;p&gt;这个矩阵的效果形象的称为剃刀（shear）。&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="4.jpg" src="/article_img/SVD_2014_08_15_21_28/4.jpg" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;这个矩阵将网格在水平方向拉伸了，而垂直方向没有变化。如果我们将网格旋转大约58度，这两个网格就又会都变为正交的了。 &lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="5.jpg" src="/article_img/SVD_2014_08_15_21_28/5.jpg" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;奇异值分解&lt;/h3&gt;
&lt;p&gt;考虑一个 2*2 矩阵, 我们可以找到两组网格的对应关系。用向量表示，那就是当我们选择合适的单位正交向量 $v_1$ 和 $v_2$, $Mv_1$ 和 $Mv_2$ 也是正交的。&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="6.jpg" src="/article_img/SVD_2014_08_15_21_28/6.jpg" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;我们使用 $u_1$ 和 $u_2$ 代表 $Mv_1$ 和 $Mv_2$的方向.  $Mv_1$ 和 $Mv_2$ 的长度表示为 $\sigma_1$ 和 $\sigma_2$，也就是网格在每个方向的拉伸. 这两个拉伸值叫做M的 奇异值（sigular value）&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="7.jpg" src="/article_img/SVD_2014_08_15_21_28/7.jpg" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;和前面类似，我们可以有  &lt;/p&gt;
&lt;p&gt;$$ \begin{align*}Mv_1 = \sigma_1u_1  \\ Mv_2 = \sigma_2u_2 \end{align*} $$&lt;/p&gt;
&lt;p&gt;我们一直讨论的 $v_1$ 和 $v_2$ 是一对正交向量， 对于一般的向量 x，我们有这样的投影关系&lt;/p&gt;
&lt;p&gt;$$ x=(v_1 \cdot x)v_1 + (v_2 \cdot x)v_2 $$&lt;/p&gt;
&lt;p&gt;也就是说  &lt;/p&gt;
&lt;p&gt;$$ Mx=(v_1 \cdot x)Mv_1 + (v_2 \cdot x)Mv_2 $$&lt;/p&gt;
&lt;p&gt;$$ Mx = (v_1 \cdot x) \sigma_1u_1 + (v_2 \cdot x) \sigma_2u_2 $$&lt;/p&gt;
&lt;p&gt;注意点积可以用向量的转置来计算&lt;/p&gt;
&lt;p&gt;$$ v \cdot x = v^Tx $$&lt;/p&gt;
&lt;p&gt;既&lt;/p&gt;
&lt;p&gt;$$ Mx = u_1\sigma_1 v_1^Tx + u_2\sigma_2 v_2^Tx  \rightarrow      M = u_1\sigma_1 v_1^T + u_2\sigma_2 v_2^T $$&lt;/p&gt;
&lt;p&gt;这个关系可以写成矩阵形式&lt;/p&gt;
&lt;p&gt;$$ M = U \Sigma V^T $$&lt;/p&gt;
&lt;p&gt;U 是列向量 $u_1$ 和 $u_2$组成的矩阵, $\Sigma$是非零项为$\sigma_1$ 和 $\sigma_2$ 的对角矩阵,  V是列向量 $v_1$ 和 $v_2$组成的矩阵. 带有上标T的矩阵V是矩阵V的转置. &lt;del&gt;即V描述了域中的一组正交基，U描述了相关域的另一组正交基，$\Sigma$ 表述了U中的向量与V中向量的拉伸关系。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;上面描述了怎样将矩阵M分解成三个矩阵的乘积：V描述了原始空间中的正交基，U描述了相关空间的正交基，$\Sigma$描述了V中的向量变成U中的向量时被拉伸的倍数。&lt;/p&gt;
&lt;h3&gt;寻找奇异值分解&lt;/h3&gt;
&lt;p&gt;奇异值分解可以应用于任何矩阵，对于前面的例子，如果我们加上一个单位圆，那它会映射成一个椭圆，椭圆的长轴和短轴定义了新的域中的正交网格，可以被表示为$Mv_1$ and $Mv_2$。&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="8.jpg" src="/article_img/SVD_2014_08_15_21_28/8.jpg" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="9.jpg" src="/article_img/SVD_2014_08_15_21_28/9.jpg" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;换句话说，单位圆上的函数 $\left| Mx \right|$ 在  $v_1$ 取得最大值，在 $v_2$取得最小值. 这将单位圆上的函数优化问题简化了。可以证明，这个函数的极值点就出现在$M^TM$的特征向量上，这个矩阵一定是对称的，所以不同特征值对应的特征向量$v_i$是正交的.&lt;/p&gt;
&lt;p&gt;$ \sigma_i = \left| Mv_i \right| $就是奇异值,  $u_i$ 是 $Mv_i$方向的单位向量.&lt;/p&gt;
&lt;p&gt;$$ Mv_i = \sigma_iu_i \\ Mv_j = \sigma_ju_j \\ Mv_i \cdot  Mv_j = v_i^TM^T Mv_j = v_i \cdot M^TMv_j = \lambda_jv_i \cdot  v_j = 0  $$&lt;/p&gt;
&lt;p&gt;也就是&lt;/p&gt;
&lt;p&gt;$$ Mv_i \cdot Mv_j = \sigma_i\sigma_j u_i \cdot u_j = 0 $$&lt;/p&gt;
&lt;p&gt;因此, $u_i 和 u_j$ 也是正交的。所以我们就把一组正交基 $v_i$ 变换到了另一组正交基 $u_i$. &lt;/p&gt;
&lt;h3&gt;另一个例子&lt;/h3&gt;
&lt;p&gt;我们来看一个奇异矩阵（秩为1，或只有一个非零奇异值）&lt;/p&gt;
&lt;p&gt;$$ M=\begin{bmatrix}1 &amp;amp;1 \\ 2 &amp;amp;2 \end{bmatrix} $$&lt;/p&gt;
&lt;p&gt;它的效果如下&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="10.jpg" src="/article_img/SVD_2014_08_15_21_28/10.jpg" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;在这个例子中，第二个奇异值为0，所以 $M = u_1\sigma_1 v_1^T$. &lt;/p&gt;
&lt;p&gt;也就是说，如果有奇异值为0，那么这个矩阵就有降维的效果。因为0奇异值对应的维度就不会出现在右边。（换句话讲，如果一些奇异值为零，相应的项将不会出现在M的分解中。因此，矩阵M的秩（即线性独立的行或列的个数）等于非零奇异值的个数。）&lt;/p&gt;
&lt;h3&gt;数据压缩&lt;/h3&gt;
&lt;p&gt;这对于计算机科学中的数据压缩极其有用。例如我们想压缩下面的15*25 像素的黑白图像&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="11.jpg" src="/article_img/SVD_2014_08_15_21_28/11.jpg" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;因为在图像中只有三种类型的列（如下），它可以以更紧凑的形式被表示。 &lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="12.jpg" src="/article_img/SVD_2014_08_15_21_28/12.jpg" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="13.jpg" src="/article_img/SVD_2014_08_15_21_28/13.jpg" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="14.jpg" src="/article_img/SVD_2014_08_15_21_28/14.jpg" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;我们用15*25的矩阵来表示这个图像，其中每个元素非0即1，0表示黑色像素，1表示白色像素。如下所示，共有375个元素。&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="15.jpg" src="/article_img/SVD_2014_08_15_21_28/15.jpg" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;如果对M进行奇异值分解的话，我们只会得到三个非零的奇异值。&lt;/p&gt;
&lt;p&gt;$$ \sigma_1 = 14.72, \sigma_2 = 5.22,\sigma_3 = 3.31  $$&lt;/p&gt;
&lt;p&gt;因此，矩阵可以如下表示&lt;/p&gt;
&lt;p&gt;$$ M=u_1\sigma_1 v_1^T + u_2\sigma_2 v_2^T + u_3\sigma_3 v_3^T $$&lt;/p&gt;
&lt;p&gt;我们有三个包含15个元素的向量$v_i$，三个包含25个元素的向量$u_i$，以及三个奇异值$\sigma_i$。这意味着我们可以只用123个数字就能表示这个矩阵而不是出现在矩阵中的375个元素。奇异值分解找到了矩阵中的冗余信息实现了降维。(在这种方式下，我们看到在矩阵中有3个线性独立的列，也就是说矩阵的秩是3)。&lt;/p&gt;
&lt;h3&gt;降噪&lt;/h3&gt;
&lt;p&gt;从之前的例子看出我们利用了矩阵中有很多奇异值为0的特殊性。通常来说，越大的奇异值对应的信息越令人感兴趣。例如，想象我们用扫描仪将上面的图片输入到我们的计算机。但是，我们的扫描机会在图片上产生一些缺陷（通常称作“噪声”）。&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="16.jpg" src="/article_img/SVD_2014_08_15_21_28/16.jpg" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;我们以同样的方式处理：用15*25矩阵来表示图像，然后进行奇异值分解。我们得到以下奇异值：&lt;/p&gt;
&lt;p&gt;$$ \sigma_1 = 14.15,\sigma_2 = 4.67,\sigma_3 = 3.00,\sigma_4 = 0.21,\sigma_5 = 0.19,,,\sigma_15 = 0.05$$&lt;/p&gt;
&lt;p&gt;很明显，头三个奇异值是最重要的，所以我们假定其他的都是图像上的噪声，并假设假设&lt;/p&gt;
&lt;p&gt;$$ M \approx u_1\sigma_1 v_1^T + u_2\sigma_2 v_2^T + u_3\sigma_3 v_3^T $$&lt;/p&gt;
&lt;p&gt;这就产生了如下的优化后的图片&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="17.jpg" src="/article_img/SVD_2014_08_15_21_28/17.jpg" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;数据分析&lt;/h3&gt;
&lt;p&gt;我们在收集数据的时候经常会遇到噪声：无论工具多好，总有一些误差在测量过程中。如果我们记得大的奇异值指向矩阵中重要的特征，很自然地想到用奇异值分解去研究被收集的数据。&lt;/p&gt;
&lt;p&gt;例如，我们收集了一些数据如下：&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="18.jpg" src="/article_img/SVD_2014_08_15_21_28/18.jpg" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;如下是我们获得的数据，将其放入矩阵中：&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="19.jpg" src="/article_img/SVD_2014_08_15_21_28/19.jpg" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;然后进行奇异值分解。我们得到奇异值&lt;/p&gt;
&lt;p&gt;$\sigma_1 = 6.04,\sigma_2 = 0.22 $&lt;/p&gt;
&lt;p&gt;其中第一个奇异值远远大于另外一个，很安全的假设小的奇异值$\sigma_2$是数据中的噪声并且可以理想地认为是0。这个例子中的矩阵的秩是1，意味着所有数据都位于 $u_i$ 定义的线上。&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="20.jpg" src="/article_img/SVD_2014_08_15_21_28/20.jpg" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;这个简短的例子引出了主成分分析领域，展示了一系列用奇异值分解来检测数据依赖和冗余的技术。&lt;/p&gt;
&lt;p&gt;同样地，奇异值分解可以用来检测数据中的簇，这就解释了奇异值分解可以用来尝试优化Netflix的电影推荐系统。程序会根据你看过的电影来对与你看过的电影相似的未看过的电影进行排序。推荐系统会挑选出你未看过的电影集合中预估分高的电影。&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;无论是特征值分解还是奇异值分解，都是为了让人们对矩阵（或者线性变换）的作用有一个直观的认识。这是因为我们拿过来一个矩阵，很多情况下只能看到一堆排列有序的数字，而看不到这些数字背后的真实含义，特征值分解和奇异值分解告诉了我们这些数字背后的真实含义，换句话说，它告诉了我们关于矩阵作用的本质信息。&lt;/p&gt;
&lt;p&gt;奇异值分解的含义是，把一个矩阵A看成线性变换（当然也可以看成是数据矩阵或者样本矩阵），那么这个线性变换的作用效果是这样的，我们可以在原空间找到一组标准正交基V，同时可以在像空间找到一组标准正交基U，我们知道，看一个矩阵的作用效果只要看它在一组基上的作用效果即可，在内积空间上，我们更希望看到它在一组标准正交基上的作用效果。而矩阵A在标准正交基V上的作用效果恰好可以表示为在U的对应方向上只进行纯粹的伸缩！这就大大简化了我们对矩阵作用的认识，因为我们知道，我们面前不管是多么复杂的矩阵，它在某组标准正交基上的作用就是在另外一组标准正交基上进行伸缩而已。&lt;/p&gt;
&lt;p&gt;特征分解也是这样的，也可以简化我们对矩阵的认识。对于可对角化的矩阵，该线性变换的作用就是将某些方向（特征向量方向）在该方向上做伸缩。&lt;/p&gt;
&lt;p&gt;有了上述认识，当我们要看该矩阵对任一向量x的作用效果的时候，在特征分解的视角下，我们可以把x往特征向量方向上分解，然后每个方向上做伸缩，最后再把结果加起来即可；在奇异值分解的视角下，我们可以把x往V方向上分解，然后将各个分量分别对应到U方向上做伸缩，最后把各个分量上的结果加起来即可。&lt;/p&gt;
&lt;p&gt;当我们注意到，不是所有的矩阵都能对角化（对称矩阵总是可以），而所有矩阵总是可以做奇异值分解的。那么多类型的矩阵，我们居然总是可以从一个统一且简单的视角去看它，我们就会感叹奇异值分解是多么奇妙了！&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Gilbert Strang, Linear Algebra and Its Applications. Brooks Cole.Strang’s book is something of a classic though some may find it to be a little too formal.&lt;/p&gt;
&lt;p&gt;William H. Press et al, Numercial Recipes in C: The Art of Scientific Computing. Cambridge University Press.Authoritative, yet highly readable. Older versions &lt;a href="http://www.nr.com/oldverswitcher.html"&gt;are available online&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Dan Kalman, &lt;a href="http://www.math.umn.edu/~lerman/math5467/svd.pdf"&gt;A Singularly Valuable Decomposition: The SVD of a Matrix&lt;/a&gt;, The College Mathematics Journal 27 (1996), 2-23.Kalman’s article, like this one, aims to improve the profile of the singular value decomposition. It also a description of how least-squares computations are facilitated by the decomposition.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.nytimes.com/2008/11/23/magazine/23Netflix-t.html"&gt;If You Liked This, You’re Sure to Love That&lt;/a&gt;, The New York Times, November 21, 2008.This article describes Netflix’s prize competition as well as some of the challenges associated with it.&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Fri, 15 Aug 2014 21:28:00 +0800</pubDate><guid>tag:,2014-08-15:2014/SVD_2014_08_15_21_28.html</guid><category>algorithm</category><category>PCA</category><category>ML</category><category>Math</category></item><item><title>逻辑回归实现</title><link>/2014/Logistic_regression_python_2014_08_09_20_07.html</link><description>&lt;h2&gt;Logistic regression in Python&lt;/h2&gt;
&lt;p&gt;本文基于yhat上&lt;a href="http://blog.yhathq.com/posts/logistic-regression-and-python.html"&gt;Logistic Regression in Python&lt;/a&gt;，作了中文翻译，并相应补充了一些内容。本文并不研究逻辑回归具体算法实现，而是使用了一些算法库，旨在帮助需要用Python来做逻辑回归的训练和预测的读者快速上手。&lt;/p&gt;
&lt;p&gt;逻辑回归是一项可用于预测二分类结果(binary outcome)的统计技术，广泛应用于金融、医学、犯罪学和其他社会科学中。逻辑回归使用简单且非常有效，你可以在许多机器学习、应用统计的书中的前几章中找到个关于逻辑回归的介绍。逻辑回归在许多统计课程中都会用到。&lt;/p&gt;
&lt;p&gt;我们不难找到使用R语言的高质量的逻辑回归实例，如UCLA的教程R Data Analysis Examples: Logit Regression就是一个很好的资源。Python是机器学习领域最流行的语言之一，并且已有许多Python的资源涵盖了支持向量积和文本分类等话题，但少有关于逻辑回归的资料。&lt;/p&gt;
&lt;p&gt;本文介绍了如何使用Python来完成逻辑回归。&lt;/p&gt;
&lt;h3&gt;逻辑回归的实例&lt;/h3&gt;
&lt;p&gt;在此使用与&lt;a href="http://www.ats.ucla.edu/stat/r/dae/logit.htm"&gt;Logit Regression in R&lt;/a&gt;相同的数据集来研究Python中的逻辑回归，目的是要辨别不同的因素对研究生录取的影响。&lt;/p&gt;
&lt;p&gt;数据集中的前三列可作为预测变量(predictor variables)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gpa&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gre&lt;/code&gt; 分数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rank&lt;/code&gt; 表示本科生母校的声望&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第四列&lt;code&gt;admit&lt;/code&gt;则是二分类目标变量(binary target variable)，它表明考生最终是否被录用。&lt;/p&gt;
&lt;h3&gt;加载数据&lt;/h3&gt;
&lt;p&gt;使用 &lt;code&gt;pandas.read_csv&lt;/code&gt;加载数据，这样我们就有了可用于探索数据的&lt;code&gt;DataFrame&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;statsmodels.api&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sm&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pylab&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pl&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="c1"&gt;# 加载数据&lt;/span&gt;
&lt;span class="c1"&gt;# 备用地址: http://cdn.powerxing.com/files/lr-binary.csv&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.ats.ucla.edu/stat/data/binary.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 浏览数据集&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;#    admit  gre   gpa  rank&lt;/span&gt;
&lt;span class="c1"&gt;# 0      0  380  3.61     3&lt;/span&gt;
&lt;span class="c1"&gt;# 1      1  660  3.67     3&lt;/span&gt;
&lt;span class="c1"&gt;# 2      1  800  4.00     1&lt;/span&gt;
&lt;span class="c1"&gt;# 3      1  640  3.19     4&lt;/span&gt;
&lt;span class="c1"&gt;# 4      0  520  2.93     4&lt;/span&gt;
&lt;span class="c1"&gt;# 重命名&amp;#39;rank&amp;#39;列，因为dataframe中有个方法名也为&amp;#39;rank&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;admit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;gre&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;gpa&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;prestige&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;
&lt;span class="c1"&gt;# array([admit, gre, gpa, prestige], dtype=object)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意到有一列属性名为&lt;code&gt;ran&lt;/code&gt;k，但因为&lt;code&gt;rank&lt;/code&gt;也是&lt;code&gt;pandas dataframe&lt;/code&gt;中一个方法的名字，因此需要将该列重命名为&lt;code&gt;prestige&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;统计摘要(Summary Statistics) 以及 查看数据&lt;/h3&gt;
&lt;p&gt;现在我们就将需要的数据正确载入到Python中了，现在来看下数据。我们可以使用&lt;code&gt;pandas&lt;/code&gt;的函数&lt;code&gt;describe&lt;/code&gt;来给出数据的摘要&lt;code&gt;describe&lt;/code&gt;与R语言中的&lt;code&gt;summay&lt;/code&gt;类似。这里也有一个用于计算标准差的函数&lt;code&gt;std&lt;/code&gt;，但在&lt;code&gt;describe&lt;/code&gt;中已包括了计算标准差。&lt;/p&gt;
&lt;p&gt;我特别喜欢&lt;code&gt;pandas&lt;/code&gt;的&lt;code&gt;pivot_table/crosstab&lt;/code&gt;聚合功能。&lt;code&gt;crosstab&lt;/code&gt;可方便的实现多维频率表(frequency tables)(有点像R语言中的&lt;code&gt;table&lt;/code&gt;)。你可以用它来查看不同数据所占的比例。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# summarize the data
print df.describe()
#             admit         gre         gpa   prestige
# count  400.000000  400.000000  400.000000  400.00000
# mean     0.317500  587.700000    3.389900    2.48500
# std      0.466087  115.516536    0.380567    0.94446
# min      0.000000  220.000000    2.260000    1.00000
# 25%      0.000000  520.000000    3.130000    2.00000
# 50%      0.000000  580.000000    3.395000    2.00000
# 75%      1.000000  660.000000    3.670000    3.00000
# max      1.000000  800.000000    4.000000    4.00000
# 查看每一列的标准差
print df.std()
# admit      0.466087
# gre      115.516536
# gpa        0.380567
# prestige   0.944460
# 频率表，表示prestige与admin的值相应的数量关系
print pd.crosstab(df[&amp;#39;admit&amp;#39;], df[&amp;#39;prestige&amp;#39;], rownames=[&amp;#39;admit&amp;#39;])
# prestige   1   2   3   4
# admit                   
# 0         28  97  93  55
# 1         33  54  28  12
# plot all of the columns
df.hist()
pl.show()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行代码后，绘制的柱状统计图如下所示：
&lt;center&gt;&lt;img alt="logit_hist.png" src="/article_img/Logistic_regression_python_2014_08_09_20_07/logit_hist.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;虚拟变量(dummy variables)&lt;/h3&gt;
&lt;p&gt;虚拟变量，也叫哑变量，可用来表示分类变量、非数量因素可能产生的影响。在计量经济学模型，需要经常考虑属性因素的影响。例如，职业、文化程度、季节等属性因素往往很难直接度量它们的大小。只能给出它们的“Yes—D=1”或”No—D=0”，或者它们的程度或等级。为了反映属性因素和提高模型的精度，必须将属性因素“量化”。通过构造0-1型的人工变量来量化属性因素。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pandas&lt;/code&gt;提供了一系列分类变量的控制。我们可以用&lt;code&gt;get_dummies&lt;/code&gt;来将&lt;code&gt;prestige&lt;/code&gt;一列虚拟化。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;get_dummies&lt;/code&gt;为每个指定的列创建了新的带二分类预测变量的&lt;code&gt;DataFrame&lt;/code&gt;，在本例中，&lt;code&gt;prestige&lt;/code&gt;有四个级别：1，2，3以及4（1代表最有声望），&lt;code&gt;prestige&lt;/code&gt;作为分类变量更加合适。当调用&lt;code&gt;get_dummies&lt;/code&gt;时，会产生四列的&lt;code&gt;dataframe&lt;/code&gt;，每一列表示四个级别中的一个。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# 将prestige设为虚拟变量
dummy_ranks = pd.get_dummies(df[&amp;#39;prestige&amp;#39;], prefix=&amp;#39;prestige&amp;#39;)
print dummy_ranks.head()
#    prestige_1  prestige_2  prestige_3  prestige_4
# 0           0           0           1           0
# 1           0           0           1           0
# 2           1           0           0           0
# 3           0           0           0           1
# 4           0           0           0           1
# 为逻辑回归创建所需的data frame
# 除admit、gre、gpa外，加入了上面常见的虚拟变量（注意，引入的虚拟变量列数应为虚拟变量总列数减1，减去的1列作为基准）
cols_to_keep = [&amp;#39;admit&amp;#39;, &amp;#39;gre&amp;#39;, &amp;#39;gpa&amp;#39;]
data = df[cols_to_keep].join(dummy_ranks.ix[:, &amp;#39;prestige_2&amp;#39;:])
print data.head()
#    admit  gre   gpa  prestige_2  prestige_3  prestige_4
# 0      0  380  3.61           0           1           0
# 1      1  660  3.67           0           1           0
# 2      1  800  4.00           0           0           0
# 3      1  640  3.19           0           0           1
# 4      0  520  2.93           0           0           1
# 需要自行添加逻辑回归所需的intercept变量
data[&amp;#39;intercept&amp;#39;] = 1.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样，数据原本的&lt;code&gt;prestige&lt;/code&gt;属性就被&lt;code&gt;prestige_x&lt;/code&gt;代替了，例如原本的数值为2，则&lt;code&gt;prestige_2&lt;/code&gt;为1，&lt;code&gt;prestige_1&lt;/code&gt;、&lt;code&gt;prestige_3&lt;/code&gt;、&lt;code&gt;prestige_4&lt;/code&gt;都为0。&lt;/p&gt;
&lt;p&gt;将新的虚拟变量加入到了原始的数据集中后，就不再需要原来的&lt;code&gt;prestige&lt;/code&gt;列了。在此要强调一点，生成m个虚拟变量后，只要引入m-1个虚拟变量到数据集中，未引入的一个是作为基准对比的。&lt;/p&gt;
&lt;p&gt;最后，还需加上常数&lt;code&gt;intercept&lt;/code&gt;，&lt;code&gt;statemodels&lt;/code&gt;实现的逻辑回归需要显式指定。&lt;/p&gt;
&lt;h3&gt;执行逻辑回归&lt;/h3&gt;
&lt;p&gt;实际上完成逻辑回归是相当简单的，首先指定要预测变量的列，接着指定模型用于做预测的列，剩下的就由算法包去完成了。&lt;/p&gt;
&lt;p&gt;本例中要预测的是&lt;code&gt;admin&lt;/code&gt;列，使用到&lt;code&gt;gre&lt;/code&gt;、&lt;code&gt;gpa&lt;/code&gt;和虚拟变量&lt;code&gt;prestige_2&lt;/code&gt;、&lt;code&gt;prestige_3&lt;/code&gt;、&lt;code&gt;prestige_4&lt;/code&gt;。&lt;code&gt;prestige_1&lt;/code&gt;作为基准，所以排除掉，以防止&lt;a href="http://en.wikipedia.org/wiki/Multicollinearity#Remedies_for_multicollinearity"&gt;多元共线性&lt;/a&gt;(multicollinearity)和引入分类变量的所有虚拟变量值所导致的陷阱(&lt;a href="http://en.wikipedia.org/wiki/Dummy_variable_(statistics)"&gt;dummy variable trap&lt;/a&gt;)。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# 指定作为训练变量的列，不含目标列`admit`
train_cols = data.columns[1:]
# Index([gre, gpa, prestige_2, prestige_3, prestige_4], dtype=object)
logit = sm.Logit(data[&amp;#39;admit&amp;#39;], data[train_cols])
# 拟合模型
result = logit.fit()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在这里是使用了&lt;code&gt;statesmodels&lt;/code&gt;的&lt;code&gt;Logit&lt;/code&gt;函数，更多的模型细节可以查阅&lt;code&gt;statesmodels&lt;/code&gt;的文档。&lt;/p&gt;
&lt;h3&gt;使用训练模型预测数据&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# 构建预测集&lt;/span&gt;
&lt;span class="c1"&gt;# 与训练集相似，一般也是通过 pd.read_csv() 读入&lt;/span&gt;
&lt;span class="c1"&gt;# 在这边为方便，我们将训练集拷贝一份作为预测集（不包括 admin 列）&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;copy&lt;/span&gt;
&lt;span class="n"&gt;combos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deepcopy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 数据中的列要跟预测时用到的列一致&lt;/span&gt;
&lt;span class="n"&gt;predict_cols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;combos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;span class="c1"&gt;# 预测集也要添加intercept变量&lt;/span&gt;
&lt;span class="n"&gt;combos&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;intercept&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
&lt;span class="c1"&gt;# 进行预测，并将预测评分存入 predict 列中&lt;/span&gt;
&lt;span class="n"&gt;combos&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;predict&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;combos&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;predict_cols&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;# 预测完成后，predict 的值是介于 [0, 1] 间的概率值&lt;/span&gt;
&lt;span class="c1"&gt;# 我们可以根据需要，提取预测结果&lt;/span&gt;
&lt;span class="c1"&gt;# 例如，假定 predict &amp;gt; 0.5，则表示会被录取&lt;/span&gt;
&lt;span class="c1"&gt;# 在这边我们检验一下上述选取结果的精确度&lt;/span&gt;
&lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;hit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;combos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# 预测分数 predict, 是数据中的最后一列&lt;/span&gt;
  &lt;span class="n"&gt;predict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="c1"&gt;# 实际录取结果&lt;/span&gt;
  &lt;span class="n"&gt;admit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="c1"&gt;# 假定预测概率大于0.5则表示预测被录取&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;predict&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="c1"&gt;# 表示预测命中&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;admit&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;hit&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="c1"&gt;# 输出结果&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Total: &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;, Hit: &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;, Precision: &lt;/span&gt;&lt;span class="si"&gt;%.2f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;100.0&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;hit&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Total: 49, Hit: 30, Precision: 61.22&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在这里，我是简单的将原始数据再作为待预测的数据进行检验。通过上述步骤得到的是一个概率值，而不是一个直接的二分类结果（被录取/不被录取）。通常，我们可以设定一个阈值，若 &lt;code&gt;predict&lt;/code&gt; 大于该阈值，则认为是被录取了，反之，则表示不被录取。&lt;/p&gt;
&lt;p&gt;在上面的例子中，假定预测概率大于 0.5 则表示预测被录取，一共预测有 49 个被录取，其中有 30 个预测命中，精确度为 61.22%。&lt;/p&gt;
&lt;h3&gt;结果解释&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;statesmodels&lt;/code&gt;提供了结果的摘要，如果你使用过R语言，你会发现结果的输出与之相似。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# 查看数据的要点
print result.summary()

Logit Regression Results                           
==============================================================================
Dep. Variable:                  admit   No. Observations:                  400
Model:                          Logit   Df Residuals:                      394
Method:                           MLE   Df Model:                            5
Date:                Sun, 03 Mar 2013   Pseudo R-squ.:                 0.08292
Time:                        12:34:59   Log-Likelihood:                -229.26
converged:                       True   LL-Null:                       -249.99
                                        LLR p-value:                 7.578e-08
==============================================================================
                 coef    std err          z      P&amp;gt;|z|      [95.0% Conf. Int.]
------------------------------------------------------------------------------
gre            0.0023      0.001      2.070      0.038         0.000     0.004
gpa            0.8040      0.332      2.423      0.015         0.154     1.454
prestige_2    -0.6754      0.316     -2.134      0.033        -1.296    -0.055
prestige_3    -1.3402      0.345     -3.881      0.000        -2.017    -0.663
prestige_4    -1.5515      0.418     -3.713      0.000        -2.370    -0.733
intercept     -3.9900      1.140     -3.500      0.000        -6.224    -1.756
==============================================================================
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你可以看到模型的系数，系数拟合的效果，以及总的拟合质量，以及一些统计度量。[待补充: 模型结果主要参数的含义]&lt;/p&gt;
&lt;p&gt;当然你也可以只观察结果的某部分，如置信区间(confidence interval)可以看出模型系数的健壮性。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# 查看每个系数的置信区间
print result.conf_int()
#                    0         1
# gre         0.000120  0.004409
# gpa         0.153684  1.454391
# prestige_2 -1.295751 -0.055135
# prestige_3 -2.016992 -0.663416
# prestige_4 -2.370399 -0.732529
# intercept  -6.224242 -1.755716
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在这个例子中，我们可以肯定被录取的可能性与应试者毕业学校的声望存在着逆相关的关系。&lt;/p&gt;
&lt;p&gt;换句话说，高排名学校（prestige_1==True）的湘鄂生呗录取的概率比低排名学校（prestige_4==True）要高。&lt;/p&gt;
&lt;h3&gt;相对危险度（odds ratio）&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;odds ratio&lt;br&gt;OR值，是相对危险度，又称比值比、优势比。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用每个变量系数的指数来生成odds ratio，可知变量每单位的增加、减少对录取几率的影响。例如，如果学校的声望为2，则我们可以期待被录取的几率减少大概50%。UCLA上有一个对odds ratio更为深入的解释: &lt;a href="http://www.ats.ucla.edu/stat/mult_pkg/faq/general/odds_ratio.htm"&gt;在逻辑回归中如何解释odds ratios?&lt;/a&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# 输出 odds ratio
print np.exp(result.params)
# gre           1.002267
# gpa           2.234545
# prestige_2    0.508931
# prestige_3    0.261792
# prestige_4    0.211938
# intercept     0.018500
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们也可以使用置信区间来计算系数的影响，来更好地估计一个变量影响录取率的不确定性。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# odds ratios and 95% CI
params = result.params
conf = result.conf_int()
conf[&amp;#39;OR&amp;#39;] = params
conf.columns = [&amp;#39;2.5%&amp;#39;, &amp;#39;97.5%&amp;#39;, &amp;#39;OR&amp;#39;]
print np.exp(conf)
#                   2.5%     97.5%        OR
# gre           1.000120  1.004418  1.002267
# gpa           1.166122  4.281877  2.234545
# prestige_2    0.273692  0.946358  0.508931
# prestige_3    0.133055  0.515089  0.261792
# prestige_4    0.093443  0.480692  0.211938
# intercept     0.001981  0.172783  0.018500
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;更深入的挖掘&lt;/h3&gt;
&lt;p&gt;为了评估我们分类器的效果，我们将使用每个输入值的逻辑组合（logical combination）来重新创建数据集，如此可以得知在不同的变量下预测录取可能性的增加、减少。首先我们使用名为 &lt;code&gt;cartesian&lt;/code&gt; 的辅助函数来生成组合值（来源于: &lt;a href="http://stackoverflow.com/questions/1208118/using-numpy-to-build-an-array-of-all-combinations-of-two-arrays"&gt;如何使用numpy构建两个数组的组合&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;我们使用 &lt;code&gt;np.linspace&lt;/code&gt; 创建 &lt;code&gt;gre&lt;/code&gt; 和 &lt;code&gt;gpa&lt;/code&gt; 值的一个范围，即从指定的最大、最小值来创建一个线性间隔的值的范围。在本例子中，取已知的最大、最小值。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# 根据最大、最小值生成 GRE、GPA 均匀分布的10个值，而不是生成所有可能的值
gres = np.linspace(data[&amp;#39;gre&amp;#39;].min(), data[&amp;#39;gre&amp;#39;].max(), 10)
print gres
# array([ 220.        ,  284.44444444,  348.88888889,  413.33333333,
#         477.77777778,  542.22222222,  606.66666667,  671.11111111,
#         735.55555556,  800.        ])
gpas = np.linspace(data[&amp;#39;gpa&amp;#39;].min(), data[&amp;#39;gpa&amp;#39;].max(), 10)
print gpas
# array([ 2.26      ,  2.45333333,  2.64666667,  2.84      ,  3.03333333,
#         3.22666667,  3.42      ,  3.61333333,  3.80666667,  4.        ])
# 枚举所有的可能性
combos = pd.DataFrame(cartesian([gres, gpas, [1, 2, 3, 4], [1.]]))
# 重新创建哑变量
combos.columns = [&amp;#39;gre&amp;#39;, &amp;#39;gpa&amp;#39;, &amp;#39;prestige&amp;#39;, &amp;#39;intercept&amp;#39;]
dummy_ranks = pd.get_dummies(combos[&amp;#39;prestige&amp;#39;], prefix=&amp;#39;prestige&amp;#39;)
dummy_ranks.columns = [&amp;#39;prestige_1&amp;#39;, &amp;#39;prestige_2&amp;#39;, &amp;#39;prestige_3&amp;#39;, &amp;#39;prestige_4&amp;#39;]
# 只保留用于预测的列
cols_to_keep = [&amp;#39;gre&amp;#39;, &amp;#39;gpa&amp;#39;, &amp;#39;prestige&amp;#39;, &amp;#39;intercept&amp;#39;]
combos = combos[cols_to_keep].join(dummy_ranks.ix[:, &amp;#39;prestige_2&amp;#39;:])
# 使用枚举的数据集来做预测
combos[&amp;#39;admit_pred&amp;#39;] = result.predict(combos[train_cols])
print combos.head()
#    gre       gpa  prestige  intercept  prestige_2  prestige_3  prestige_4  admit_pred
# 0  220  2.260000         1          1           0           0           0    0.157801
# 1  220  2.260000         2          1           1           0           0    0.087056
# 2  220  2.260000         3          1           0           1           0    0.046758
# 3  220  2.260000         4          1           0           0           1    0.038194
# 4  220  2.453333         1          1           0           0           0    0.179574
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在我们已生成了预测结果，接着通过画图来呈现结果。我编写了一个名为 &lt;code&gt;isolate_and_plot&lt;/code&gt; 的辅助函数，可以比较给定的变量与不同的声望等级、组合的平均可能性。为了分离声望和其他变量，我使用了 &lt;code&gt;pivot_table&lt;/code&gt; 来简单地聚合数据。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def isolate_and_plot(variable):
    # isolate gre and class rank
    grouped = pd.pivot_table(combos, values=[&amp;#39;admit_pred&amp;#39;], index=[variable, &amp;#39;prestige&amp;#39;],
                            aggfunc=np.mean)
    # in case you&amp;#39;re curious as to what this looks like
    # print grouped.head()
    #                      admit_pred
    # gre        prestige            
    # 220.000000 1           0.282462
    #            2           0.169987
    #            3           0.096544
    #            4           0.079859
    # 284.444444 1           0.311718
    # make a plot
    colors = &amp;#39;rbgyrbgy&amp;#39;
    for col in combos.prestige.unique():
        plt_data = grouped.ix[grouped.index.get_level_values(1)==col]
        pl.plot(plt_data.index.get_level_values(0), plt_data[&amp;#39;admit_pred&amp;#39;],
                color=colors[int(col)])
    pl.xlabel(variable)
    pl.ylabel(&amp;quot;P(admit=1)&amp;quot;)
    pl.legend([&amp;#39;1&amp;#39;, &amp;#39;2&amp;#39;, &amp;#39;3&amp;#39;, &amp;#39;4&amp;#39;], loc=&amp;#39;upper left&amp;#39;, title=&amp;#39;Prestige&amp;#39;)
    pl.title(&amp;quot;Prob(admit=1) isolating &amp;quot; + variable + &amp;quot; and presitge&amp;quot;)
    pl.show()
isolate_and_plot(&amp;#39;gre&amp;#39;)
isolate_and_plot(&amp;#39;gpa&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;center&gt;&lt;img alt="isolated_rank_and_gre.png" src="/article_img/Logistic_regression_python_2014_08_09_20_07/isolated_rank_and_gre.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="isolated_rank_and_gpa.png" src="/article_img/Logistic_regression_python_2014_08_09_20_07/isolated_rank_and_gpa.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;结果图显示了 gre, gpa 和 prestige 如何影响录取。可以看出，随着 gre 和 gpa 的增加，录取可能性如何逐渐增加，并且，不同的学校声望对录取可能性的增加程度相差很大。&lt;/p&gt;
&lt;h3&gt;结束语&lt;/h3&gt;
&lt;p&gt;逻辑回归是用于分类的优秀算法，尽管有一些更加性感的，或是黑盒分类器算法，如SVM和随机森林（RandomForest）在一些情况下性能更好，但深入了解你正在使用的模型是很有价值的。很多时候你可以使用随机森林来筛选模型的特征，并基于筛选出的最佳的特征，使用逻辑回归来重建模型。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Sat, 09 Aug 2014 20:07:00 +0800</pubDate><guid>tag:,2014-08-09:2014/Logistic_regression_python_2014_08_09_20_07.html</guid><category>classification</category><category>algorithm</category><category>Python</category></item><item><title>逻辑回归</title><link>/2014/Logistic_regression_2014_08_07_19_47.html</link><description>&lt;h2&gt;Logistic regression&lt;/h2&gt;
&lt;p&gt;设样本 $ {x,y} $，$ y=0 $ 或 $ y=1 $，表正类或负类。 $ x $是$ m $维样本特征向量。那么，$ x $属于正类，也就是$ y=1 $的“概率”表示为：&lt;/p&gt;
&lt;p&gt;$$ P(y=1\mid x;\theta)=\sigma(\theta^Tx)=\frac{1}{1+\exp(-\theta^Tx)} $$&lt;/p&gt;
&lt;p&gt;$ \theta $是模型参数（或叫回归系数），$ \sigma $是sigmoid函数。&lt;/p&gt;
&lt;p&gt;实际上，是由 $ x $属于正类的可能性和负类的可能性的比值的对数变换得到的：&lt;/p&gt;
&lt;p&gt;$$ \begin{aligned}\log it(x)&amp;amp;=\ln(\frac{P(y=1\mid x)}{P(y=0\mid x)}) \\ &amp;amp;=\ln(\frac{P(y=1\mid x)}{1-P(y=1\mid x)}) \\ &amp;amp;=\theta_0+\theta_1 x_1+\theta_2 x_2+\cdot \cdot \cdot +\theta_m x_m \end{aligned} $$&lt;/p&gt;
&lt;p&gt;$ \theta_m $为权重（或叫回归系数），$ x_m $为因数。&lt;/p&gt;
&lt;p&gt;它跟线性回归最大的区别在于将线性回归中很大的数压缩到[0,1]之间，这样值输出表达为“可能性”增加说服力（？？？？），同时弱化冒尖变量的影响&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Thu, 07 Aug 2014 19:47:00 +0800</pubDate><guid>tag:,2014-08-07:2014/Logistic_regression_2014_08_07_19_47.html</guid><category>classification</category><category>algorithm</category></item><item><title>极大似然估计</title><link>/2014/MLE_2014_08_07_19_09.html</link><description>&lt;h2&gt;Maximum Likelihood Estimate&lt;/h2&gt;
&lt;h3&gt;似然函数&lt;/h3&gt;
&lt;p&gt;在数理统计学中，似然函数是一种关于统计模型中的参数的函数，表示模型参数中的似然性。&lt;/p&gt;
&lt;p&gt;似然函数在统计推断中有重大作用，如在最大似然估计和费雪信息之中的应用等等。“似然性”与“或然性”或“概率”意思相近，都是指某种事件发生的可能性，但是在统计学中，“似然性”和“或然性”或“概率”又有明确的区分。&lt;/p&gt;
&lt;p&gt;概率 用于在已知一些参数的情况下，预测接下来的观测所得到的结果，而&lt;/p&gt;
&lt;p&gt;似然性 则是用于在已知某些观测所得到的结果时，对有关事物的性质的参数进行估计。&lt;/p&gt;
&lt;p&gt;在这种意义上，似然函数可以理解为条件概率的逆反。&lt;/p&gt;
&lt;p&gt;在已知某个参数&lt;strong&gt;B&lt;/strong&gt;时，事件&lt;strong&gt;A&lt;/strong&gt;会发生的概率写作 $ \mathbb{P}(A \mid B) $。&lt;/p&gt;
&lt;p&gt;$$ P(A \mid B) = \frac{P(A , B)}{P(B)} $$&lt;/p&gt;
&lt;p&gt;利用贝叶斯定理，&lt;/p&gt;
&lt;p&gt;$$ P(B \mid A) = \frac{P(A \mid B)\;P(B)}{P(A)} $$&lt;/p&gt;
&lt;p&gt;因此，我们可以反过来构造表示似然性的方法：已知有事件&lt;strong&gt;A&lt;/strong&gt;发生，运用似然函数$$ \mathbb{L}(B \mid A) $$，我们估计参数&lt;strong&gt;B&lt;/strong&gt;的可能性。&lt;/p&gt;
&lt;p&gt;形式上，似然函数也是一种条件概率函数，但我们关注的变量改变了：&lt;/p&gt;
&lt;p&gt;$$ b\mapsto P(A \mid B=b) $$&lt;/p&gt;
&lt;p&gt;注意到这里并不要求似然函数满足归一性：&lt;/p&gt;
&lt;p&gt;$$ \sum_{b \in \mathcal{B}}{P(A \mid B=b)} = 1  $$&lt;/p&gt;
&lt;p&gt;一个似然函数乘以一个正的常数之后仍然是似然函数。对所有$ \alpha &amp;gt; 0 $，都可以有似然函数：&lt;/p&gt;
&lt;p&gt;$$ L(b \mid A) = \alpha \; P(A \mid B=b) $$&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;p&gt;考虑投掷一枚硬币的实验。通常来说，已知投出的硬币正面朝上和反面朝上的概率各自是$ p_H = 0.5 $，便可以知道投掷若干次后出现各种结果的可能性。比如说，投两次都是正面朝上的概率是0.25。用条件概率表示，就是：&lt;/p&gt;
&lt;p&gt;$$ P(\mbox{HH} \mid p_H = 0.5) = 0.5^2 = 0.25 $$&lt;/p&gt;
&lt;p&gt;其中&lt;strong&gt;H&lt;/strong&gt;表示正面朝上。&lt;/p&gt;
&lt;p&gt;在统计学中，我们关心的是在已知一系列投掷的结果时，关于硬币投掷时正面朝上的可能性的信息。我们可以建立一个统计模型：假设硬币投出时会有$ p_H $ 的概率正面朝上，而有$ 1 − p_H $的概率反面朝上。这时，条件概率可以改写成似然函数：&lt;/p&gt;
&lt;p&gt;$$ L(p_H = 0.5 \mid \mbox{HH}) = P(\mbox{HH}\mid p_H = 0.5) =0.25 $$&lt;/p&gt;
&lt;p&gt;也就是说，对于取定的似然函数，在观测到两次投掷都是正面朝上时，$ p_H = 0.5 $ 的似然性是0.25（这并不表示当观测到两次正面朝上时$ p_H = 0.5 $ 的&lt;strong&gt;概率&lt;/strong&gt;是0.25）。&lt;/p&gt;
&lt;p&gt;如果考虑$ p_H = 0.6 $，那么似然函数的值也会改变。&lt;/p&gt;
&lt;p&gt;$$ L(p_H = 0.6 \mid \mbox{HH}) = P(\mbox{HH}\mid p_H = 0.6) =0.36 $$&lt;/p&gt;
&lt;p&gt;注意到似然函数的值变大了。这说明，如果参数$ p_H $的取值变成0.6的话，结果观测到连续两次正面朝上的概率要比假设$ p_H = 0.5 $时更大。也就是说，参数 $ p_H $ 取成0.6 要比取成0.5 更有说服力，更为“合理”。总之，似然函数的重要性不是它的具体取值，而是当参数变化时函数到底变小还是变大。对同一个似然函数，如果存在一个参数值，使得它的函数值达到最大的话，那么这个值就是最为“合理”的参数值。&lt;/p&gt;
&lt;p&gt;在这个例子中，似然函数实际上等于：
$$ L(p_H = \theta \mid \mbox{HH}) = P(\mbox{HH}\mid p_H = \theta) =\theta^2 $$ 
其中 $0 \le p_H \le 1 $。&lt;/p&gt;
&lt;p&gt;如果取$ p_H = 1 $ ，那么似然函数达到最大值1。也就是说，当连续观测到两次正面朝上时，假设硬币投掷时正面朝上的概率为1是最合理的。&lt;/p&gt;
&lt;p&gt;类似地，如果观测到的是三次投掷硬币，头两次正面朝上，第三次反面朝上，那么似然函数将会是：
$$L(p_H = \theta \mid \mbox{HHT}) = P(\mbox{HHT}\mid p_H = \theta) =\theta^2(1 - \theta)$$ ，
其中T表示反面朝上，$ 0 \le p_H \le 1 $ 。&lt;/p&gt;
&lt;p&gt;这时候，似然函数的最大值将会在$ p_H = \frac{2}{3} $的时候取到。也就是说，当观测到三次投掷中前两次正面朝上而后一次反面朝上时，估计硬币投掷时正面朝上的概率$ p_H = \frac{2}{3} $ 是最合理的。&lt;/p&gt;
&lt;h3&gt;似然估计&lt;/h3&gt;
&lt;p&gt;$$ L(\theta)=L(x_1,x_2,\cdot \cdot \cdot ,x_n;\theta) = \prod_{i=1}^{n}P(x_i;\theta),\theta\in \Theta $$&lt;/p&gt;
&lt;p&gt;既概率密度参数是 $ \theta $ 时，得到x组样本的概率。&lt;br&gt;
x是已知的，只有 $ \theta $ 是未知的。&lt;br&gt;
它是$ \theta $的函数，表示不同$ \theta $下取得当前样本的可能性。称为参数$ \theta $相对于样本集x的似然函数。&lt;/p&gt;
&lt;h3&gt;最大似然估计&lt;/h3&gt;
&lt;p&gt;$$ \theta = argmax L(\theta) $$&lt;/p&gt;
&lt;p&gt;有时候$ L(\theta) $ 是连乘的，还可以定义对数似然，将其变为连加：&lt;/p&gt;
&lt;p&gt;$$ H(\theta) = \ln L(\theta) = ln\prod_{i=1}^{n}P(x_i;\theta) = \sum_{i=1}^{n}\ln P(x_i;\theta) $$&lt;/p&gt;
&lt;p&gt;以上，要求 $ \theta $ ，只要使 $ \theta $ 的似然函数 $ L(\theta) $极大化，然后极大值对应的$ \theta $就是我们的估计。&lt;/p&gt;
&lt;p&gt;最值等于求导，导数为0，那么方程解就是$ \theta $了。&lt;br&gt;
如果$ \theta $包括多个参数向量，那么求的是$ L(\theta) $对应所有参数的偏导，也就是梯度。&lt;/p&gt;
&lt;p&gt;n个未知数就是n个方程，方程组的解就是极值点，当然也就得到几个参数。&lt;/p&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;写出似然函数。&lt;/li&gt;
&lt;li&gt;对似然函数取对数，整理。&lt;/li&gt;
&lt;li&gt;求导数，令导数得0，得到似然方程。&lt;/li&gt;
&lt;li&gt;求解。&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Thu, 07 Aug 2014 19:09:00 +0800</pubDate><guid>tag:,2014-08-07:2014/MLE_2014_08_07_19_09.html</guid><category>algorithm</category><category>Math</category></item><item><title>梯度下降</title><link>/2014/gradient_descent_2014_08_02_21_29.html</link><description>&lt;h2&gt;gradient descent&lt;/h2&gt;
&lt;p&gt;这是求解无约束优化问题最简单和最古老的方法，常用于机器学习和人工智能当中用来递归性地逼近最小偏差模型by wiki。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;f = lambda x : x**3 #随便写的个函数
x = 2
step = 0.01 
lossChange = f(x)
lossed = f(x)
print &amp;#39;x:&amp;#39;, x, &amp;#39;lossChange:&amp;#39;, lossChange, &amp;#39;loss:&amp;#39;, lossed
while lossChange &amp;gt; 0.00000001: #当变化小到一定程度是认为是局部最小
    x = x - step * 3 *( x**2) #减的是梯度方向上的变化
    lossChange = lossed - f(x)
    lossed = f(x)
    print &amp;#39;x:&amp;#39;, x, &amp;#39;lossChange:&amp;#39;, lossChange, &amp;#39;loss:&amp;#39;, lossed
    print x
    print f(x)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后找到个局部最优解！&lt;/p&gt;
&lt;p&gt;其迭代公式为 $ f(k+1)=f(k)-\theta f'(k) $,其中 $ \theta $是步长，或叫学习速率。步长越小收敛速度越慢，但步长过大有可能跳过不保证每次迭代都减少，甚至不一定收敛。&lt;/p&gt;
&lt;p&gt;最后再说说意义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在标量场f中的一点处存在一个矢量G(或者上边的f`)，该矢量方向为f在该点处变化率最大的方向，其模也等于这个最大变化率的数值，则矢量G称为标量场f的梯度。&lt;br&gt;
在向量微积分中，标量场的梯度是一个向量场。&lt;br&gt;
标量场中某一点上的梯度指向标量场增长最快的方向，梯度的长度是这个最大的变化率。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过负梯度，一步步逼近某个局部的最值。&lt;/p&gt;
&lt;h2&gt;进阶--随机梯度下降法&lt;/h2&gt;
&lt;p&gt;stochastic gradient descent，也叫增量梯度下降。&lt;/p&gt;
&lt;p&gt;由于梯度下降法收敛速度慢，而随机梯度下降法会快很多&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;根据某个单独样例的误差增量计算权值更新，得到近似的梯度下降搜索。（随机取一个样例）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以看作为每个单独的训练样例定义不同的误差函数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在迭代所有训练样例时，这些权值更新的序列给出了对于原来误差函数的梯度下降的一个合理近似。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过使下降速率的值足够小，可以使随机梯度下降以任意程度接近于真实梯度下降。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;标准梯度下降和随机梯度下降之间的关键区别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;标准梯度下降是在权值更新前对所有样例汇总误差，而随机梯度下降的权值是通过考查某个训练样例来更新的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在标准梯度下降中，权值更新的每一步对多个样例求和，需要更多的计算。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;标准梯度下降，由于使用真正的梯度，标准梯度下降对于每一次权值更新经常使用比随机梯度下降大的步长。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果标准误差曲面有多个局部极小值，随机梯度下降有时可能避免陷入这些局部极小值中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Sat, 02 Aug 2014 21:29:00 +0800</pubDate><guid>tag:,2014-08-02:2014/gradient_descent_2014_08_02_21_29.html</guid><category>classification</category><category>algorithm</category><category>Python</category><category>Math</category></item><item><title>neural network</title><link>/2014/neural_network_2014_06_14_19_58.html</link><description>&lt;h2&gt;Principles of training multi-layer neural network using backpropagation&lt;/h2&gt;
&lt;p&gt;The project describes teaching process of multi-layer neural network employing &lt;em&gt;backpropagation&lt;/em&gt; algorithm. To illustrate this 
process the three layer neural network with two inputs and one output,which is shown in the picture below, is used:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/neural_network_2014_06_14_19_58/img01.gif" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Each neuron is composed of two units. First unit adds products of weights coefficients and input signals. The second unit realise nonlinear
 function, called neuron activation function. Signal &lt;em&gt;e&lt;/em&gt; is adder output signal, and &lt;em&gt;y = f(e)&lt;/em&gt; is output signal of nonlinear 
element. Signal &lt;em&gt;y&lt;/em&gt; is also output signal of neuron.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/neural_network_2014_06_14_19_58/img01b.gif" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;To teach the neural network we need training data set. The training data set consists of input signals (&lt;em&gt;x&lt;sub&gt;1&lt;/sub&gt;&lt;/em&gt; and 
&lt;em&gt;x&lt;sub&gt;2&lt;/sub&gt;&lt;/em&gt; ) assigned with corresponding target (desired output) &lt;em&gt;z&lt;/em&gt;. The network training is an iterative process. In each 
iteration weights coefficients of nodes are modified using new data from training data set. Modification is calculated using algorithm 
described below:
Each teaching step starts with forcing both input signals from training set. After this stage we can determine output signals values for 
each neuron in each network layer. Pictures below illustrate how signal is propagating through the network, Symbols &lt;em&gt;w&lt;sub&gt;(xm)n&lt;/sub&gt;&lt;/em&gt;
 represent weights of connections between network input &lt;em&gt;x&lt;sub&gt;m&lt;/sub&gt;&lt;/em&gt; and neuron &lt;em&gt;n&lt;/em&gt; in input layer. Symbols &lt;em&gt;y&lt;sub&gt;n&lt;/sub&gt;&lt;/em&gt;
 represents output signal of neuron &lt;em&gt;n&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/neural_network_2014_06_14_19_58/img02.gif" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/neural_network_2014_06_14_19_58/img03.gif" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/neural_network_2014_06_14_19_58/img04.gif" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Propagation of signals through the hidden layer. Symbols &lt;em&gt;w&lt;sub&gt;mn&lt;/sub&gt;&lt;/em&gt; represent weights of connections between output of neuron
 &lt;em&gt;m&lt;/em&gt; and input of neuron &lt;em&gt;n&lt;/em&gt; in the next layer.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/neural_network_2014_06_14_19_58/img05.gif" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/neural_network_2014_06_14_19_58/img06.gif" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Propagation of signals through the output layer.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/neural_network_2014_06_14_19_58/img07.gif" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;In the next algorithm step the output signal of the network &lt;em&gt;y&lt;/em&gt; is compared with the desired output value (the target), which is found
 in training data set. The difference is called error signal &lt;font face="symbol"&gt;&lt;span style="font-family: Symbol"&gt;&lt;em&gt;d&lt;/em&gt;&lt;/span&gt;&lt;/font&gt; of
 output layer neuron. &lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/neural_network_2014_06_14_19_58/img08.gif" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;It is impossible to compute error signal for internal neurons directly, because output values of these neurons are unknown. For many years 
the effective method for training  multiplayer networks has been unknown. Only in the middle eighties the backpropagation algorithm has been
 worked out. The idea is to propagate error signal &lt;font face="symbol"&gt;&lt;span style="font-family: Symbol"&gt;&lt;em&gt;d&lt;/em&gt;&lt;/span&gt;&lt;/font&gt; (computed in 
single teaching step) back to all neurons, which output signals were input for discussed neuron.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/neural_network_2014_06_14_19_58/img09.gif" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/neural_network_2014_06_14_19_58/img10.gif" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;The weights' coefficients &lt;em&gt;w&lt;sub&gt;mn&lt;/sub&gt;&lt;/em&gt; used to propagate errors back are equal to this used during computing output value. Only the 
direction of data flow is changed (signals are propagated from output to inputs one after the other). This technique is used for all network
 layers. If propagated errors came from few neurons they are added. The illustration is below:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/neural_network_2014_06_14_19_58/img11.gif" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/neural_network_2014_06_14_19_58/img12.gif" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/neural_network_2014_06_14_19_58/img13.gif" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;When the error signal for each neuron is computed, the weights coefficients of each neuron input node may be modified. In formulas below 
&lt;em&gt;df(e)/de&lt;/em&gt; represents derivative of neuron activation function (which weights are modified).&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/neural_network_2014_06_14_19_58/img14.gif" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/neural_network_2014_06_14_19_58/img15.gif" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/neural_network_2014_06_14_19_58/img16.gif" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/neural_network_2014_06_14_19_58/img17.gif" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/neural_network_2014_06_14_19_58/img18.gif" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/neural_network_2014_06_14_19_58/img19.gif" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Coefficient &lt;font face="symbol"&gt;&lt;span style="font-family: Symbol"&gt;&lt;em&gt;h&lt;/em&gt;&lt;/span&gt;&lt;/font&gt; affects network teaching speed. There are a few
 techniques to select this parameter. The first method is to start teaching process with large value of the parameter. While weights 
coefficients are being established the parameter is being decreased gradually. The second, more complicated, method starts teaching with 
small parameter value. During the teaching process the parameter is being increased when the teaching is advanced and then decreased again in 
the final stage. Starting teaching process with low parameter value enables to determine weights coefficients signs.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Sat, 14 Jun 2014 19:58:00 +0800</pubDate><guid>tag:,2014-06-14:2014/neural_network_2014_06_14_19_58.html</guid><category>CNN</category><category>ML</category></item><item><title>函数缓存</title><link>/2014/Python_Cache_2014_04_19_22_07.html</link><description>&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hashlib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pickle&lt;/span&gt;

&lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_obsolete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;duration&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;compute_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pickle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sha1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;memoize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_memorize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__memorize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;compute_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;is_obsolete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;we got a winner&amp;#39;&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;__memorize&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_memorize&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里memoize就是一个装饰器，duration是缓存过期时间。compute_key函数合并调用的函数的名称、参数并计算出key。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Sat, 19 Apr 2014 22:07:00 +0800</pubDate><guid>tag:,2014-04-19:2014/Python_Cache_2014_04_19_22_07.html</guid><category>Decorator</category><category>cache</category><category>Python</category></item><item><title>k-means++</title><link>/2014/k_means_plus_2014_03_15_23_18.html</link><description>&lt;h2&gt;k-means++&lt;/h2&gt;
&lt;h3&gt;过程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;随机抽几个种子点。&lt;/li&gt;
&lt;li&gt;对每个点，都计算其和最近的“种子点”的距离$ D(X) $并保存在一个数组中，然后求得$ \sum D(X) $。&lt;/li&gt;
&lt;li&gt;再取1个随机值，用权重的方式计算下一个种子点。具体为：先取一个能落在$ \sum D(X) $ 中的random，然后&lt;code&gt;random-=D(X)&lt;/code&gt;,知道其&amp;lt;=0。此点为下一个种子。&lt;/li&gt;
&lt;li&gt;重复2，3。&lt;/li&gt;
&lt;li&gt;进行k-means。&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Sat, 15 Mar 2014 23:18:00 +0800</pubDate><guid>tag:,2014-03-15:2014/k_means_plus_2014_03_15_23_18.html</guid><category>ML</category><category>clustering</category><category>algorithm</category><category>Math</category></item><item><title>k-means</title><link>/2014/k_means_2014_03_15_22_51.html</link><description>&lt;h2&gt;k-means&lt;/h2&gt;
&lt;p&gt;典型的基于原型的目标函数聚类方法的代表，它是数据点到原型的某种距离作为优化的目标函数，利用函数求极值的方法得到迭代运算的调整规则。K-means算法以某种距离作为相似度测度，它是求对应某一初始聚类中心向量V最优分类，使得评价指标J最小。算法采用误差平方和准则函数作为聚类准则函数。&lt;/p&gt;
&lt;h3&gt;标量&lt;/h3&gt;
&lt;p&gt;嗯，各种距离&lt;/p&gt;
&lt;h3&gt;二元变量&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;对称&lt;/li&gt;
&lt;li&gt;非对称：1与1同，0与1不同，0与0不同。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;分类变量&lt;/h3&gt;
&lt;p&gt;略&lt;/p&gt;
&lt;h3&gt;序数变量&lt;/h3&gt;
&lt;p&gt;略&lt;/p&gt;
&lt;h3&gt;向量&lt;/h3&gt;
&lt;p&gt;余弦度量(相似度)：
$$ \frac{xy}{\left | \left \| x \right \| \left \| y \right \| \right |}=\sigma(x,y)  $$&lt;/p&gt;
&lt;h3&gt;标量规格化&lt;/h3&gt;
&lt;p&gt;反正就是映射到[0,1]上，略&lt;/p&gt;
&lt;h3&gt;算法过程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;从N个文档随机选取K个文档作为质心&lt;/li&gt;
&lt;li&gt;对剩余的每个文档测量其到每个质心的距离，并把它归到最近的质心的类&lt;/li&gt;
&lt;li&gt;重新计算已经得到的各个类的质心&lt;/li&gt;
&lt;li&gt;迭代2～3步直至新的质心与原质心相等或小于指定阈值，算法结束&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;简单的思路来说就是：
先定：k，既分为k个簇，定义中心点，做第一次聚类&lt;br&gt;
调整：某类每一个项分别算术平均，更新中心点&lt;br&gt;
再聚类，再调整，直到中心值变化小于阈值。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Sat, 15 Mar 2014 22:51:00 +0800</pubDate><guid>tag:,2014-03-15:2014/k_means_2014_03_15_22_51.html</guid><category>ML</category><category>clustering</category><category>algorithm</category><category>Math</category></item><item><title>“距离”计算</title><link>/2014/distance_2014_03_15_22_14.html</link><description>&lt;h2&gt;各种距离&lt;/h2&gt;
&lt;h3&gt;闵可夫斯基距离&lt;/h3&gt;
&lt;p&gt;$$ d_{ij}=\sqrt[\lambda]{\sum_{k=1}^{n}\left|x_{ik}-x_{jk}\right|^{\lambda}}  $$&lt;/p&gt;
&lt;p&gt;以星型逼近,$ \lambda = 0.25 $时，几乎为一个点，$ \lambda = 1 $ 相当于曼哈顿距离，而$ \lambda = 2 $时，逼近范围是个圈，既欧式距离，$ \lambda = \infty $ 时，方型，切比雪夫距离。&lt;/p&gt;
&lt;h3&gt;欧式距离&lt;/h3&gt;
&lt;p&gt;$$ d_{ij}=\sqrt[2]{\sum_{k=1}^{n}\left|x_{ik}-x_{jk}\right|^{2}} $$&lt;/p&gt;
&lt;p&gt;以圆型逼近。&lt;/p&gt;
&lt;p&gt;曼哈顿距离：&lt;/p&gt;
&lt;p&gt;$$ d_{ij}=\sum_{k=1}^{n}\left|x_{ik}-x_{jk}\right| $$&lt;/p&gt;
&lt;p&gt;以菱型逼近。&lt;/p&gt;
&lt;h4&gt;问题&lt;/h4&gt;
&lt;p&gt;闵氏距离，曼哈顿距离、欧氏距离和切比雪夫距离都存在明显的缺点。
举个例子：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;二维样本(身高,体重)，其中身高范围是150~190，体重范围是50~60，有三个样本：a(180,50)，b(190,50)，c(180,60)。那么a与b之间的闵氏距离（无论是曼哈顿距离、欧氏距离或切比雪夫距离）等于a与c之间的闵氏距离，但是身高的10cm真的等价于体重的10kg么？因此用闵氏距离来衡量这些样本间的相似度很有问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单说来，闵氏距离的缺点主要有两个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将各个分量的量纲(scale)，也就是“单位”当作相同的看待了。&lt;/li&gt;
&lt;li&gt;没有考虑各个分量的分布（期望，方差等)可能是不同的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;标准化欧氏距离&lt;/h3&gt;
&lt;p&gt;标准化欧氏距离是针对简单欧氏距离的缺点而作的一种改进方案。标准欧氏距离的思路：既然数据各维分量的分布不一样，好吧！那我先将各个分量都“标准化”到均值、方差相等吧。均值和方差标准化到多少呢？这里先复习点统计学知识吧，假设样本集X的均值(mean)为m，标准差(standarddeviation)为s，那么X的“标准化变量”表示为：&lt;br&gt;
而且标准化变量的数学期望为0，方差为1。因此样本集的标准化过程(standardization)用公式描述就是：
$$ X^{*} = \frac{X-m}{s} $$&lt;/p&gt;
&lt;p&gt;标准化后的值 =  ( 标准化前的值  － 分量的均值 ) /分量的标准差&lt;/p&gt;
&lt;p&gt;标准化欧氏距离的公式：
$$ d_{ij}=\sqrt{\sum_{k=1}^{n}(\frac{x_{ik}-x_{jk}}{s_{k}})^{2}} $$  &lt;/p&gt;
&lt;p&gt;如果将方差的倒数看成是一个权重，这个公式可以看成是一种加权欧氏距离(WeightedEuclidean distance)。&lt;/p&gt;
&lt;h3&gt;马氏距离&lt;/h3&gt;
&lt;p&gt;它是一种有效的计算两个未知样本集的相似度的方法。与欧氏距离不同的是它考虑到各种特性之间的联系,是一种采样协方差来计算两点之间距离的方法。(欧氏距离是马氏距离的特殊情形)&lt;/p&gt;
&lt;p&gt;对于一个均值为 $ \mu=(\mu_1,\mu_2,\mu_3,\dots,\mu_p)^T $协方差矩阵为$ \sum $的多变量向量 $ x=(x_1,x_2,x_3,\dots,x_p)^T $,&lt;br&gt;
其马氏距离为&lt;/p&gt;
&lt;p&gt;$$ D_M(x)=\sqrt{(x-\mu)^T\Sigma^{-1}(x-\mu)} $$&lt;/p&gt;
&lt;p&gt;马氏距离也可以定义为两个服从同一分布并且其协方差矩阵为Σ的随机变量 $\vec{x}$与 $\vec{y}$ 的差异程度:&lt;/p&gt;
&lt;p&gt;$$ d(\vec{x},\vec{y})=\sqrt{(\vec{x}-\vec{y})^T\Sigma^{-1} (\vec{x}-\vec{y})} $$&lt;/p&gt;
&lt;p&gt;如果协方差矩阵为单位矩阵,那么马氏距离就简化为欧式距离,如果协方差矩阵为对角阵,则其也可称为正规化的欧氏距离'。&lt;/p&gt;
&lt;p&gt;$$ d(\vec{x},\vec{y})= \sqrt{\sum_{i=1}^p {(x_i - y_i)^2 \over \sigma_i^2}} $$&lt;/p&gt;
&lt;p&gt;其中 $ \sigma_i $ 是 $ x_i $ 的标准差。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两点之间的马氏距离与原始数据的测量单位无关。&lt;/li&gt;
&lt;li&gt;标准化数据和中心化数据(即原始数据与均值之差）计算出的二点之间的马氏距离相同。&lt;/li&gt;
&lt;li&gt;可以排除变量之间的相关性的干扰。&lt;/li&gt;
&lt;li&gt;满足距离的四个基本公理：非负性、自反性、对称性和三角不等式。&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Sat, 15 Mar 2014 22:14:00 +0800</pubDate><guid>tag:,2014-03-15:2014/distance_2014_03_15_22_14.html</guid><category>ML</category><category>clustering</category><category>algorithm</category><category>Math</category></item><item><title>Python with</title><link>/2014/Python_with_2014_02_08_20_31.html</link><description>&lt;h2&gt;with语句是什么？&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Python’s with statement provides a very convenient way of dealing with the situation where you have to do a setup and teardown to make something happen. A very good example for this is the situation where you want to gain a handler to a file, read data from the file and the close the file handler.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有一些任务，可能事先需要设置，事后做清理工作。对于这种场景，Python的with语句提供了一种非常方便的处理方式。一个很好的例子是文件处理，你需要获取一个文件句柄，从文件中读取数据，然后关闭文件句柄。&lt;/p&gt;
&lt;p&gt;如果不用with语句，代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;file = open(&amp;quot;/tmp/foo.txt&amp;quot;)
data = file.read()
file.close()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里有两个问题。一是可能忘记关闭文件句柄；二是文件读取数据发生异常，没有进行任何处理。下面是处理异常的加强版本：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;file = open(&amp;quot;/tmp/foo.txt&amp;quot;)
try:
    data = file.read()
finally:
    file.close()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;虽然这段代码运行良好，但是太冗长了。这时候就是with一展身手的时候了。除了有更优雅的语法，with还可以很好的处理上下文环境产生的异常。下面是with版本的代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;with open(&amp;quot;/tmp/foo.txt&amp;quot;)
 as file:
    data = file.read()
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;with如何工作？&lt;/h3&gt;
&lt;p&gt;这看起来充满魔法，但不仅仅是魔法，Python对with的处理还很聪明。基本思想是with所求值的对象必须有一个__enter__()方法，一个__exit__()方法。&lt;/p&gt;
&lt;p&gt;紧跟with后面的语句被求值后，返回对象的__enter__()方法被调用，这个方法的返回值将被赋值给as后面的变量。当with后面的代码块全部被执行完之后，将调用前面返回对象的__exit__()方法。&lt;/p&gt;
&lt;p&gt;下面例子可以具体说明with如何工作：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;#!/usr/bin/env
 python
#
 with_example01.py


class Sample:
    def __enter__(self):
        print &amp;quot;In
 __enter__()&amp;quot;
        return &amp;quot;Foo&amp;quot;

    def __exit__(self, type,
 value, trace):
        print &amp;quot;In
 __exit__()&amp;quot;


def get_sample():
    return Sample()


with
 get_sample() as sample:
    print &amp;quot;sample:&amp;quot;,
 sample
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;运行代码，输出如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;bash-3.2$
 ./with_example01.py
In
 __enter__()
sample:
 Foo
In
 __exit__()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;正如你看到的&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;__enter__()方法被执行&lt;/li&gt;
&lt;li&gt;__enter__()方法返回的值 - 这个例子中是"Foo"，赋值给变量'sample'&lt;/li&gt;
&lt;li&gt;执行代码块，打印变量"sample"的值为 "Foo"&lt;/li&gt;
&lt;li&gt;__exit__()方法被调用&lt;/li&gt;
&lt;li&gt;with真正强大之处是它可以处理异常。可能你已经注意到Sample类的__exit__方法有三个参数- val, type 和 trace。 这些参数在异常处理中相当有用。我们来改一下代码，看看具体如何工作的。&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;#!/usr/bin/env
 python
#
 with_example02.py

class Sample:
    def __enter__(self):
        return self

    def __exit__(self, type, value, trace):
        print &amp;quot;type:&amp;quot;, type
        print &amp;quot;value:&amp;quot;, value
        print &amp;quot;trace:&amp;quot;, trace

    def do_something(self):
        bar = 1/0
        return bar + 10
with
    Sample() as sample:
    sample.do_something()
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个例子中，with后面的get_sample()变成了Sample()。这没有任何关系，只要紧跟with后面的语句所返回的对象有__enter__()和__exit__()方法即可。此例中，Sample()的__enter__()方法返回新创建的Sample对象，并赋值给变量sample。&lt;/p&gt;
&lt;p&gt;代码执行后：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;bash-3.2$
 ./with_example02.py
type:
 &amp;lt;type &amp;#39;exceptions.ZeroDivisionError&amp;#39;&amp;gt;
value:
 integer division or modulo
 by zero
trace:
 &amp;lt;traceback object at 0x1004a8128&amp;gt;
Traceback
 (most recent call last):
  File &amp;quot;./with_example02.py&amp;quot;,
 line 19, in &amp;lt;module&amp;gt;
    sample.do_something()
  File &amp;quot;./with_example02.py&amp;quot;,
 line 15, in do_something
    bar = 1/0
ZeroDivisionError:
 integer division or modulo
 by zero
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;实际上，在with后面的代码块抛出任何异常时，__exit__()方法被执行。正如例子所示，异常抛出时，与之关联的type，value和stack trace传给__exit__()方法，因此抛出的ZeroDivisionError异常被打印出来了。开发库时，清理资源，关闭文件等等操作，都可以放在__exit__方法当中。&lt;/p&gt;
&lt;p&gt;因此，Python的with语句是提供一个有效的机制，让代码更简练，同时在异常产生时，清理工作更简单。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Sat, 08 Feb 2014 20:31:00 +0800</pubDate><guid>tag:,2014-02-08:2014/Python_with_2014_02_08_20_31.html</guid><category>Memory</category><category>Features</category><category>Python</category></item><item><title>指数平滑</title><link>/2013/ES_2013_12_18_21_11.html</link><description>&lt;h2&gt;Exponential Smoothing&lt;/h2&gt;
&lt;p&gt;时间序列：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;趋势性&lt;/li&gt;
&lt;li&gt;周期性（季节性）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$ S_{t} = \alpha y_{t-1}+(1-\alpha)S_{t-1} $$&lt;/p&gt;
&lt;p&gt;$S_{t}$ 为平滑值，$ y_{t-1} $ 为t-1实际值，
&lt;br&gt;
$ \alpha $ 为平滑函数，$ \alpha \in \left [ 0,1 \right ] $，远期对本期平滑值影响程度。$ \alpha $ 越小，本期的影响程度越低，时间波动大时应取较小的$ \alpha $。&lt;/p&gt;
&lt;h3&gt;一次平滑&lt;/h3&gt;
&lt;p&gt;时间数列无明显变化，例如上边的。&lt;/p&gt;
&lt;h3&gt;二次平滑&lt;/h3&gt;
&lt;p&gt;是对一次平滑的再次平滑，适用于线性趋势的时间序列。&lt;/p&gt;
&lt;h4&gt;基本公式&lt;/h4&gt;
&lt;p&gt;$$ S_{t}^1 = \alpha y_{t}+(1-\alpha)S_{t-1}^1 \\ S_{t}^2 = \alpha S_{t}^1+(1-\alpha)S_{t-1}^2 $$&lt;/p&gt;
&lt;p&gt;&lt;span style="color:red"&gt;&lt;strong&gt;注意St上标为期数的前后顺序！！！下同！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;预测模型&lt;/h4&gt;
&lt;p&gt;$$ Y_{t+T}=a_{t}+b_{t}T \\ a_{t}=2S_{t}^1-S_{t}^2 \\ b_{t}=(\frac{\alpha}{1-\alpha})(S_{t}^1-S_{t}^2) $$
&lt;center&gt;T为t期到预测期的隔期数。&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;平滑值并不直接用于预测，只是求出线性预测模型的平滑系数。&lt;br&gt;
基本思想：预测值是以前观测值的加权和，且对不同的数据给与不同的权，新数据权重大，旧的较小。&lt;/p&gt;
&lt;h3&gt;三次平滑&lt;/h3&gt;
&lt;p&gt;当时间序列呈现出非线性趋势变化时，采用！！&lt;/p&gt;
&lt;h4&gt;基本公式&lt;/h4&gt;
&lt;p&gt;$$ S_{t}^1 = \alpha y_{t}+(1-\alpha)S_{t-1}^1 \\ S_{t}^2 = \alpha S_{t}^1+(1-\alpha)S_{t-1}^2 \\ S_{t}^3 = \alpha S_{t}^2+(1-\alpha)S_{t-1}^3 $$&lt;/p&gt;
&lt;h4&gt;预测模型&lt;/h4&gt;
&lt;p&gt;$$ Y_{t+T}=a_{t}+b_{t}T+c_{t}T^2 \\ a_{t}=3S_{t}^1-3S_{t}^2+S_{t}^3 \\ b_{t}=(\frac{\alpha^2}{2(1-\alpha)^2})\left [ (6-5\alpha)S_{t}^1-(10-8\alpha)S_{t}^2+(4-3\alpha)S_{t}^3 \right ]  \\ c_{t}=(\frac{\alpha^2}{(1-\alpha)^2})(S_{t}^1-2S_{t}^2+S_{t}^3) $$&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Wed, 18 Dec 2013 21:11:00 +0800</pubDate><guid>tag:,2013-12-18:2013/ES_2013_12_18_21_11.html</guid><category>ML</category><category>Linear</category><category>DataProcessing</category><category>Math</category></item><item><title>最小二乘法</title><link>/2013/curve_fitting_2013_12_16_17_59.html</link><description>&lt;h2&gt;curve fitting&lt;/h2&gt;
&lt;p&gt;曲线拟合的最小二乘法：&lt;/p&gt;
&lt;p&gt;由已知离散点选择与测试点误差最小的曲线。&lt;/p&gt;
&lt;p&gt;$$ S(x) = a_{0}\varphi_{0}(x)+a_{1}\varphi_{1}(x)+...+a_{n}\varphi_{n}(x) $$ &lt;/p&gt;
&lt;p&gt;若&lt;/p&gt;
&lt;p&gt;$$ (\varphi_{j},\varphi_{k})=\sum_{i=0}^{m}\omega(x_{i})\varphi_{j}(x_{i})\varphi_{k}(x_{i}) $$ &lt;/p&gt;
&lt;p&gt;$$ (f,\varphi_{k})=\sum_{i=0}^{m}\omega(x_{i})f(x_{i})\varphi_{k}(x_{i})\equiv d_{k} $$ &lt;/p&gt;
&lt;p&gt;上式可写为：&lt;/p&gt;
&lt;p&gt;$$ \sum_{j=0}^{m}(\varphi_{k},\varphi_{j})a_{j}=d_{k};(k=0,1,...,n) $$ &lt;/p&gt;
&lt;p&gt;将该法方程改写为矩阵：&lt;/p&gt;
&lt;p&gt;$$ Ga=d $$ &lt;/p&gt;
&lt;p&gt;其中$ a=(a_{0},a_{1},...,a_{n})^{T},d=(d_{0},d_{1},...,d_{n})^{T} $ ，&lt;/p&gt;
&lt;p&gt;$$ \begin{aligned} &amp;amp;G= \end{aligned}\begin{bmatrix}&amp;amp;(\varphi_{0},\varphi_{0})  &amp;amp;(\varphi_{0},\varphi_{1})  &amp;amp;\cdot \cdot \cdot  &amp;amp;(\varphi_{0},\varphi_{n}) \\ &amp;amp;(\varphi_{1},\varphi_{0})  &amp;amp;(\varphi_{1},\varphi_{1})  &amp;amp;\cdot \cdot \cdot  &amp;amp;(\varphi_{1},\varphi_{n}) \\ &amp;amp;(\varphi_{n},\varphi_{0})  &amp;amp;(\varphi_{n},\varphi_{1})  &amp;amp;\cdot \cdot \cdot  &amp;amp;(\varphi_{n},\varphi_{n}) \end{bmatrix} $$&lt;/p&gt;
&lt;p&gt;其平方误差为：&lt;/p&gt;
&lt;p&gt;$$ \left \| \delta  \right \|_{2}^{2} = \sum_{i=0}^{m}\omega(x_{i})[S(x_{i})-f(x_{i})]^2 $$ &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Mon, 16 Dec 2013 17:59:00 +0800</pubDate><guid>tag:,2013-12-16:2013/curve_fitting_2013_12_16_17_59.html</guid><category>ML</category><category>Linear</category><category>DataProcessing</category><category>Math</category></item><item><title>social.framework</title><link>/2013/social_framework_2013_07_11_10_16.html</link><description>&lt;h2&gt;UIActivityViewController&lt;/h2&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;新增的这个控件方便多了，省的去集成一堆乱七八糟的SDK。&lt;br&gt;
&amp;#160; &amp;#160; &amp;#160; &amp;#160;想起之前集成weibo sdk，特么弹出界面一堆bug，还得去覆盖它的类给它重新调界面，简直地狱。&lt;/p&gt;
&lt;p&gt;现在只要一小段，任务就完成了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;-(&lt;/span&gt;&lt;span class="kt"&gt;IBAction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;shareAction:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;sender&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;   
&lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;textToShare&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="err"&gt;”提示提示提示提示提示。”&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="bp"&gt;UIImage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;imageToShare&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;UIImage&lt;/span&gt; &lt;span class="nl"&gt;imageNamed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;img.jpg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="bp"&gt;NSURL&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;urlToShare&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSURL&lt;/span&gt; &lt;span class="nl"&gt;URLWithString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;http://www.xxx.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="bp"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;activityItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="l"&gt;@[&lt;/span&gt;&lt;span class="n"&gt;textToShare&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imageToShare&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;urlToShare&lt;/span&gt;&lt;span class="l"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="bp"&gt;UIActivityViewController&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;activityVC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="bp"&gt;UIActivityViewController&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nl"&gt;initWithActivityItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;activityItems&lt;/span&gt; &lt;span class="nl"&gt;applicationActivities&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;//不出现在活动项目   &lt;/span&gt;
&lt;span class="n"&gt;activityVC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;excludedActivityTypes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="l"&gt;@[&lt;/span&gt;&lt;span class="n"&gt;UIActivityTypePrint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UIActivityTypeCopyToPasteboard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   
&lt;span class="n"&gt;UIActivityTypeAssignToContact&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;UIActivityTypeSaveToCameraRoll&lt;/span&gt;&lt;span class="l"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="nl"&gt;presentViewController&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;activityVC&lt;/span&gt; &lt;span class="nl"&gt;animated&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;TRUE&lt;/span&gt; &lt;span class="nl"&gt;completion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;自定义也挺方便的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;-(&lt;/span&gt;&lt;span class="kt"&gt;IBAction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;shareAction:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;sender&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
&lt;span class="bp"&gt;NSURL&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;urlToShare&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSURL&lt;/span&gt; &lt;span class="nl"&gt;URLWithString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;http://xxxx.cn/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="bp"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;activityItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="l"&gt;@[&lt;/span&gt;&lt;span class="n"&gt;urlToShare&lt;/span&gt;&lt;span class="l"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="n"&gt;BookActivity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;bookActivity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;BookActivity&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="bp"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;applicationActivities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="l"&gt;@[&lt;/span&gt;&lt;span class="n"&gt;bookActivity&lt;/span&gt;&lt;span class="l"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="bp"&gt;UIActivityViewController&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;activityVC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="bp"&gt;UIActivityViewController&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="nl"&gt;initWithActivityItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;activityItems&lt;/span&gt; 
&lt;span class="nl"&gt;applicationActivities&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;applicationActivities&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="nl"&gt;presentViewController&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;activityVC&lt;/span&gt; &lt;span class="nl"&gt;animated&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;YES&lt;/span&gt; &lt;span class="nl"&gt;completion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果程序回应之后需要处理点啥，那就覆盖：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;-&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nt"&gt;activityDidFinish&lt;/span&gt;&lt;span class="o"&gt;:(&lt;/span&gt;&lt;span class="nt"&gt;BOOL&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nt"&gt;completed&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用completed来判断是否完成回应。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Thu, 11 Jul 2013 10:16:00 +0800</pubDate><guid>tag:,2013-07-11:2013/social_framework_2013_07_11_10_16.html</guid><category>framework</category><category>iOS</category></item><item><title>傅立叶级数</title><link>/2013/fourier_series_2013_01_30_00_17.html</link><description>&lt;h2&gt;fourier series&lt;/h2&gt;
&lt;p&gt;周期为T的函数x(t)标识为无穷级数：&lt;/p&gt;
&lt;p&gt;$$ x(t)=\sum_{k=-\infty}^{+\infty}a_k*e^{jk(\frac{2\pi}{T})t} $$
j为虚数&lt;/p&gt;
&lt;p&gt;其中$ a_k $可按下式计算：
$$ a_k=\frac{1}{T}\int_T x(t)*e^{-jk(\frac{2\pi}{T})t} dt $$&lt;/p&gt;
&lt;p&gt;注意到：$ f_k(t)=e^{jk(\frac{2\pi}{T})t} $ 是周期为T的函数，故k取不同值时的周期信号具有谐波关系（既具有同一个周期T）。&lt;br&gt;
k=0时，第一个式子中对应的这一项称为直流分量。&lt;br&gt;
k=1时，具有基波频率$ \omega_0=\frac{2\pi}{T} $ ，称为一次谐波或基波。&lt;br&gt;
类似的有二次谐波，三次谐波&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Wed, 30 Jan 2013 00:17:00 +0800</pubDate><guid>tag:,2013-01-30:2013/fourier_series_2013_01_30_00_17.html</guid><category>DataProcessing</category><category>Math</category></item><item><title>泰勒级数</title><link>/2013/Taylor_series_2013_01_29_22_43.html</link><description>&lt;h2&gt;Taylor Series&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;幂级数的求导和积分可以逐项进行，因此求和函数相对比较容易。&lt;/li&gt;
&lt;li&gt;一个解析函数可被延伸为一个定义在复平面上的一个开区域上的泰勒级数通过解析延拓得到的函数，并使得复分析这种手法可行。&lt;/li&gt;
&lt;li&gt;泰勒级数可以用来近似计算函数的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$ f(x)=f(a)+\frac{f'(a)}{1!}(x-a)+\frac{f''(a)}{2!}(x-a)^2+\cdot\cdot\cdot+\frac{f^n(a)}{n!}(x-a)^n+R_{n}(x) $$&lt;/p&gt;
&lt;p&gt;$$ R_{n}(x)=f^{n+1}(a+\theta(x-a))\frac{(x-a)^{n+1}}{(n+1)!} $$&lt;/p&gt;
&lt;p&gt;当然看这个的目的嘛，它怎么说也算傅立叶变换的前置科技。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Tue, 29 Jan 2013 22:43:00 +0800</pubDate><guid>tag:,2013-01-29:2013/Taylor_series_2013_01_29_22_43.html</guid><category>DataProcessing</category><category>Math</category></item><item><title>appstore审核</title><link>/2012/appstore_review_2012_09_26_18_28.html</link><description>&lt;h2&gt;iPhone5的原因？&lt;/h2&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;最近新上传两个app，一个多星期了没人理，还是wait for review 状态。&lt;br&gt;
&amp;#160; &amp;#160; &amp;#160; &amp;#160;也许是为支持iPhone5，全世界厂商同一时间更新app导致塞车了?&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Wed, 26 Sep 2012 18:28:00 +0800</pubDate><guid>tag:,2012-09-26:2012/appstore_review_2012_09_26_18_28.html</guid><category>appstore</category><category>review</category><category>iOS</category></item><item><title>GPS纠偏</title><link>/2012/GPS_2012_03_06_17_47.html</link><description>&lt;h2&gt;前情&lt;/h2&gt;
&lt;p&gt;某在android做的国家课题进入验收阶段。因内容与交通有关，有一个项目是路测。&lt;/p&gt;
&lt;p&gt;但问题来了，手机在路面上跑的时候，GPS受影响挺大的，虽然很多时候可以接受，但由于项目本身的需求，处理的数据量很大，并且不间断。在大压力计算的情况下，GPS会飘得非常厉害（也许是过热导致天线异常）。&lt;/p&gt;
&lt;p&gt;so，他们来找我做个纠偏算法来骗过评审。&lt;/p&gt;
&lt;p&gt;啊喂，关我屁事啊，android组的工作往我这边扔算啥，连作弊都不会搞毛啊.....&lt;/p&gt;
&lt;h2&gt;实现思路&lt;/h2&gt;
&lt;p&gt;最后卖个人情还是给做吧。&lt;/p&gt;
&lt;p&gt;仔细想想，其实非常简单，路线规划出来是之后是确定的，只要行径路线的卷积后的导数与线路函数（分段）求导，导数差在一定范围内，就认为在线路上。卷积权重与时间、与路程、与gps跳动幅度相关。当然这么做会导致真正的转向延迟展现，这个小问题嘛，太容易口头糊弄过去了。留给他们想口径吧。&lt;/p&gt;
&lt;p&gt;确定是否真在线路上了，然后就是把偏移的点画到线上，这其实是一个高中问题：线段外一点求垂足的问题。&lt;/p&gt;
&lt;p&gt;这里还有个问题：从图商拿回来的线路数据是由一小段一小段的离散数据组成，不光顺序不确定，小线段之间还有重叠，无序，前后颠倒，甚至在数据上还会出现“间断”，虽然视觉上看是一条线，但实际上只是“太粗”看不出来问题。&lt;/p&gt;
&lt;p&gt;于是在做这里还要对线路数据进行预处理：首先起点终点位置是固定的，先拿出这两个小线段，然后对所有线段求导，按照方向归类，接着按照“位置”关系排序，把小线段按排序结果抽出来，中间如果发生大数据跳跃，就去其他方向“类”里从“两端”找衔接线段。形象的来说就是由起点终点“生长”出来的线，最终在中间碰头，连上。最后，再在间断部分插值补全。&lt;/p&gt;
&lt;p&gt;最开始想用高斯让数据变得平滑，写了一半突然发现没多大意义，因为为了后面的效率，我需要把角度变化不大的连续的点用一个直线方程来表示。&lt;/p&gt;
&lt;p&gt;为什么不用曲线和法线来做，还是因为效率，涉及到曲线拟合和指数运算，且用效果上来说其实差别不大。&lt;/p&gt;
&lt;p&gt;生成一系列直线方程组后，提前对方程求导，算好斜率，接下来就等着gps给真实位置了。&lt;/p&gt;
&lt;p&gt;gps作为线外点出现时，利用导数的负导数与gps点联立，得到垂直于路线的方程，再与路线联立，就得到映射点。&lt;/p&gt;
&lt;p&gt;整个过程就完成了。当然这里面还有很多细节，例如转向、小夹角转向、回形针型线路，高架原盘等特殊情况的控制。这里就不一一赘述了。&lt;/p&gt;
&lt;h2&gt;结尾&lt;/h2&gt;
&lt;p&gt;因为手上现成的环境只有xcode，于是为了调试方便就在iOS上做了，当然是用c写，否则后面有麻烦。&lt;/p&gt;
&lt;p&gt;明天还要搭个交叉编译环境出个so给android同事。&lt;/p&gt;
&lt;p&gt;代码就不贴了，怎么说也算商业代码。&lt;/p&gt;
&lt;p&gt;其实很多事情并没有那么复杂，用过去小时候学的知识就能解决，并不是学校教的没用，仅仅只是不知道怎么用罢了。另外一个侧面说明是当时没学透，不会学以致用。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Tue, 06 Mar 2012 17:47:00 +0800</pubDate><guid>tag:,2012-03-06:2012/GPS_2012_03_06_17_47.html</guid><category>C</category><category>Object-C</category><category>algorithm</category><category>iOS</category></item><item><title>SB</title><link>/2011/SB_2011_11_23_20_47.html</link><description>&lt;h3&gt;随笔 -_-&lt;/h3&gt;
&lt;p&gt;作为4.2加入的新玩意，对我还是很有吸引力的，想到不要再维护以前那一堆xml，还真有点小兴奋。&lt;/p&gt;
&lt;p&gt;可是试用一下，嗯很方便，当然这个方便是看着demo的感觉。然后脑补了一下把公司的工程用storyboard来做的话，啊啊啊啊太可怕了，公司的项目那错综复杂的业务逻辑，那关系图都快变蜘蛛网了，对storyboard来说是噩梦。。。&lt;/p&gt;
&lt;p&gt;总结来说，storyboard适合日后拿来做玩具，绝对不会用在工作中。&lt;/p&gt;
&lt;h3&gt;笔记&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;viewdidload&lt;/code&gt;会在&lt;code&gt;modal&lt;/code&gt;切换时被调用。&lt;/li&gt;
&lt;li&gt;切出时&lt;code&gt;unload&lt;/code&gt;和&lt;code&gt;deallow&lt;/code&gt;会被调用。&lt;/li&gt;
&lt;li&gt;当使用&lt;code&gt;dismiss.....Animated&lt;/code&gt;时，&lt;code&gt;deallow&lt;/code&gt;会被调用，入口&lt;code&gt;View&lt;/code&gt;当然的无法被&lt;code&gt;dismiss&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;push&lt;/code&gt;的&lt;code&gt;dismiss&lt;/code&gt;会将整个&lt;code&gt;navigate&lt;/code&gt;的全部去除，如果&lt;code&gt;custom&lt;/code&gt;也是用&lt;code&gt;nav push&lt;/code&gt;方式的话，同样的结果。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pop&lt;/code&gt;会引起&lt;code&gt;deallow&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;custom&lt;/code&gt;方式需要重写&lt;code&gt;-(void)perform&lt;/code&gt;in&lt;code&gt;UIStoryboardSegue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;actionsheet&lt;/code&gt;需要&lt;code&gt;navigation&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Wed, 23 Nov 2011 20:47:00 +0800</pubDate><guid>tag:,2011-11-23:2011/SB_2011_11_23_20_47.html</guid><category>xCode</category><category>iOS</category></item><item><title>iPad软件提交</title><link>/2011/iPad_for_review_2011_11_18_01_31.html</link><description>&lt;h2&gt;这几天忙着提交ipad的app，被拒，修改，再提交。。。&lt;/h2&gt;
&lt;p&gt;根据我的经验总结了一些注意事项，其实这些东东HIG里面都有提到。&lt;/p&gt;
&lt;p&gt;肯定会被拒的情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;app命名：不要用&lt;strong&gt;类似pad的名字&lt;/strong&gt;，但可以用&lt;strong&gt;xxx for iPad&lt;/strong&gt;，&lt;strong&gt;xxx iPad version&lt;/strong&gt;之类的名字；&lt;/li&gt;
&lt;li&gt;popover相关：&lt;/li&gt;
&lt;li&gt;除非处于任务编辑状态，popover应该随时可以通过点他范围之外的地方来dismiss掉，换句话说，不要用modal方式；&lt;/li&gt;
&lt;li&gt;不要太大，宽度不要超过600；&lt;/li&gt;
&lt;li&gt;pickerview啥的一定要放在popover里面，宽度不要拉长&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;alertview也要用popover的方式出来&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;尽量不要使用全屏切换效果（我用了flip导致被拒，不知道curl行不行），好像一定要用全屏的话，可以用modal的方式，这一点我也理解的不是很明白；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不会导致被拒但是建议改进的：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;尽量支持4个方向&lt;/li&gt;
&lt;li&gt;少用alertview和全屏视图切换&lt;/li&gt;
&lt;li&gt;尽量多用ipad相关的UI element，popover,splitview啥的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总的感觉，审核比较注重要体现出他和iphone app的不同之处，以及保证用户体验的流畅性。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">stlau</dc:creator><pubDate>Fri, 18 Nov 2011 01:31:00 +0800</pubDate><guid>tag:,2011-11-18:2011/iPad_for_review_2011_11_18_01_31.html</guid><category>appstore</category><category>iPad</category><category>review</category><category>iOS</category></item><item><title>图形识别的前置算法</title><link>/2011/someAlgorithm_2011_10_07_20_14.html</link><description>&lt;h2&gt;随笔&lt;/h2&gt;
&lt;p&gt;后面估计不会继续下去，小iPhone4的性能还是跟不上，视频里只做到去除光照影响，性能就已经跟不上了。更何况之前弄的背景建模还没移植过来.......&lt;/p&gt;
&lt;p&gt;以后真正要做的话还是上服务端吧。&lt;/p&gt;
&lt;p&gt;本文把写的代码备份下等以后也许有用。&lt;/p&gt;
&lt;h2&gt;零碎代码&lt;/h2&gt;
&lt;p&gt;FFmpeg解码出RGB:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;-(void)convertFrameToRGB {  
    sws_scale (img_convert_ctx, pFrame-&amp;gt;data, pFrame-&amp;gt;linesize,
               0, pCodecCtx-&amp;gt;height,
               picture.data, picture.linesize); 
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最开始使用的二值化，精度实在是.....效果随着时间变化而线性变化，哈哈哈哈，原代码已经去掉了，这边留一份吧:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;-(void)to2L
{
    unsigned char *input = picture.data[0];
    for (int offset = 0; offset&amp;lt;= outputWidth*outputHeight; offset++) {
        unsigned char r = input[offset*3];
        unsigned char g = input[offset*3 +1];
        unsigned char b = input[offset*3 +2];
        unsigned char mi = MIN(r, MIN(g, b));
        unsigned char ma = MAX(r, MAX(g, b));
        if (((unsigned short)mi + (unsigned short)ma) &amp;gt; 170*2) {
            input[offset*3] = input[offset*3+1] = input[offset*3 + 2] = 255;
        }else{
            input[offset*3] = input[offset*3+1] = input[offset*3 + 2] = 0;
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;图像转为灰度图（r=g=b = 0.299r+0.587g+0.114b）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;-(void)toGrey
{
    unsigned char *input = picture.data[0];
    for (int offset = 0; offset&amp;lt;= outputWidth*outputHeight; offset++) {
        int rgbOffset = offset *3;
        unsigned char t = (unsigned char)((19595 * input[rgbOffset] + 38469 * input[rgbOffset +1] + 7471 * input[rgbOffset +2])&amp;gt;&amp;gt;16);

        input[rgbOffset] = input[rgbOffset+1] = input[rgbOffset + 2] = t; 
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;高斯平滑：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;-(void)toSmoothGauss:(unsigned char *)rgba width:(int)width height:(int)height isGrey:(BOOL)isG
{
    unsigned char *input = rgba;
    //unsigned char mask[9] = {1,2,1,2,4,2,1,2,1};
    int columnLength = width*3;
    for (int c=1; c&amp;lt;=height-1; c++) {
        for (int rb=1; rb&amp;lt;=width*3-1; rb++) {
            int rgbOffset = rb + c*columnLength;
            input[rgbOffset] = (input[rgbOffset-columnLength-3] +
                                input[rgbOffset-columnLength]*2 +
                                input[rgbOffset-columnLength+3] +
                                input[rgbOffset-3]*2 +
                                input[rgbOffset]*4 +
                                input[rgbOffset+3]*2 +
                                input[rgbOffset+columnLength-3] +
                                input[rgbOffset+columnLength]*2 +
                                input[rgbOffset+columnLength+3] )/16;
            if (isG) {
                input[rgbOffset - 1] = input[rgbOffset + 1] =  input[rgbOffset];
                rb+=2;
            }

        }
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;平均灰度二值化：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;-(void)to2VWithGrey:(unsigned char *)rgba width:(int)width height:(int)height
{
    unsigned char *input = rgba;
    unsigned int greyAVE = 0;
    for (int offset = 0; offset&amp;lt;= width*height; offset++) {
        int rgbOffset = offset *3;
        unsigned char t = (unsigned char)((19595 * input[rgbOffset] + 38469 * input[rgbOffset +1] + 7471 * input[rgbOffset +1])&amp;gt;&amp;gt;16);
        //input[rgbOffset] = input[rgbOffset+1] = input[rgbOffset + 2] = t;
        greyAVE += t;
    }
    greyAVE = greyAVE/(width*height);
    for (int offset = 0; offset&amp;lt;= width*height; offset++) {
        int rgbOffset = offset *3;
        unsigned char t = (unsigned char)((19595 * input[rgbOffset] + 38469 * input[rgbOffset +1] + 7471 * input[rgbOffset +1])&amp;gt;&amp;gt;16);
        //unsigned char t = (unsigned char)((0.299f * input[rgbOffset] + 0.587f * input[rgbOffset +1] + 0.114f * input[rgbOffset +1]));
        if (t &amp;gt;= greyAVE) {
            input[rgbOffset] = input[rgbOffset+1] = input[rgbOffset + 2] = 255;
        }else{
            input[rgbOffset] = input[rgbOffset+1] = input[rgbOffset + 2] = 0;
        }

    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sobel边界检测的二值化：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;-(void)to2VFromSobel:(unsigned char *)rgba  width:(int)width height:(int)height
{
    unsigned char *wanted = malloc(width*height*3);
    memset(wanted, 0, width*height*3);

    unsigned char *input = rgba;
    int columnLength = width*3;
    for (int c=1; c&amp;lt;=height-1; c++) {
        for (int rb=3; rb&amp;lt;=width*3-3; rb+=3) {
            int rgbOffset = rb + c*columnLength;
            int Dx = input[rgbOffset-columnLength+3] +
                    input[rgbOffset+3]*2 +
                    input[rgbOffset+columnLength+3] -
                    input[rgbOffset-columnLength-3] -
                    input[rgbOffset-3]*2 -
                    input[rgbOffset+columnLength-3];
            int Dy = input[rgbOffset+columnLength-3] +
                input[rgbOffset+columnLength]*2 +
                input[rgbOffset+columnLength+3] -
                input[rgbOffset-columnLength-3] -
                input[rgbOffset-columnLength]*2 -
                input[rgbOffset-columnLength+3];
            int mag =roundf(sqrtf(Dx*Dx+Dy*Dy));
            //int mag = abs(Dx)+abs(Dy);
            wanted[rgbOffset] = mag;
        }
    }
    for (int c=1; c&amp;lt;=height-1; c++) {
        for (int rb=3; rb&amp;lt;=width*3-3; rb+=3) {
            int rgbOffset = rb + c*columnLength;
            unsigned char mag = wanted[rgbOffset];
            if (mag &amp;gt;= sobelAlpha) {
                input[rgbOffset] = input[rgbOffset+1] =input[rgbOffset+2] = 0;
            }else{
                input[rgbOffset] = input[rgbOffset+1] =input[rgbOffset+2] = 255;
            }
        }
    }

    free(wanted);

    //free(rgba);
    //rgba = wanted;

}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;高光判断：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;-(void)totakeHighLight:(unsigned char *)rgba width:(int)width height:(int)height
{
    unsigned char *input = rgba;
    for (int offset = 1; offset&amp;lt;= width*height; offset++) {
        int rgbOffset = offset *3;
        //input[rgbOffset] = input[rgbOffset+1] = input[rgbOffset + 2] = t;
        int r = (int)input[rgbOffset] + ((int)input[rgbOffset] - (int)input[rgbOffset-3])/2;
        if (r&amp;gt;255) {
            input[rgbOffset] = 255;
        }if (r &amp;lt; 0) {
            input[rgbOffset] = 0;
        } else {
            input[rgbOffset] = (unsigned char )r;
        }

        int g = (int)input[rgbOffset+1] + ((int)input[rgbOffset+1] - (int)input[rgbOffset-3+1])/2;
        if (g&amp;gt;255) {
            input[rgbOffset+1] = 255;
        }if (g &amp;lt; 0) {
            input[rgbOffset+1] = 0;
        } else {
            input[rgbOffset+1] = (unsigned char )g;
        }

        int b = (int)input[rgbOffset+2] + ((int)input[rgbOffset+2] - (int)input[rgbOffset-3+2])/2;
        if (b&amp;gt;255) {
            input[rgbOffset+2] = 255;
        }if (b &amp;lt; 0) {
            input[rgbOffset+2] = 0;
        } else {
            input[rgbOffset+2] = (unsigned char )b;
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后记录一个将rgb转回UIImage控件的方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;-(&lt;/span&gt;&lt;span class="bp"&gt;UIImage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;imageFromAVPicture:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AVPicture&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;pict&lt;/span&gt; &lt;span class="nf"&gt;width:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;width&lt;/span&gt; &lt;span class="nf"&gt;height:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;height&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;CGBitmapInfo&lt;/span&gt; &lt;span class="n"&gt;bitmapInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kCGBitmapByteOrderDefault&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;CFDataRef&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CFDataCreateWithBytesNoCopy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kCFAllocatorDefault&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;pict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linesize&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;kCFAllocatorNull&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;CGDataProviderRef&lt;/span&gt; &lt;span class="n"&gt;provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CGDataProviderCreateWithCFData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;CGColorSpaceRef&lt;/span&gt; &lt;span class="n"&gt;colorSpace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CGColorSpaceCreateDeviceRGB&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;CGImageRef&lt;/span&gt; &lt;span class="n"&gt;cgImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CGImageCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                                       &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                                       &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                                       &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                                       &lt;span class="n"&gt;pict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linesize&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 
                                       &lt;span class="n"&gt;colorSpace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                                       &lt;span class="n"&gt;bitmapInfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                                       &lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                                       &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                                       &lt;span class="nb"&gt;NO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                                       &lt;span class="n"&gt;kCGRenderingIntentDefault&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;CGColorSpaceRelease&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colorSpace&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="bp"&gt;UIImage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;UIImage&lt;/span&gt; &lt;span class="nl"&gt;imageWithCGImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;cgImage&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;CGImageRelease&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cgImage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;CGDataProviderRelease&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;CFRelease&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Fri, 07 Oct 2011 20:14:00 +0800</pubDate><guid>tag:,2011-10-07:2011/someAlgorithm_2011_10_07_20_14.html</guid><category>C</category><category>Object-C</category><category>algorithm</category><category>FFmpeg</category><category>UIImage</category><category>iOS</category></item><item><title>摇一摇</title><link>/2011/shake_it_2011_06_23_23_08.html</link><description>&lt;h2&gt;前情&lt;/h2&gt;
&lt;p&gt;今天在做一个摇一摇，简单的if判断太lowB，体验也不好，于是用卷积和高通滤波，让用户多反复来两下，还要用点力，需要有能量的积累才能有反馈，且为Summary提到内容的留坑。&lt;/p&gt;
&lt;h2&gt;代码&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;//高通滤波器，用来生成下个函数highPassFilter中的alpha
//updateFrequency我自己用的是60，cutoff现在是5.0
//还没调到最好，目前只如果初始用用甩的力度的话还是能立马触发，没力弄了。
-(double)highPassAlpha:(double)updateFrequency pCutoffFrequency:(double)cutFreq
{
    double dt = 1.0 / updateFrequency;
    double RC = 1.0 / cutFreq;
    double filterConstant = dt / (dt + RC);

    return filterConstant;
}

//lastX  lastY  lastZ 是最后拿来用的值
-(void)highPassFilter:(UIAcceleration*)accel 
{
    x = alpha * (x + accel.x - lastX);
    y = alpha * (y + accel.y - lastY);
    z = alpha * (z + accel.z - lastZ);
    lastX = accel.x;
    lastY = accel.y;
    lastZ = accel.z;
}
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Thu, 23 Jun 2011 23:08:00 +0800</pubDate><guid>tag:,2011-06-23:2011/shake_it_2011_06_23_23_08.html</guid><category>Object-C</category><category>algorithm</category><category>iOS</category></item><item><title>一个objc对象的bug</title><link>/2011/objc_bug_2011_04_21_22_13.html</link><description>&lt;h2&gt;发现一只小虫子&lt;/h2&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;这两天在视频软解的调试过程中发现，objc的array对象有bug，一个array对象快速的插入、弹出dict对象，会有一定几率导致dict对象的内存泄漏，dict弹出用完后未施放。专门写了个小程序通过长时间实验，确定了，bug！！！！&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;去support页报bug时顺手搜了一下，有个外国友人也发现了这个问题。&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;这个问题应该挺难发现因为在高速、频繁的插入，弹出，删除dict时才会出现。初次发现就是对积累视频包管理业务调试的时候，在大量视频包流动的情况下，持续一个小时，内存占用才达到系统的报警线。所以这个内存泄漏几率低，也很难发现。毕竟手机上的应用都比较轻量级，会这么干的机会不多。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;&lt;strong&gt;最后：大量数据流操作不要用objc对象！！！！&lt;/strong&gt;&lt;em&gt;（我承认这段话是从上一篇里复制过来的）&lt;/em&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Thu, 21 Apr 2011 22:13:00 +0800</pubDate><guid>tag:,2011-04-21:2011/objc_bug_2011_04_21_22_13.html</guid><category>Object-C</category><category>iOS</category></item><item><title>软解视频，播放卡顿</title><link>/2011/videoplay_efficiency_2011_04_21_21_40.html</link><description>&lt;h2&gt;软解视频卡顿的总结&lt;/h2&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;大约两天前完成rtps的握手及rtp包拆解和重组，这两天调试过程就一个字！卡！&lt;br&gt;
&amp;#160; &amp;#160; &amp;#160; &amp;#160;调试过程使用的设备是iPhone3，iOS4.2.1，320*240的标准h264，播放时fps常会降到个位数。整个视频播放过程，画面有严重的卡顿。并且画面上自带的时间变化逐渐渐慢。&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;1，认为是绘图效率，于是把视频绘制层及相关逻辑注释掉，去操作app其他功能。依然有卡顿感。那么已经排除绘图效率问题。&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;2，ffmpeg效率问题？改了些解码参数，打开nano，虽然估计也没啥用，反正不管怎么调都没有起色，于是跳过，毕竟ffmpeg深层的效率问题我估计公司也出不起这成本去深究。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;3，最后我把目光抛向rtp的拆包组包上。&lt;br&gt;
&amp;#160; &amp;#160; &amp;#160; &amp;#160;花了点时间，在各个业务关键点上加入一个全局的耗时统计功能，日志一看，我艹，h264裸数据组包、进栈、出栈，这一套流程占用了cpu的70%运算时间。&lt;br&gt;
&amp;#160; &amp;#160; &amp;#160; &amp;#160;又用了一个下午来进一步检查这部分实现逻辑，并没有问题，查了不下10遍啊喂...我开始怀疑这个世界.....哦不，是这个系统，难道是objc数据对象的效率问题？&lt;br&gt;
&amp;#160; &amp;#160; &amp;#160; &amp;#160;反正业务逻辑已经整理完写过一遍了，重写也用不了多少时间，于是花了半天用c把这部分重新实现一般。果不其然，objc对象的效率有很严重的问题！！！用c重写后，这部分的运算时间占用降低到30%，解码和绘图占用时间比例上升。&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;至此，软解h264卡顿的问题就解决了。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;虽然再刚接触objc的时候就感觉它的这种消息机制会有一定上的执行效率浪费，但这次对数据流开发还是坚持用它，其原因是：&lt;em&gt;刚学会的东西当然要拿出来耍耍啊，是不......&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;&lt;strong&gt;总的来说就是：大量数据流操作不要用objc对象。&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Thu, 21 Apr 2011 21:40:00 +0800</pubDate><guid>tag:,2011-04-21:2011/videoplay_efficiency_2011_04_21_21_40.html</guid><category>ffmpeg</category><category>Object-C</category><category>iOS</category></item><item><title>Xcode4</title><link>/2011/xCode4_2011_03_13_14_59.html</link><description>&lt;p&gt;&lt;del&gt;居然收费了！&lt;/del&gt; &lt;br&gt;
刚开始看到appstore里面的价格吓了一跳，心里嘀咕着苹果这是在想什么，去dev中心翻了翻，原来开发者还是免费的.....&lt;/p&gt;
&lt;h2&gt;正文开始&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Xcode4开始使用LLVM Compiler2.0，不再建议使用GCC4.2。&lt;/li&gt;
&lt;li&gt;Framework Search path 用于指定框架路径。&lt;/li&gt;
&lt;li&gt;Generate Debug Symbols 关闭可以让 BreakPoint不可用。&lt;/li&gt;
&lt;li&gt;Bundle identifier --真机调试的证书。&lt;/li&gt;
&lt;li&gt;证书格式com.abc.def用来发布，com.abc.*可以用于泛用调试，不允许发布。&lt;/li&gt;
&lt;li&gt;Target:skip install 只能选 No。&lt;/li&gt;
&lt;li&gt;如果有link工程，子工程的skip install 选 Yes。&lt;/li&gt;
&lt;li&gt;Ad-hoc iOS4后不需设Eatielements。&lt;/li&gt;
&lt;li&gt;Ad-hoc可使用带星号的identifier。&lt;/li&gt;
&lt;li&gt;scheme&lt;/li&gt;
&lt;li&gt;Archive必是iOS device 和Release。&lt;/li&gt;
&lt;li&gt;Bundle name：程序名。&lt;/li&gt;
&lt;li&gt;desplay name：用户看到的名字。&lt;/li&gt;
&lt;li&gt;identifier：标识，就是那个com.abc.def。&lt;/li&gt;
&lt;li&gt;version：版本号。&lt;/li&gt;
&lt;li&gt;os type code：统一APPL。 &lt;/li&gt;
&lt;li&gt;creator os type code：起四个字母的短名。&lt;/li&gt;
&lt;li&gt;Executable file：可执行文件名。&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Sun, 13 Mar 2011 14:59:00 +0800</pubDate><guid>tag:,2011-03-13:2011/xCode4_2011_03_13_14_59.html</guid><category>xCode</category><category>iOS</category></item><item><title>ffmpeg 移植 iOS</title><link>/2011/ffmpeg_for_iOS_2011_03_11_01_44.html</link><description>&lt;h2&gt;终于搞定，好累....&lt;/h2&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;搞鼓了三个礼拜，终于完美移植到这个手机系统上来。&lt;br&gt;
&amp;#160; &amp;#160; &amp;#160; &amp;#160;遗憾的是整个周期太赶，完全没做记录，导致一个极为严重的问题：特么想不起来动过什么东西了！！！！！！！！！&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;呃....就这么着吧，后面再封装封装，希望他们未来没有动这个库内部东西的需求。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;用了20多天才搞定移植主要原因是：刚上手，对这个系统不太了解。其实前一半的时间就已经完成交叉编译，参数基本都没问题，但是release的app启动时会找不到映射，后面按照linux文件依赖的思路去做，又是写部署脚本，又是lipo的，结果走上弯路，因为只能在越狱机器上这么做。非越狱机器的app可没有什么“环境”的事，一切都在沙盒里，值得庆幸的是醒悟的不算太晚。&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;最后解决方法却意外的简单，特么的用静态库就特么解决了啊，绕毛圈子............app加载不到动态库的原因是：官方禁止使用动态库！！！！！！&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;心好累....关机睡觉。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Fri, 11 Mar 2011 01:44:00 +0800</pubDate><guid>tag:,2011-03-11:2011/ffmpeg_for_iOS_2011_03_11_01_44.html</guid><category>ffmpeg</category><category>移植</category><category>iOS</category></item><item><title>appstore 发布准备</title><link>/2011/appstore_2011_01_20_21_12.html</link><description>&lt;h3&gt;icon&lt;/h3&gt;
&lt;p&gt;图片格式：PNG&lt;br&gt;
iPhone3gs：57*57&lt;br&gt;
iPad：72*72&lt;br&gt;
iPhone4：114*114&lt;br&gt;
appstore界面上的：512*512&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;截图&lt;/h3&gt;
&lt;p&gt;最小竖式：320*460（不含状态栏）&lt;br&gt;
最大竖式：320*480（全屏）&lt;br&gt;
最高分辨率最小竖式640*920（不含状态栏）&lt;br&gt;
最高分辨率最大竖式640*960（全屏）&lt;br&gt;&lt;/p&gt;
&lt;p&gt;最小横式：480*300（不含状态栏）&lt;br&gt;
最大横式：480*320（全屏）&lt;br&gt;
最高分辨率最小横式960*600（不含状态栏）&lt;br&gt;
最高分辨率最大横式960*640（全屏）&lt;br&gt;&lt;/p&gt;
&lt;p&gt;其他要求：72PPi，RGB，平滑，非半透明&lt;/p&gt;
&lt;h3&gt;一些设置项&lt;/h3&gt;
&lt;p&gt;SKU：iTunes Connect系统中的唯一标识，可以随便写，只要别与别人冲突。&lt;br&gt;
keyword：注意不允许以其他app名称，其他公司名称作为关键词。用逗号分隔。&lt;br&gt;
Email：用户是不可见的，可以放心填写自己的，用于官方主动联系。&lt;br&gt;
ReviewNote：审批提醒，用来提醒测试人员注意的一些事项说明，包括提供测试ID；测试ID需要有全权限；如果是UGC需要提供后台管理页面，需保证内容可管理；如果基于视频流，必须提供测试的视频流url。&lt;br&gt;
SDK：如果选择laster SDK的话，将不提供iOS版本的前向支持。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Thu, 20 Jan 2011 21:12:00 +0800</pubDate><guid>tag:,2011-01-20:2011/appstore_2011_01_20_21_12.html</guid><category>appstore</category><category>iOS</category></item><item><title>IDP申请</title><link>/2011/apply_for_IDP_2011_01_18_02_52.html</link><description>&lt;h2&gt;APPLE STORE申请一波三折&lt;/h2&gt;
&lt;p&gt;终于在今天凌晨完成了最后付款流程，其过程真是吐血。将要点列一下 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先，要注册一个APPLE的ID。特别特别要注意的地方，在注册的时候,First Name和Last Name必须要填写个人的名字，千万不要用企业名称或随便填名字。因为这个名字之后是无法改变的。 为了这个，我的申请流程中被封了两次账号，都是在传真了企业资料后才被封的说，而每次被封账号是没有任何说明的，只有在线提交问题询问才告诉原因，并且是大喘气似的第一次不告诉我说必须填写个人的名字，第二次封账号才告知。 使整个申请流程浪费了快1个月。 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;公司传真的信息，如果公司营业执照注册地址和公司办公地址不同，需要附加一份说明，并盖公章。这份说明我是中英文混合的。随便写点，老外能看懂的英文即可。大概的格式偶是这样写的： &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Enrollment ID number : xxxxxxx &lt;br&gt;
Follow-up D:xxxxxx &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于经营地址与注册地不一致的说明 &lt;br&gt;
苹果公司： &lt;br&gt;
我公司工商行政注册登记地址为：中国上海xxxxx路x号x幢xxx-xxx室，公司实际经营地址为：中国上海xxxx路xxxxx号xxxx大厦xxxx，特此说明！ &lt;br&gt;
上海XXXXXX网络科技有限公司 &lt;br&gt;
2010年1月29日 &lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Declaration of the difference between company register address and company address &lt;br&gt;
Apple Inc.： &lt;br&gt;
This is to certify that the company address which is registered in IDP is belong to XXX Ltd. &lt;br&gt;
XXX Ltd. was registered at “Room. x-xx-xx. No.x，xxxxxxx Road，Shanghai,China”. But now the office address is Room xxxx,xxxx xxx,No.xxxx xxx xx xx xxx,Shanghai,China. &lt;br&gt;
XXXXX Ltd. &lt;br&gt;
2010-1-29 &lt;br&gt;
Enrollment ID number : xxxxxxxx &lt;br&gt;
Follow-up ID:xxxxxx &lt;br&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;传真的问题。我选择的是&lt;a href="http://www.faxzero.com"&gt;www.faxzero.com&lt;/a&gt;。哈好用。每天2次免费传真，每份传真最多3页。因为公司资料传真就两份，将传真件整在一份DOC中传真即可。需要注意传真时EMAIL地址必须填写真实的，只有点击收到的EMAIL里的链接传真才会进行。传真完成后也会收到EMAIL。 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果传真是在搞不定，也可以发送扫描件到&lt;a href="mailto:chinadev@asia.apple.com"&gt;chinadev@asia.apple.com&lt;/a&gt;，让香港那里的苹果公司工作人员协助。我在FAX付费单后曾发邮件询问过，那里的MM回邮件说也可以发邮件给那里。 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;整个流程其实如果走顺了还是很快的。APPLE ID账号审核1天内，IDP申请提交1~2天左右，公司资料传真后3天左右回复，收费单传真过去后2到3天左右最后完成。 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;信用卡可选择招行的MASTERCARD，默认是关闭的，可以再网上打开。扣费确认单上资料除了个人签名部分都用英文的。 &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;好了，可以登录了，继续研究接下去的TEAM啊CERTIFICATES之类的。 
辛苦啊。ANDROID的MARKET申请没那么复杂的说，24小时内就全部搞定的说。 &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">zerochocboo</dc:creator><pubDate>Tue, 18 Jan 2011 02:52:00 +0800</pubDate><guid>tag:,2011-01-18:2011/apply_for_IDP_2011_01_18_02_52.html</guid><category>appstore</category><category>iOS</category></item><item><title>.dylib</title><link>/2010/dylib_2010_12_10_23_48.html</link><description>&lt;h2&gt;当然如果要上appstore可不能这么干&lt;/h2&gt;
&lt;p&gt;appstore政策要求，app禁止使用动态加载的模块。&lt;/p&gt;
&lt;h3&gt;注意文件依赖&lt;/h3&gt;
&lt;p&gt;其实不光是不允许使用动态库，还需要注意静态库是否有第三方依赖。&lt;br&gt;
编译后的主程序会在启动时根据静态库中的依赖信息加载其他的动态库，这个用lipo可以查看和修改。&lt;/p&gt;
&lt;p&gt;模拟器上问题不大，把该有的依赖库放到该放的地方，或lipo改路径。&lt;/p&gt;
&lt;p&gt;上真机调试的话，可以在编译脚本内加入几行cp和mkdir之类的将相关文件拷如手机，否者app会在日志里留下一句"image not found"后退出。&lt;/p&gt;
&lt;p&gt;如果需要正式发布，只能用没有依赖（除系统本身framework之外）的静态库了。&lt;/p&gt;
&lt;p&gt;当然只服务越狱设备，可以无视任何限制。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Fri, 10 Dec 2010 23:38:00 +0800</pubDate><guid>tag:,2010-12-10:2010/dylib_2010_12_10_23_48.html</guid><category>Object-C</category><category>iOS</category><category>dylib</category></item><item><title>iOS Folder</title><link>/2010/iOS_Folder_2010_11_02_10_22.html</link><description>&lt;p&gt;因为是沙盒系统，so，不能系统路径，只有app自己的一亩三分田。&lt;/p&gt;
&lt;p&gt;而且不能用常规的相对路径，即使是./也会被认为是读取系统根目录，release的包如果把手伸出沙盒会被系统kill掉。&lt;/p&gt;
&lt;p&gt;当然越狱就随便了。&lt;/p&gt;
&lt;p&gt;使用[[NSBundle mainBubundle] pathforResource:@"xx" ofType@"xx"]来抄作自己的文件。&lt;/p&gt;
&lt;p&gt;Documents文件夹只允许Runtime状态操作、可写、可复制Resourc下的文件夹过去。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Tue, 02 Nov 2010 10:22:00 +0800</pubDate><guid>tag:,2010-11-02:2010/iOS_Folder_2010_11_02_10_22.html</guid><category>Object-C</category><category>iOS</category></item><item><title>release</title><link>/2010/Memory_release_2010_10_29_23_05.html</link><description>&lt;h2&gt;关于释放&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;multable&lt;/code&gt;的&lt;code&gt;addobject&lt;/code&gt;会导致参数对象&lt;code&gt;retain&lt;/code&gt;，施放时注意。&lt;/p&gt;
&lt;p&gt;线程中需要有自己的&lt;code&gt;autoreleasepool&lt;/code&gt;，&lt;code&gt;autorelease&lt;/code&gt;对象才会如你预期的被释放。&lt;/p&gt;
&lt;p&gt;自己写set方法，自己写retain！&lt;/p&gt;
&lt;p&gt;&lt;code&gt;removeobject&lt;/code&gt;会导致objectAtIndex出来的对象失效，注意remove的实际。（这是当然的，那个只是个指针）&lt;/p&gt;
&lt;p&gt;注意Runloop的释放问题。&lt;/p&gt;
&lt;p&gt;该死的cocoa，&lt;code&gt;release&lt;/code&gt;到真正释放效率有很大的问题。目前有两个分别是25ms、50ms的loop它就释放不过来了。&lt;/p&gt;
&lt;p&gt;自建pool是一个解决loop内存释放效率不够的好办法，当收到内存警告时，把loop和pool一起释放掉，整个大内存块会被一次性释放掉，再重建一个loop。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NSInvocationOperation&lt;/code&gt;之类的东西会使它所在的对象&lt;code&gt;retainCount&lt;/code&gt;+1。&lt;/p&gt;
&lt;p&gt;最后，不要相信NS对象的线程安全！！！！！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kai_kai03</dc:creator><pubDate>Fri, 29 Oct 2010 23:05:00 +0800</pubDate><guid>tag:,2010-10-29:2010/Memory_release_2010_10_29_23_05.html</guid><category>Object-C</category><category>Memory</category><category>iOS</category></item></channel></rss>