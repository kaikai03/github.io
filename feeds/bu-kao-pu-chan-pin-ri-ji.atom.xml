<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>kairnsの记事簿</title><link href="/" rel="alternate"></link><link href="/feeds/bu-kao-pu-chan-pin-ri-ji.atom.xml" rel="self"></link><id>/</id><updated>2017-10-16T20:39:00+08:00</updated><entry><title>不靠谱产品日记（20）</title><link href="/2017/produce_diary_2017_10_16_20_39.html" rel="alternate"></link><updated>2017-10-16T20:39:00+08:00</updated><author><name>kai_kai03</name></author><id>tag:,2017-10-16:2017/produce_diary_2017_10_16_20_39.html</id><summary type="html">&lt;h1&gt;2017-10-16&lt;/h1&gt;
&lt;p&gt;今天产品例会上，对市场提出了接下来的工作要求：对产品下定义，以及做产品包装。&lt;/p&gt;
&lt;h2&gt;？？？？&lt;/h2&gt;
&lt;p&gt;ちょっと待ってで、稍微等一下......这？？？？？&lt;/p&gt;
&lt;p&gt;如果说在第一版上线前，在市场进场前，我们一帮研发在没有需求没有指导的条件下乱搞就算了。&lt;/p&gt;
&lt;p&gt;熬到一个版本，哦不，都已经2.0上线了，居然还没明确“产品”？本以为只是领导和市场撇开我们研发开小灶，把摸过的石头、过完的河落在纸面，抛向市场。万万没想到，这大半年的市场工作是在连“这是个什么产品”都不明确的情况开展的？&lt;/p&gt;
&lt;p&gt;这...怎....能.....好....&lt;/p&gt;
&lt;p&gt;话说回来，很多事情也就变得不奇怪了。大概半年前吐槽过的“产品边界”问题，在那之后的日子里还在不断的持续发生着。所有功能都经历着：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;未知-&amp;gt;摸索-&amp;gt;成型-&amp;gt;上线
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这时候数据模型与功能看起来起码还是可泛化的，称得上“产品”的（也许吧）。&lt;/p&gt;
&lt;p&gt;然后&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;上线-&amp;gt;市场需求建议-&amp;gt;定制化功能
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就都变成需要在特定场景下才能运行得起来的东西。&lt;/p&gt;
&lt;p&gt;现在回头去看，目前的产品基本上已经失去“复制”属性，脱离当前试点医院根本无法运行。&lt;/p&gt;
&lt;h2&gt;我猜&lt;/h2&gt;
&lt;p&gt;“什么样的需求才是产品需求”“整理提炼出真正的需求”类似的话一直在被提出，但从未被“执行”。所以这已经不是“知”层面上的问题了，而是“知而不行”。&lt;/p&gt;
&lt;p&gt;为什么会“知而不行”呢？故意的？当然我们团队的人没这么“坏”。&lt;/p&gt;
&lt;p&gt;现在我能想到的，也许，这是“历史”在作怪。&lt;/p&gt;
&lt;p&gt;这个团队，或者说现在这家企业，过去是做项目建设的，某种程度来讲，也算得上是“外包”公司。其从来没有对一个“产品”从宏观上整体设计与把控的经验，做的都是有基本明确框架的事情。二来常年习惯于被甲方牵着狗绳走，现在惯性地把客户当成甲方了。&lt;/p&gt;
&lt;p&gt;既没有自己明确目标及路线，或者说是对自己的目标和路线缺乏信心，又极易被外部环境景象。这也许就是这个团队转型的真正痛点所在吧？&lt;/p&gt;
&lt;h2&gt;向前看&lt;/h2&gt;
&lt;p&gt;再回头去弥补“最初的工作”，并不晚。现在各方面都在照常运转，虽然进展缓慢，但还处于“正向”发展的势头。&lt;/p&gt;
&lt;p&gt;未来，会多留心观察一个令我好奇的事：一个团队的历史究竟会对这个团队的转型产生多大阻力？团队转型后会消除早期形成的“特色”，还是会保持？&lt;/p&gt;
&lt;p&gt;说不定到时能够搞个课题发表一下呢！（并不！）&lt;/p&gt;</summary><category term="产品"></category></entry><entry><title>不靠谱产品日记（19）</title><link href="/2017/produce_diary_2017_09_14_23_08.html" rel="alternate"></link><updated>2017-09-14T23:08:00+08:00</updated><author><name>kai_kai03</name></author><id>tag:,2017-09-14:2017/produce_diary_2017_09_14_23_08.html</id><summary type="html">&lt;h1&gt;2017-09-14&lt;/h1&gt;
&lt;h2&gt;进步&lt;/h2&gt;
&lt;p&gt;一年前，面对一个全新的领域，第一次提出来需要“学习”充电，但当时充斥着一股书非借不能读的的学习心态，也没后续。&lt;/p&gt;
&lt;p&gt;时隔一年，再次提及学习问题，这会终于不再是要求“别人教”，而是强调自学。这个心态上的转变，也算重大的进步了。不过领导有进步不代表能够将这份意识传递下去成为团队思维，还需要一段时间观察。&lt;/p&gt;
&lt;h2&gt;书痴者文必工，艺痴者技必良。&lt;/h2&gt;
&lt;p&gt;这里不说兴趣爱好。&lt;/p&gt;
&lt;p&gt;不抹去乌云，何来新大路；麦克斯韦妖不会出现在没有准备的人面前现形；不把纠缠的空间拆解开来怎么救出薛定谔关在箱子里的猫；没有多到溢出的行业知识加身，在行业中永远是雾里看花。&lt;/p&gt;
&lt;p&gt;大道理大家都懂，是知而行之，还是知而不知，就看个人了。&lt;/p&gt;</summary><category term="产品"></category></entry><entry><title>不靠谱产品日记（18）</title><link href="/2017/produce_diary_2017_07_18_23_17.html" rel="alternate"></link><updated>2017-07-18T23:17:00+08:00</updated><author><name>kai_kai03</name></author><id>tag:,2017-07-18:2017/produce_diary_2017_07_18_23_17.html</id><summary type="html">&lt;h1&gt;2017-07-18&lt;/h1&gt;
&lt;h2&gt;最高安全性&lt;/h2&gt;
&lt;p&gt;医院内部信息系统存在大量各种敏感的医疗数据，如患者的个人信息、诊断信息等。除此之外，还有许多医院的机密或核心业务数据内容，如诊断方法、用药方式等，因此保证医院信息系统数据的安全是极其重要的。&lt;/p&gt;
&lt;p&gt;多年来，医院“移不动”的很大原因之一就在数据安全方面的问题。&lt;/p&gt;
&lt;p&gt;作为少有的明确需求之一，大领导从一开始就一直在强调系统安全问题。&lt;/p&gt;
&lt;h2&gt;运维系统&lt;/h2&gt;
&lt;p&gt;前几个月，由于我们的产品的目标是以科室为单位，这意味着即便是只有一家医院，都有会有N套在运行，所以用医院系统的常规方法来维护系统的话，可预见的运维压力将来会无比的大。&lt;/p&gt;
&lt;p&gt;于是需要在院外设置一套管理系统，统一管理院内系统的版本以及行为监控。&lt;/p&gt;
&lt;p&gt;但是考虑到医院的安全性要求，这套管理机制必然与传统的分布管理方式不同。&lt;/p&gt;
&lt;h4&gt;传统的&lt;/h4&gt;
&lt;p&gt;传统的系统管理都会有一个中央控制机去控制各个节点，放到医院的场景，意味着每家医院都需要开放一个向院外公开的端口，端口的背后是可操作（某种形式）院内的权限。这种端口的存在本来就是最大的风险。&lt;/p&gt;
&lt;p&gt;另外中央系统位置特征将会很明显，一个硕大的靶子，一旦被攻破那所有的子系统都成肉鸡了。&lt;/p&gt;
&lt;h4&gt;“只要解决掉有问题的人就没有问题了”&lt;/h4&gt;
&lt;p&gt;针对上述问题，其实解决起来也不算难。&lt;/p&gt;
&lt;p&gt;解决的基本思路无非是绕圈子，只要“没有”中央控制系统，这些问题不就不复存在了嘛？&lt;/p&gt;
&lt;p&gt;所有主动权交给院内，中央系统只负责发布“任务”，然后院内系统自取任务，自行定义升级包特征，自行获取升级包，并自行检验与升级。所有行为均为异步进行，流程之间没有绝对的直接关联。&lt;/p&gt;
&lt;p&gt;这样一来，医院不需要开放外向内的端口，中央系统也没有直接控制权力。完美解决问题，牺牲的也只是一点等待时间和“即时性”带来极大的安全性。这种“异步”对于黑客来说，“解析”这种非同步的东西，可以说是非常头疼了。&lt;/p&gt;
&lt;h3&gt;更好的办法？&lt;/h3&gt;
&lt;p&gt;这套升级系统以及模块开发过程坎坷。先是由一个即将离职的人接手开发，过了一个月后交给一位newbee，虽然这套东西不算复杂，但对一个新人来说足够头疼了。再加上项目经理主要经历在主要业务的开发设计上，没时间去实时跟进。以致于整个开发过程跌跌撞撞，磨了两个月终于到接近尾声即将进入测试阶段时，大领导听了运维提出“更好”的开发思路，建议采用替换原设计。&lt;/p&gt;
&lt;p&gt;我与运维一聊，得，不久是在医院开放个远程端口，手动上传文件，然后用脚本执行文件么（当然没这么直白，还是包着一层web的皮，不过对于hacker来说没啥区别吧？）。&lt;/p&gt;
&lt;p&gt;这种安全问题极大的隐患，屡次强调安全的领导既然认为可行。所以“保证安全性”到底指的是什么？反复强调的系统安全到底是哪个层度的事？我突然蒙了......&lt;/p&gt;
&lt;h2&gt;最后&lt;/h2&gt;
&lt;p&gt;既然领导认可，我当然也举双手认同，毕竟有这么一个端口在，未来做什么调试都非常方便了。&lt;/p&gt;
&lt;p&gt;另外，以后的设计某种程度上又轻松一些，可以少考虑很多安全保障方面的东西，毕竟实际并不需要那么高的安全性的嘛。&lt;/p&gt;
&lt;p&gt;以前完全是被吓唬到了（笑）。&lt;/p&gt;</summary><category term="产品"></category></entry><entry><title>不靠谱产品日记（16）</title><link href="/2017/produce_diary_2017_07_01_17_49.html" rel="alternate"></link><updated>2017-07-03T21:49:00+08:00</updated><author><name>kai_kai03</name></author><id>tag:,2017-07-01:2017/produce_diary_2017_07_01_17_49.html</id><summary type="html">&lt;h1&gt;2017-06-30&lt;/h1&gt;
&lt;h2&gt;迈出第二步&lt;/h2&gt;
&lt;p&gt;自第一个正式版本出厂至今，已过去半年，这半年里有推倒重造，也有新功能的加入。在数据抓取功能上线后，这周领导宣布由研发主导阶段进入市场为主的销售阶段。&lt;/p&gt;
&lt;p&gt;本是めでたしめでたし的事，毕竟草台班子嘛，总会搞出点事。&lt;/p&gt;
&lt;h2&gt;数据脏了！！&lt;/h2&gt;
&lt;p&gt;新的里程碑上线才过两天，一个来自新需求下来，将原始数据彻底搞乱。&lt;/p&gt;
&lt;h3&gt;背景条件&lt;/h3&gt;
&lt;p&gt;说正事前有必要先介绍一下事发背景。&lt;/p&gt;
&lt;h5&gt;数据&lt;/h5&gt;
&lt;p&gt;目前已知的数据源，都无法提供一个患者完整就诊记录判别方法。当然跟现实结合起来看，这事也是非常难办的，例如一个患者今天来就诊，那么他会有一个报告会在当天出、本周出、下周出······；例如医生会随访更进并补充病例；再例如护士手工录入非本院产生检查结论等。&lt;/p&gt;
&lt;p&gt;通过固定周期抓取，抓回来后再本系统内去重，以实现“增量”更新也是一种方法。这个方法有效单不可行，一来随着系统数据的积累，查询、对比压力还会快速上升；二来目前发现存在部分数据项不存在唯一ID、时间属性、内容完全相同还是合理的，也就是说无法事后判重的。&lt;/p&gt;
&lt;h5&gt;科研工作&lt;/h5&gt;
&lt;p&gt;科研工作非临床工作，只要保证使用的数据干净并且每“系列”数据完整即可，并没有数据实时性需求。&lt;/p&gt;
&lt;h4&gt;系统设计&lt;/h4&gt;
&lt;p&gt;基于上面两点，采集系统为解决数据的问题，设计了这么个策略：每天更新来源患者，仅仅保存患者流水（既挂号）基本信息，不拉取任何医疗数据。&lt;/p&gt;
&lt;p&gt;对于门诊患者，（14）日后获取一次医疗数据；住院患者出院后（35）日后再获取医疗数据；无论门诊还是住院，仅获取一次。&lt;/p&gt;
&lt;p&gt;这里拉取滞后时间是作为配置项由外部文件读入，随时可变更。但至于为什么选的是14和35，是多方调研后得到的最优结果。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;绝大多数门诊都会在一周左右得到所有报告，也不会存在长期多次检验，因为由于医院流程，长期的多次检验都会成为各自新的流水进行跟踪。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;出院前数据一直在产生，最后一条院内数据大概就是出院小结了。但是在“某些时候”或“某些情况”时，出院后大约2～4周，医生会对患者进行出院随访。在某些机构中该随访记录会记入患者上次住院记录中成为住院数据。所以设置在出院后35天再拉取患者数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;还有什么排队机制，序列回滚机制什么的细节就不细说了。&lt;/p&gt;
&lt;p&gt;滞后拉取保证了数据的完整性，又保证了效率、不会性能爆炸。&lt;/p&gt;
&lt;h3&gt;正题&lt;/h3&gt;
&lt;p&gt;介绍完背景提要回到正题。&lt;/p&gt;
&lt;p&gt;市场带回来一个新的需求就是，要尽可能快拉取数据，因为医院数据池本来就会晚个一两天才收集到现网数据，采集系统最慢4天内必须把数据拉取到并展示出来，供医生查阅、打印输出住院小结诊断总结等。感觉某种程度上想取代医生工作站的作用。&lt;/p&gt;
&lt;p&gt;这么一来，必然会出现数据不完整的情况。但在强烈要求下，还是这么做了。&lt;/p&gt;
&lt;h3&gt;why&lt;/h3&gt;
&lt;p&gt;“玩弄”数据的都知道数据缺失是一个令人头痛的问题，特别是在未知缺失项的情况下的缺失会导致数据分布偏离预想，要么放弃预想结果，要么想办法把数据通过射影变换或仿射变换拉回“正轨”（找出缺失影响小的角度进行“观测”）。但这不是件容易的事，更何况是“医生”来做更是天方夜谭。&lt;/p&gt;
&lt;p&gt;对负责市场的人来说，科研是“未来”的工作，并不是眼前的问题，所以这些都不重要，重点是如何能“服务”好医生。&lt;/p&gt;
&lt;p&gt;这就引出另外个问题：&lt;/p&gt;
&lt;h4&gt;产品的功能边界在何处？&lt;/h4&gt;
&lt;p&gt;一个产品中的每个业务线、每个功能都有它的边界和限制，不应该是无限扩展的。强行拓展使用场景，不断的增加功能，不断深入，不仅仅是把产品变得“大而全”，而且让产品失去“适应”人群。&lt;/p&gt;
&lt;p&gt;说一个产品的功能，无非讲的是它满足谁的需求，换一句说，便是提供的是一种服务，去服务用户。那么：&lt;/p&gt;
&lt;h4&gt;产品的服务边界在何处？&lt;/h4&gt;
&lt;p&gt;是否所有的需求都要满足？什么样的需求是需要我们全力以赴，什么样的需求是伪需求，不应该纳入产品？&lt;/p&gt;
&lt;p&gt;需要去服务什么样的人群，服务到什么程度。往往越精细的服务能够覆盖的人群就越少，“量”和“度”的模型参数需要精心设计。而这个“量”与“度”便决定了服务的边界，同时它也是由产品的属性决定的。那么：&lt;/p&gt;
&lt;h4&gt;产品的定义是什么？&lt;/h4&gt;
&lt;p&gt;产品的属性由产品的定义决定。&lt;/p&gt;
&lt;p&gt;这就又回到最根本的问题。这种东西在现阶段应该是不该公开说的，但......就算要说也说不出来，现在是这个产品的定义并没有非常明确，虽然有个是似而非的，但是所有人好像都没有以它为指导思想展开工作，所以就根本不存在严格的产品定义。&lt;/p&gt;
&lt;p&gt;进一步说，没有产品定义，就必然无法包装产品。没有“包装”，没有“指导”，面对市场必然只能发挥“主观能动性”，能动啥是啥。毕竟大家都在各自方向上“摸着石头”前行。&lt;/p&gt;
&lt;h2&gt;突然结束&lt;/h2&gt;
&lt;p&gt;今天不想再深入去想该如何解决上述问题（累），毕竟这些东西都不是现在这个阶段才考虑的事情，应该是在产品组成立前就确定的东西不是么。&lt;/p&gt;
&lt;p&gt;没有统一的goal，让产品像是一辆马车，马在车的四周随心的奔跑，又累又原地打转。&lt;/p&gt;
&lt;h5&gt;突然有个想法&lt;/h5&gt;
&lt;p&gt;&lt;em&gt;本来已经结束，突然冒出来个阴暗的想法：让人人都当“产品经理”的目的，其实就是这个产品本身并不“存在”，而是拉一群人乱搞，看碰运气能不能留下什么有用，又能打开新市场的东西？？？？&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;（真@完）&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;2017-07-03&lt;/h1&gt;
&lt;p&gt;经过一番争论后，数据拉取时间改为在门诊与出院后7日拉取数据。&lt;/p&gt;
&lt;p&gt;嘛～～反正区别的大，不就漏得少点而已嘛。&lt;/p&gt;
&lt;p&gt;（这回是真@真@完）&lt;/p&gt;</summary><category term="产品"></category></entry><entry><title>不靠谱产品日记（15）</title><link href="/2017/produce_diary_2017_05_20_23_01.html" rel="alternate"></link><updated>2017-05-20T23:01:00+08:00</updated><author><name>kai_kai03</name></author><id>tag:,2017-05-20:2017/produce_diary_2017_05_20_23_01.html</id><summary type="html">&lt;h1&gt;2017-05-20&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;“为什么带帽子” 啪～；
“为什么不带帽子” 啪～；
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;今天又出现了横竖都是错的情况。&lt;/p&gt;
&lt;h2&gt;三周时间线&lt;/h2&gt;
&lt;p&gt;上上周，某核心的附带功能——是否要把某些东西显示给医生看，又是没有需求，项目设计“顺便”把产品一并设计的情况。&lt;/p&gt;
&lt;p&gt;一周时间过后，例会上：“为什把这些东西费功夫做这个，展示出来没有意义，医生要想看在工作站上都是。”，嗯，被否决了，也没什么问题，一个坐在办公室里闭门造车的拍脑袋设计嘛。于是，这个展示功能理所应当、理由完全地被去掉了。&lt;/p&gt;
&lt;p&gt;本周例会：“为什么不展示出来？医生都看不到东西、看不到我们工作的进展，那么花那么大劲做了有什么意义。”&lt;/p&gt;
&lt;h2&gt;快速结尾&lt;/h2&gt;
&lt;p&gt;得，虽然这不是第一次了，但这么直白的还是首次。&lt;/p&gt;
&lt;p&gt;反正我们这种没有产品经理的就这样的啦，反正都能“摸着石头过河”来自我安慰。但是人的积极性基本也就这样一点点被抹掉的，难怪在与不在最老一批人中，一部分总是满满的消极情绪。&lt;/p&gt;
&lt;p&gt;没记错的话之前有写过同样的内容，就不吐槽更多了，今天简短的写一点纯当记事。じゃあ〜&lt;/p&gt;</summary><category term="产品"></category></entry><entry><title>不靠谱产品日记（14）</title><link href="/2017/produce_diary_2017_04_04_20_17.html" rel="alternate"></link><updated>2017-04-04T20:17:00+08:00</updated><author><name>kai_kai03</name></author><id>tag:,2017-04-04:2017/produce_diary_2017_04_04_20_17.html</id><summary type="html">&lt;h1&gt;2017-04-04&lt;/h1&gt;
&lt;h2&gt;呵呵&lt;/h2&gt;
&lt;p&gt;经过了多次毫无意义又拦不住的“数据怎么合并”问题讨论，依然没得到任何结论。终于随着一个通用的数据中间系统的设计完成，意味着数据的“目的”将脱离数据层本身，上升至业务层，非对称数据存储问题不再是问题。明明之前都甚至出现想要改变数据关系和内容来解决数据不对称问题了，现在却恬不知耻的“我们一向坚持数据原始性原则”。&lt;/p&gt;
&lt;p&gt;吐槽点到即止，设计结束、研发已经开始干活，我的工作算是又到一个角色转换的节点。趁今天有点时间，针对设计做总结下。&lt;/p&gt;
&lt;h2&gt;前提&lt;/h2&gt;
&lt;p&gt;即便是同行，不同企业的数据存放与提供方式都不同。在医疗行业，虽然国家有统一标准，但是没见过有人遵从的。当然标准陈旧不适合时代也是一方面问题。&lt;/p&gt;
&lt;p&gt;对于资源整合角色的系统，面临的一大难题便是需要不断地、重复的开发定制化版本，以适应不同的生产系统、数据源、版本带来的数据和接口差异。大量定制系统的后续维护，不光带来大量的成本支出，还指数级地增加管理的难度。&lt;/p&gt;
&lt;h2&gt;Liasion&lt;/h2&gt;
&lt;p&gt;我们把这个中间系统叫接口机。&lt;/p&gt;
&lt;p&gt;它设计的初衷就是为了解决上面提到的问题，做一个万能数据中转站，为业务系统提供统一的接口和数据。&lt;/p&gt;
&lt;p&gt;系统分为三层及一个控制器：&lt;/p&gt;
&lt;h3&gt;通信层&lt;/h3&gt;
&lt;p&gt;将通信方式模块化，集成常见的通信方式。控制器将根据所要对接的资源系统，选择对应的通讯方式，并根据配置初始化通讯协议并注入通信层。&lt;/p&gt;
&lt;h3&gt;逻辑层&lt;/h3&gt;
&lt;p&gt;提供什么样的业务接口；要去访问什么资源接口，怎么访问，需要几次+几种访问组合才能够满足一个业务接口的需要，资源访问顺序等。&lt;/p&gt;
&lt;p&gt;以上这些工作由逻辑层完成，但是逻辑层内并不含任何“现实逻辑”，而是由控制器注入来得到。&lt;/p&gt;
&lt;h3&gt;转换层&lt;/h3&gt;
&lt;p&gt;获取到资源系统的数据后需要将其映射成业务系统的数据，简单的说就是需要一张数据字典，来“认识”资源数据，然后与业务数据一一对应，并丢弃掉多余数据。这个“数据字典”同样也是由控制器提供。&lt;/p&gt;
&lt;h3&gt;控制器&lt;/h3&gt;
&lt;p&gt;读取配置文件，分配资源，初始化系统，登陆资源系统，建立整体工作流程等，以及其他系统升级啥的细碎工作。&lt;/p&gt;
&lt;h2&gt;工作原理&lt;/h2&gt;
&lt;p&gt;从上面可以看出来，三个工作层，其本身并不含任何与实际业务有关的业务逻辑，仅仅是一个“框”，真正的业务逻辑都是由外部提供的。&lt;/p&gt;
&lt;p&gt;三个工作层对应着三个配置文件，分别称为&lt;code&gt;接口定义字典&lt;/code&gt;、&lt;code&gt;流程定义字典&lt;/code&gt;、&lt;code&gt;数据字典&lt;/code&gt;（当然还有另一个系统资源配置文件用来记录ip端口啥的）。&lt;/p&gt;
&lt;p&gt;接口机真正核心的地方就是将这三个字典转换为业务逻辑和程序逻辑，让每一个接口机的看起来都像是专门开发的，但实际上却没开发人员什么事！！&lt;/p&gt;
&lt;h2&gt;优势&lt;/h2&gt;
&lt;p&gt;通过把“现实业务”从系统中剥离出去，实现“统一”。这个“统一”带来的好处就是一旦开发完成并稳定后，去对接任何资源系统，都无需研发干涉，只要运维人员在图形工具上对着资源系统的文档将三个字典配置完成即可。&lt;/p&gt;
&lt;p&gt;另一个优势就是，接口机这种工作思路促成了业务系统在设计初最大化数据存储，不用再纠结数据怎么组织与合并，只需要将所有数据最大化的存下来即可，也就保证了数据原则问题。&lt;/p&gt;
&lt;h2&gt;最后&lt;/h2&gt;
&lt;p&gt;接口机的这种工作模式用“函数式”来开发再适合不过了，而且还简单。&lt;/p&gt;
&lt;p&gt;哎，由于现有研发人员的水平不足，很多机制和原理上的东西解释了一天了，都还听得云里雾里的，也没给点反馈，看来接下来只能想办法找替代方案简化开发了（苦笑。&lt;/p&gt;</summary><category term="产品"></category></entry><entry><title>不靠谱产品日记（13）</title><link href="/2017/produce_diary_2017_03_31_17_00.html" rel="alternate"></link><updated>2017-03-31T17:00:00+08:00</updated><author><name>kai_kai03</name></author><id>tag:,2017-03-31:2017/produce_diary_2017_03_31_17_00.html</id><summary type="html">&lt;h1&gt;2017-03-31&lt;/h1&gt;
&lt;p&gt;之前不是被削测试时间了嘛。然后还逼着运维去医院部署了。结果就是光部署都花了很长时间，不管现场还是远程配合的技术人员，都手忙脚乱的，不断的涌现出新问题。最长一次花了大约3天才部署完成。即便部署完成后的日常运行中依旧高密度涌现各种bug。&lt;/p&gt;
&lt;p&gt;期间经历3次大版本升级，每次升级都重复着上边的悲剧。&lt;/p&gt;
&lt;p&gt;经过两个月多月的折磨，领导们终于决定放开测试时间，不再将测试纳入研发周期，完全独立由质管部门控制，并在测试周期中加入集成测试、发布测试及市场验收环节。&lt;/p&gt;
&lt;p&gt;嘛，这回算是第一次，真正地把质量控制从嘴里说说，到实际落实了。管理流程的一大进步啊。希望能坚持下去。&lt;/p&gt;
&lt;p&gt;不过有点心虚的就是现在还是研发工作在占主要地位，未来转到市场主导的时候，悲剧是否会继续上演？&lt;/p&gt;
&lt;p&gt;只能说：可能性ある。&lt;/p&gt;
&lt;p&gt;－完－&lt;/p&gt;</summary><category term="产品"></category></entry><entry><title>不靠谱产品日记（12）</title><link href="/2017/produce_diary_2017_03_16_22_08.html" rel="alternate"></link><updated>2017-03-16T22:15:00+08:00</updated><author><name>kai_kai03</name></author><id>tag:,2017-03-16:2017/produce_diary_2017_03_16_22_08.html</id><summary type="html">&lt;h1&gt;2017-03-16&lt;/h1&gt;
&lt;h2&gt;发现问题&lt;/h2&gt;
&lt;p&gt;医院的各种并行系统，新老数据，还有我们产品使用方式等几个方面，综合起来，会有一定概率出现一个问题：出现多套不同的数据难以判断是否真正属于同一个患者。&lt;/p&gt;
&lt;h2&gt;办法陈列&lt;/h2&gt;
&lt;p&gt;解决这种问题的方法无非这几种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;强制人为干预，检查是否数据的关系项是否存在人为错误。如果通过其他证据可判断数据属于同一归属，那么执行数据合并；如果发现数据属于其他，且关系可修正，执行补正需要的操作，并将数据放入其该存在的地方。&lt;/li&gt;
&lt;li&gt;或找个角落放着等着执行（1）。&lt;/li&gt;
&lt;li&gt;以无归属属性存放，数据仅用于研究个例无关的宏观分析。&lt;/li&gt;
&lt;li&gt;系统自动抛弃。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;讨论决策&lt;/h2&gt;
&lt;p&gt;基于“方便用户”：人为干预不友好；&lt;/p&gt;
&lt;p&gt;基于“数据完整性（？）”：数据是宝贵的，不能丢。&lt;/p&gt;
&lt;p&gt;基于“方便我们”：开发太复杂，并且这是“小概率事件”，没关系，等出问题再说；“科研只研究大样本”，一点错误没啥关系啦；（？？？我都不知道这产品什么时候确定了只做群体性研究这么个定位了）&lt;/p&gt;
&lt;p&gt;产品组的最终讨论结果：不用考虑太多，只要数据间稍微有点联系，就当做确定的关系，进行合并。&lt;/p&gt;
&lt;h2&gt;最后&lt;/h2&gt;
&lt;p&gt;已经不知道数据完整性的定义到底是啥了。这种通过概率制造人为脏数据来维持的“完整性”。。。。&lt;/p&gt;
&lt;p&gt;哎，可选方法有不少，偏偏做出了最烂的决定。在数据在使用前，任何倒手过程中都不应该改变其内容。危害有哪些之前提到过，这回就不再啰嗦了。没被数据坑过的人真的难以想象“数据有毒”个什么概念。不仅有毒，特么的是剧毒。&lt;/p&gt;</summary><category term="产品"></category></entry><entry><title>不靠谱产品日记（11）</title><link href="/2017/produce_diary_2017_02_20_20_52.html" rel="alternate"></link><updated>2017-02-25T14:03:00+08:00</updated><author><name>kai_kai03</name></author><id>tag:,2017-02-20:2017/produce_diary_2017_02_20_20_52.html</id><summary type="html">&lt;h1&gt;2017-02-20&lt;/h1&gt;
&lt;h2&gt;盖呀盖呀盖房子&lt;/h2&gt;
&lt;h3&gt;曲线救国？&lt;/h3&gt;
&lt;p&gt;两周前，市场从医院带回来新的需求。沉淀了两个礼拜后，今天正式确定要做进产品中。&lt;/p&gt;
&lt;p&gt;做个什么东西呢？－－“标本管理”，简单的说，就是对临床上的一样血样之类的采样标本进行管理，类进销存的一套工作流程。&lt;/p&gt;
&lt;p&gt;虽然标本最后会产生数据，但是数据我们都将会直接从院内系统中取得，也就是说，这玩意和核心－－科研没有半毛钱关系。要做进产品的理由是：哎呀，有这个东西医生日常就会用我们产品啦（科研一般是先确定课题才有人想到数据，跟我们玩金融数据的日常不太一样），用啦这个他们就有机会进一步去使用核心功能啦，我们就能完全融入工作环节啦，云云。&lt;/p&gt;
&lt;h3&gt;功能堆砌罢了&lt;/h3&gt;
&lt;p&gt;我们这些没有行业经验的做产品就这样啦。&lt;/p&gt;
&lt;p&gt;开个玩笑。&lt;/p&gt;
&lt;p&gt;现在早过了堆功能时代，现代人生活节奏如此之快，导致“浮躁”已经成为人们对待事物的方式。所以功能堆砌这种产品制作方式徒增误操作机会和接受成本，仅仅是在浪费资源，每增加一个特性、功能，步骤都增加体验失败的机会，反而难以提供良好的体验。&lt;/p&gt;
&lt;p&gt;当然也有特例，就是产品功能多元化能增加产品的抗风险和抗打击能力，体现出刺猬优势。不过这明显不适用于产品初期，即便是产品大后期，也不乏有些控制力不足的企业被多元化把自己玩死的例子。&lt;/p&gt;
&lt;h3&gt;简约&lt;/h3&gt;
&lt;p&gt;自从20世纪后，不管是互联网产品、家用电器，甚至是工业工具，逐步的在往“简约”方向在进化。&lt;/p&gt;
&lt;p&gt;某广告词这样说的：“简约，不简单”，ソ〜，简约不是简单的代名词，它反而代表着更高的要求，突出核心，仅表达想要传达的理念思想，以温和优雅的形态，进行高度融合，让用户直接沐浴在核心理念的光辉下，却能同时得到更多收获。&lt;/p&gt;
&lt;p&gt;如果产品依赖用户主动性，在简约的基础上，还需要考虑将核心附带上“娱乐性”，即使是面对严谨工业、生产、科研，也需要融入广义上的“趣味性”设计（主观以外，非原始诉求，但又不意外，例如知识，例如围绕结果的辅助决策等等）。让用户是“参与”到产品中，而不是“使用工具”。&lt;/p&gt;
&lt;h3&gt;那科研还能怎么玩？&lt;/h3&gt;
&lt;p&gt;通过借用现实例子，来讲讲我个人认为围绕科研分析这个核心，提升“趣味”的“设计”应该是什么样的。&lt;/p&gt;
&lt;p&gt;先摆几个前提，虽然之前有些都提到过：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;大部分医生（统称医生啦，有可能是护士也可能是研究生实习生临时工等，下同）的统计、数据方面的基础很差。&lt;/li&gt;
&lt;li&gt;大部分医生的数据直觉并不强，分析内容的选择从临床经验来。&lt;/li&gt;
&lt;li&gt;临床科研都是先经过诸多流程把课题立项再把课题当工作去解决的。这个解决的过程，才是医生对临床科研的“定义”。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下将围绕以上，看如何将科研变得“有趣”。&lt;/p&gt;
&lt;h4&gt;分析&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;不能去模拟现实，不能按照“选题”－&amp;gt;“立项”－&amp;gt;“建立课题”－&amp;gt;“分析”这个现实流程去进行实现。毕竟“课题”的存在，对于医生的整个生命周期过程中，占比非常低。按照先有课题再有科研建设，便无论怎么搞，都一定会违背了想要用户更高参与度的目的。&lt;br /&gt;“课题”这个东西在“前”，将成为隐形的门槛。在没有课题要研究的情况，用户需要去思考“要做什么”，“要分析什么”，“怎么分析”，都想清楚后才能参与到产品使用中来（否则的话只能靠别的东西来让用户“提前”参与了）。这对用户来说就有很大的负担了。&lt;br /&gt;虽然能随便编一个课题就能继续使用，但这终究只是一个理想化的一厢情愿，大多数用户都不会有这种跳跃思维，特别是在面对一个“严谨”、“大型”的系统的时候。更何况还有现实流程作为“经验”在束缚着思想。&lt;/li&gt;
&lt;li&gt;不能（一开始就）让用户面临选择。将要说的第二个门槛来自于参与医生的临床经验不足。实际参与“科研”的很大可能都是些实习生、助理之类的角色，甚至是一些医疗无关的人。”课题“被领导立项后，科研工作跟普通杂活一样被分配给下边人来实施。我们产品的实际参与人很大可能就是这样的一群人。&lt;br/&gt;那么对于这些用户，让他们选择所要研究的细节内容（数据），将会成为一道高槛。他们会面对着大量参数、指标数据、医嘱数据、用药数据，一脸懵逼，体验极差。&lt;/li&gt;
&lt;li&gt;不能（一开始）让用户直接处理数据。理由是由于医生们的数据分析、统计方面能力都比较弱（其实对于能力强的用户，在分析部分，我们是没法提供服务的，因为数据中的隐变量的发现和消除与被分析实体和所处环境有关，无法做成统一工具。而初级数据分析者不会考虑这方面的问题。），存在统计方法乱用、滥用的现象，导致诸多分析结果表面上看似分析完成的到结论，但实际上毫无意义。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;这么玩！这样玩！&lt;/h3&gt;
&lt;p&gt;其实&lt;code&gt;分析&lt;/code&gt;部分说的，反过来做便是功能设计的方向。没有课题，那么就把课题往后放；不知道怎么选数据项，那么就不选；不会处理数据，那就不要处理，直接给出结果。当然不是给最终结果，毕竟没有“课题”的情况下并不存在研究目的嘛。而且，最终阶段的数据处理与结论还是需要人来做的。&lt;/p&gt;
&lt;p&gt;那么我们还能干什么呢？&lt;/p&gt;
&lt;p&gt;第一眼，给他看当前现有数据与疾病相关性；作为医生，研究的对象肯定是疾病。一个疾病会产生的相关数据总类也会很多，系统先自动做一次初筛，将正相关性强的直接提炼出来，负相关的标记出来，用相关性系数构建出疾病的“高维网络拓扑图”。毕竟看图比看别的任何形式的内容展示方式都要“舒服”。进一步，提供不同“观测视角”，通过用户主动切换，系统将拓扑图根据用户的需要，映射到不同维度上。&lt;/p&gt;
&lt;p&gt;接下来用户就能挑选出一些数据来，这时候就已经不是盲目的去选，因为系统已经挑出来疾病相关性强的数据项来。&lt;/p&gt;
&lt;p&gt;接下来就是根据用户选择出来的数据项综合展示其数据分布状态，及联合关系。在此基础上，自动选定（或推荐）数据清洗和预处理方法，以及基本分析方法。接着用户可以锁定预处理和基本统计方法，数据项换玩，每次更换都对比历史的结果，看怎样选取会得到一个比较好的数据关联状态。&lt;/p&gt;
&lt;p&gt;这一步完成之后，基本上可以根据选出来的数据，结合现实，看看能做什么课题了。当然也可以再进一步，设计建模、训练模型。最后如果觉得选出来的能进行描述、作为课题发表，再去建立课题，归档数据，便于日后回归测试、进一步细化分析啥的。&lt;/p&gt;
&lt;p&gt;至此，一个低门槛，可以“玩”的“科研”平台的核心部分就设计完了。&lt;/p&gt;
&lt;p&gt;这里，还有一个问题解决的不算好，就是“更高参与度”的问题，现在虽然门槛低，但毕竟数据积累后，难有大的变化。也就是说“好用”的数据项都挑了一遍之后，很快又进入到“日常没事可做”的状态。&lt;/p&gt;
&lt;p&gt;为解决这个问题，引入个例分析的分析方式。顾名思义，就是研究单个患者。因为患者是每天都在增加的，而每个患者都会有差别，当然也会出现“特异”的病例，这可是非常稀有和珍贵的。系统每天帮忙把某疾病下患者的“特征向量”提取出来，显示与个体的距离（差异）、与群体的距离（差异）、评估总和方向的差别有多大、它的出现对原群体（数据）的影响有多大，之前有多少类似“特异”病例等等等等。（这个地方再扩展下不就成辅助诊断系统了么 ˊ_&amp;gt;ˋ）&lt;/p&gt;
&lt;h3&gt;总的来说&lt;/h3&gt;
&lt;p&gt;这样一来，低门槛、轻松的数据使用方式，让更多的人更容易加入进来。再通过“帮忙选处理方法”、“推荐统计工具”的形式，其实也是在告诉“门外汉”什么情况下，该怎么变换数据；什么时候，该怎么分析。通过引导来起到教育作用，进而建立其数据使用和处理的思维。通过简单的操作展现数据之美，美还能“胜收”，说不定能以此培养起一些人的兴趣爱好呢。&lt;/p&gt;
&lt;p&gt;当然对高手来说起到的帮助并不大ˊ_&amp;gt;ˋ。但直接帮忙展示所有数据状态，动手分析前看一眼也挺方便的不是么。&lt;/p&gt;
&lt;h2&gt;最后&lt;/h2&gt;
&lt;p&gt;从到构思开始，断断续续花了一个礼拜终于完成这篇文章。&lt;/p&gt;
&lt;p&gt;仔细想来现在的产品组必然不会接纳这个设计，至少整体思维转变（提升？）前是不会接受的。&lt;/p&gt;
&lt;p&gt;一来全员都是项目建设制出身，很多想法都还停留在项目建设那种思维上。在有现实参照的情况下，会认为所有不匹配现实的东西必然是错误的，除非现实能跟着一起优化（不可能）。&lt;/p&gt;
&lt;p&gt;二来缺乏数据使用经验。对数据的理解都停留在浅表，没感受过数据的魅力。这几年“大数据”的炒作，多了数据很“值钱”的概念，但依旧提到“值钱”，能想到仅仅是“倒卖”。所以无法想象数据自身能够展现出来的东西，还是要“下锅”然后“炒熟”才能“上菜”（而且目前“上菜”上的是什么都完全没概念）。&lt;/p&gt;
&lt;p&gt;最后，一切从简（对自己，不是用户视角）的思维习惯，怎么可能会接受这么复杂的系统嘛。&lt;/p&gt;
&lt;p&gt;所以嘛，本文只是作者的一个思维练习的纪录而已。权当为几个月（估计）之后开始的工作做一个预热。&lt;/p&gt;
&lt;p&gt;－完－&lt;/p&gt;</summary><category term="产品"></category></entry><entry><title>不靠谱产品日记（10）</title><link href="/2017/produce_diary_2017_01_11_11_46.html" rel="alternate"></link><updated>2017-01-11T11:46:00+08:00</updated><author><name>kai_kai03</name></author><id>tag:,2017-01-11:2017/produce_diary_2017_01_11_11_46.html</id><summary type="html">&lt;h1&gt;2017-01-10&lt;/h1&gt;
&lt;h2&gt;提要&lt;/h2&gt;
&lt;p&gt;由于产品的关系，产品组最近开始触及到医疗科研的实例。&lt;/p&gt;
&lt;p&gt;现在的临床医疗科研和很多学科一样，通过统计学的应用转进为实证科学。于是乎，都开始接触到概率这个东西。&lt;/p&gt;
&lt;p&gt;但是不得不说，对于没经过专门学习和练习的人，对概率本身存在极大误解。思考概率问题既不考虑先验、后验，也不考虑多条件联合，当然更不会从后果倒回来进行加权，判断结果与实际情况有着极大偏差。&lt;/p&gt;
&lt;p&gt;例如空难事件：一年发生3次空难的概率约是亿分之一，而加上飞机寿命、经济因素，政治因数，那它出意外的还是小概率事件吗？那么多人直接目睹撞第一架飞机撞击双子楼，已经是极小概率了，按照频率派的思考方式，未来很长时间内都不太可能再发生了，结果咧？另外小概率意味着事件的发生，与不可能事件是对立关系，但大部分人在感受上将其放在等同关系的位置上。&lt;/p&gt;
&lt;p&gt;本来嘛，饭要一口一口吃，对与新事物的吸收也得慢慢来，一点点积淀。但大家学以致用的功力很强，很快就把“概率”用在工作中。&lt;/p&gt;
&lt;h2&gt;出问题的是小概率，不需要考虑&lt;/h2&gt;
&lt;p&gt;这是最近经常出现一句话。&lt;/p&gt;
&lt;p&gt;一个实际例子就是，现在产品在使用过程中会出现患者判断的问题。需要将来源于手工的数据和从旧系统拉取的数据归于同一个患者下。产品组提出了一个解决方案：系统中，患者姓名＋性别＋生日，合成一个为一个患者判断依据，且唯一，既系统中不允许“一个人”出现两次。&lt;/p&gt;
&lt;h4&gt;问题在哪？&lt;/h4&gt;
&lt;p&gt;这种方式存在诸多风险，这里挑两个严重的来说：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当出现三个变量相同，但实际并非同一个人的时候，数据将会被错误的归结到一起，成为一个难以察觉的错误数据。&lt;/li&gt;
&lt;li&gt;当出现三个变量相同，但实际并非同一个人的时候，第二个患者无法进入系统享受服务，同时医生也无法获取其数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一眼看过去，条件挺多，同名同姓同生日同性别，同时出现的概率应该不高。&lt;/p&gt;
&lt;p&gt;但细看又如何呢？&lt;/p&gt;
&lt;h4&gt;问题在这&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;姓名与性别很大程度是共线的，所以性别这个变量存在没什么意义。&lt;/li&gt;
&lt;li&gt;我们的主要试点单位会是儿科医院，所以拿儿科医院来说，特别是针对婴幼儿的疾病，基本上都在一定出生天数范围内发生。对应的治疗科室起到筛选器的作用，把相近生日的患者归集到一起（注：当前系统是以科室为单位进行建设的）。&lt;/li&gt;
&lt;li&gt;姓名这个即使从全国数据来看，重名的概率本身就不低。这里说一下，姓名的分布是明显可根据年份区间进行群分的，简单的来讲，就是同一个时期出生的孩子得到名字更相近。例如：50s的建国、援朝，60s的卫红、志红，近年来的子轩、梓涵、梓萱等。所以重名的概率在儿科医院这么一个筛选器做后验，会往正向进行大幅度修正。&lt;/li&gt;
&lt;li&gt;还有医院多系统并行产生的问题，新旧系统过度的问题，医生的特殊目的等等。。。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;再回过头来看看那两个风险。&lt;/p&gt;
&lt;p&gt;第一个风险事件发生，如果不留意的话可能不会发现，但是这类“人为”的错误数据会对某些研究方式的结果造成影响。其可能影响数据边界，在使用SVM之类的工具时，support vector的选取过程有可能会放大这个错误。特别时在做特异性研究时，会把研究引向错误的方向，检验时发现错误再回头，浪费科研人员时间和精力。&lt;/p&gt;
&lt;p&gt;第二个风险事件的发生，会直接影响临床医生的工作：眼前的患者无法加入到系统中。作为工作会使用到的系统，出现无法解决的问题，会产生很强的负面情绪，这问题就非常严重了。&lt;/p&gt;
&lt;p&gt;也可能还没等到进入实际工作就出问题了：在系统建设初期，从旧系统导入数据。用户不太放心的话稍微进行对比验证，就会发现跟原数据对不上（比如患者数量），这问题同样严重。因为从数据角度，数据原始性被破坏，是没有任何理由能够圆得过去的。&lt;/p&gt;
&lt;h4&gt;总之&lt;/h4&gt;
&lt;p&gt;两个风险事件可以归纳为两个问题：数据完整性与数据原始性。&lt;/p&gt;
&lt;p&gt;经常使用“数据”的人都知道数据质量的重要性。我相信对科研上心的医生同样也会对任何影响数据的“东西”感到深恶痛绝。&lt;/p&gt;
&lt;p&gt;数据方面，不局限于本文提到的，任何风险事件一旦发生，对其产品都将是致命的打击。&lt;/p&gt;
&lt;h2&gt;最后&lt;/h2&gt;
&lt;p&gt;首先，事发概率可不低，算不上小概率事件。&lt;/p&gt;
&lt;p&gt;其次，从自身经验，也是从数据使用者角度来看，后果极度严重。所以这就根本不是一个小概率事件问题，而是需要尽一切可能去避开的事情。这里想到&lt;code&gt;墨菲定律&lt;/code&gt;：“如果你担心某种情况发生，那么它就很可能会发生。会出错的事情总是会出错。”&lt;/p&gt;
&lt;p&gt;最后，也算见识到什么叫半桶水晃荡的可怕。&lt;/p&gt;
&lt;p&gt;这回就不去猜测以后发生什么事情了，说不定这回真的是我想太多。&lt;/p&gt;
&lt;p&gt;因为接触下来，发现整个医疗行业的科研素养的平均水平并不怎么样…………呃…………这么说也许地图炮范围太大。打击稍微精确点来说：临床医生的数据分析及统计（狭义）思维的平均水平，真的太低了。当然不是没有原因，在中国，可能医生都已经忙到－－“门外一堆病人要死了你还让我写论文”的地步，应付了事就拉倒了。（开个玩笑&lt;/p&gt;</summary><category term="产品"></category></entry><entry><title>不靠谱产品日记（9）</title><link href="/2016/produce_diary_2016_12_28_21_57.html" rel="alternate"></link><updated>2016-12-28T21:57:00+08:00</updated><author><name>kai_kai03</name></author><id>tag:,2016-12-28:2016/produce_diary_2016_12_28_21_57.html</id><summary type="html">&lt;h1&gt;2016-12-28&lt;/h1&gt;
&lt;h2&gt;市场需要2.0&lt;/h2&gt;
&lt;p&gt;这是老板上个礼拜跑完市场后回来的一句话。&lt;/p&gt;
&lt;p&gt;现在的产品被认为太low，界面简陋，功能藏得太深等等。&lt;/p&gt;
&lt;p&gt;和之前的估计一致，没想到这来的这么快，才刚迈向市场，就立马出现。但这第一脚都没算完全踏入市场就升级2.0的产品，也算是一只奇行种了。（苦笑&lt;/p&gt;
&lt;h2&gt;那么到底要啥&lt;/h2&gt;
&lt;p&gt;今天下午，正式展开产品优化讨论，但是所谓要优化的部分和优化思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据显示往上层提；&lt;/li&gt;
&lt;li&gt;工作操作往上层提；&lt;/li&gt;
&lt;li&gt;数据的动态需要表现出来；&lt;/li&gt;
&lt;li&gt;工作台概念。&lt;/li&gt;
&lt;li&gt;。。。。。。忘了，好像还有框架什么的。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一次刚开完会就忘内容，整个人一直都是心不在焉的状态。不断的脑中在整理项目启动前的各种设计讨论会。&lt;/p&gt;
&lt;p&gt;等等。。。这些，特么，完完全全就是半年前在设计时以“怎么简单怎么来”、“这么复杂做出来又问题你负责啊”之类的、认为不合适产品的理由，是被投票否决的建设思路么？连“工作台”字眼都与当时一摸一样。&lt;/p&gt;
&lt;p&gt;。。。。。。&lt;/p&gt;
&lt;h2&gt;就先这样吧&lt;/h2&gt;
&lt;p&gt;不太打算再说太多，要总结起来，内容感觉跟之前的全部日记都重复了。&lt;/p&gt;
&lt;p&gt;这状况，不管对产品，还是对个人，表面上是一个消极的打击。&lt;/p&gt;
&lt;p&gt;但是却在另一方面体现出了它正面的价值：&lt;/p&gt;
&lt;p&gt;每天时间都处于根本不够用状态，虽然不多却要花时间来整理这些文字。回头去读，看起来通篇抱怨，反而有一种全是偏见的感觉。不时的在想，码下这些字有意义吗？？我这些“少数人”的观点真的是对的么？&lt;/p&gt;
&lt;p&gt;这次事件给了我一个铿锵有力的肯定。嗯，产品观よし，价值观よし，世界观よし。今后，将继续坚持自己的三观，将本系列写继续下去。&lt;/p&gt;</summary><category term="产品"></category></entry><entry><title>不靠谱产品日记（8）</title><link href="/2016/produce_diary_2016_12_08_01_39.html" rel="alternate"></link><updated>2016-12-08T01:39:00+08:00</updated><author><name>kai_kai03</name></author><id>tag:,2016-12-08:2016/produce_diary_2016_12_08_01_39.html</id><summary type="html">&lt;h1&gt;2016-12-07&lt;/h1&gt;
&lt;h2&gt;会议简要&lt;/h2&gt;
&lt;p&gt;先贴个会议结论，既决策。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;今后，所有计划由市场时间进行倒推，必须要保证市场的blablabla。
研发发生延误，那么从测试阶段把时间抢回来。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;ps：以上及以下”市场“等同于”销售“、”客户服务“和”运营“相关的行为。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;今天就来说说这个看起来就本末倒置问题。&lt;/p&gt;
&lt;h2&gt;时间问题&lt;/h2&gt;
&lt;p&gt;总的来说，一切可以归结成时间问题。&lt;/p&gt;
&lt;h4&gt;项目设计&lt;/h4&gt;
&lt;p&gt;即便没有”市场时间倒推计划“这事，所有计划本身从一开始，便是能赶则赶。&lt;/p&gt;
&lt;p&gt;当然项目设计这点不好量化，没有明确精细度，进一步来说就是没有统一评判标准。所以到底怎么样不好说，即便带着各种漏洞和错误，在开发过程中通过实时跟进、干涉及调整，依旧可以有挽回的余地。虽然这个不是key piont，但却会对下一阶段造成致命的影响。(这里还有一点设计人员的精力问题没说，因为who care～)&lt;/p&gt;
&lt;h4&gt;开发&lt;/h4&gt;
&lt;p&gt;接下来到开发计划，依旧能压则缩，开发周期基本上被压到girigiri能完成的程度，加上上一点提到的问题，需要花时间进行修正设计上的失误，开发正常按时完成几乎成了不可能的事情。几次下来，研发也形成逆来顺受的习惯，不在对计划有异议，反正都是mission impossible。&lt;/p&gt;
&lt;p&gt;结果就是认真规划的计划必然的延误。虽然现在还没有出现随意编编应付了事的情况。但是如此以往，估计快了。&lt;/p&gt;
&lt;p&gt;同时一直的“赶工”状态，对质量带来的负面影响，又会将问题传导到下一个阶段。&lt;/p&gt;
&lt;h4&gt;测试&lt;/h4&gt;
&lt;p&gt;准确的说来，是质管中心对产品质量的监管。但这里不想多谈，就片面的说“软件测试”这件事。&lt;/p&gt;
&lt;p&gt;研发不对自己的产出进行严格检查，把问题推给测试，最终导致测试经常遇到严重的系统级bug，“测不下去”而暂停测试，严重影响测试进度。&lt;/p&gt;
&lt;p&gt;这一系列连锁反应，最终所有压力都被甩到测试这端，看起来就像是测试不断在“延期”似的。&lt;/p&gt;
&lt;p&gt;这里再倒回头说说测试本身存在的问题。一个软件项目，资源富余足条件下的开发测试比1:1是最合理的情况。当然非大型企业很难有如此富裕宽松的条件，那么测试比例在一定条件下进行缩减也是情有可原的。从经验上看，3:1基本就接近极限了（不进行集成测试及白盒测试，仅作使用测试，撑死能到6:1）。&lt;/p&gt;
&lt;p&gt;而我司的情况是：无论研发周期多长，研发人数多少，常配备的测试资源就1人，并且计划测试周期为1周，含多轮回归测试。&lt;/p&gt;
&lt;p&gt;在测试资源严重匮乏的情况下，不是延长测试周期，反而是进行缩缩减，那么结果可想而之。根据“系统熵是常数”的定理 (自称&lt;code&gt;&amp;gt;_,&amp;lt;&lt;/code&gt;)，那么问题必然继续传导下去，下一棒将是运维？市场？或是用户？&lt;/p&gt;
&lt;p&gt;&lt;em&gt;ps:顺带说下，近期的测试预计被缩短为2～3天，1人，emmmmm&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;市场倒逼&lt;/h2&gt;
&lt;p&gt;在非紧急特殊情况下，由市场倒推生产这是一种愚蠢的行为。&lt;/p&gt;
&lt;p&gt;这个情况现在互联网行业倒是挺常见的。特别是手游。&lt;/p&gt;
&lt;p&gt;绝大部分手游由于运营研发高度分离，完全分成两个企业。运营根据市场制订计划，反过来为研发确立开发节点。这些时间点的确定与研发工作本身是毫无关系的，所以我们看到手游公司好像经常出现通宵工作的概率非常高。但是每次新的イベント(event)上线，各种error、停机维护、道歉、赔偿、&lt;em&gt;&lt;small&gt;制作人滚出来土下座（开个玩笑，但kmr去死）；&lt;/small&gt;&lt;/em&gt;几乎都成为日常定番。但手游完全是卖方市场，人家爱怎么玩怎么玩，无非面上不好听而已，不影响捞钱。&lt;/p&gt;
&lt;p&gt;企业级、应用型、专业领域作业用等，这些字眼综合起来，就是完全买方市场。手游卖方市场的那套钓着用户的玩法根本行不通，不仅仅是直观满意度的问题，作业用的系统会带来的损失可以量化。一辆常抛锚的货船肯定会被立马回炉，防止损失扩大。&lt;/p&gt;
&lt;p&gt;在正常情况下，过分的压缩必要的时间，无非就是kpi上看起来漂亮而已。在资源不足的情况下，还需分一部分精力去掩盖问题，想尽办法在让一个不合理的东西看起来合理，更近一步加剧产品质量下降。把所有问题都推向“事后修补”。企业应用这么玩，不说会被当垃圾扔掉，市场及服务人员的脸在现场也挂不住啊。&lt;/p&gt;
&lt;p&gt;作为市场人员，一般来说都必须在心理优势和信息不对称方面，有绝对优势，才开展销售、推广行为，否则也只是浪费机会。&lt;/p&gt;
&lt;p&gt;那么研发周期与市场本不应该是一对矛盾，而是共同协调（梯度上升Y(^_^)Y），求得当前实际局部最优解得过程。&lt;/p&gt;
&lt;h2&gt;最后&lt;/h2&gt;
&lt;p&gt;今天就不扯太远，计划着还有个模式识别算法需要调整，得赶紧开工，否则太阳公公出来前没法睡觉了。&lt;/p&gt;
&lt;p&gt;总之，最开始贴的那段对近期工作的决策，应该不会持续很长时间，几次现场出问题后，市场自己就会让流程回到正轨了。&lt;/p&gt;</summary><category term="产品"></category></entry><entry><title>不靠谱产品日记（7）</title><link href="/2016/produce_diary_2016_11_18_20_02.html" rel="alternate"></link><updated>2016-11-18T20:02:00+08:00</updated><author><name>kai_kai03</name></author><id>tag:,2016-11-18:2016/produce_diary_2016_11_18_20_02.html</id><summary type="html">&lt;h1&gt;2016-11-18&lt;/h1&gt;
&lt;h2&gt;向前迈了一步&lt;/h2&gt;
&lt;p&gt;不计其数的bug，煎熬了三个礼拜，终于测试通过拿到质管部门的测试通过报告，虽然只是girigiri的擦边通过，仍有些小bug，但不影响上线使用的前提下，算是正式出厂了。&lt;/p&gt;
&lt;p&gt;同时产品组的工作开始转变，由原来的设计与软件建设（从来都没觉得全员都注意力都在这），向销售、医生服务展开，确定新的阶段为开发、销售、服务并行的阶段。&lt;/p&gt;
&lt;h2&gt;只有小半步的一步&lt;/h2&gt;
&lt;p&gt;走向市场了，明明时里程碑上浓重的一笔，为什么会有这个标题？&lt;/p&gt;
&lt;h3&gt;理由非常简单，但也都有它自身的道理。&lt;/h3&gt;
&lt;h4&gt;熵&lt;/h4&gt;
&lt;p&gt;太多东西简化的太过份，产品组一味以“怎么简单怎么来”、“不用纠结，快速上线”作为决策指导。&lt;/p&gt;
&lt;p&gt;这有个问题：任何事物的“熵”在最初形成时就已经是一个确定的“常数”，那么一方简单，必然就有一方（或其他多方）复杂；厂商偷懒，意味着用户通过产品的使用达到其目的，需要付出更多的精力（接受成本、学习成本、使用阻碍等等）。&lt;/p&gt;
&lt;p&gt;往好的方面想，这种指导思想的确对各方面都起到的加速作用都十分明显。&lt;/p&gt;
&lt;p&gt;并且当前的现实情况，有不少医生（特别是主任或被称为大医生的角色）的课题并非自己完成的，基本上都工作指令式地下发工作任务，由研究生、实习生或者助理（很多情况下这三者是一体三面）完成所有流程。这样一来，“屎也必须给我吃下去”这也不是没有可能，毕竟能够付钱的、我们的销售对象肯定是科室领导嘛。&lt;/p&gt;
&lt;h4&gt;需求？&lt;/h4&gt;
&lt;p&gt;目前的产品需求，基本来源于一线临床工作者（还不一定是医生），仅少量来自医疗科研工作者。&lt;/p&gt;
&lt;p&gt;在没有真正产品经理的领导，这些零散需求每一个对我们来说就像是救命稻草一般，没有抽象，没有提炼（也可以说是没办法），直接地东拼西凑，然后大量插入经由生活经验的猜测，形成让我们自己看起来像是那么回事的产品。&lt;/p&gt;
&lt;p&gt;这里存在的问题就是：这些人的需求是真正的需求吗？&lt;/p&gt;
&lt;p&gt;个人认为，是，它们都是需求，与他们日常的工作息息相关，而且是迫切需要解决的问题，这毋庸置疑。&lt;/p&gt;
&lt;p&gt;但是从被调研者身份来看，这些信息大多包含浓厚的个人色彩，他们只是在反应他们工作上遇到的问题，通过个人价值观润色提出来的问题。通常来说，这种底层工作人员的需求是无法形成行业需求，进一步说是没法通过通用型产品去进行解决。这类需求是一个无底洞，将产品带入无限功能实现的深渊，永远没法展现产品的可复制性。&lt;/p&gt;
&lt;p&gt;更可怕的是，这些需求还不是科研人员角度提供的需求。&lt;/p&gt;
&lt;p&gt;所以至此，即使产品上线了，科研直接相关的模块反而是一个被无限弱化的部分，这与产品初衷就已经背道而驰了。&lt;/p&gt;
&lt;h2&gt;结&lt;/h2&gt;
&lt;p&gt;关于第一点的解决，没办法，只能等，等到某天所有人的责任心都起来了才能解决，也许。&lt;/p&gt;
&lt;p&gt;第二点，没法子。要么空降个有足够能力的产品经理；要么被坑得太多，在坑中总结。直到某天终于开窍，主动从微观上去积累，达到一定程度后从宏观上再进行抽象与挖掘。&lt;/p&gt;
&lt;p&gt;以上。&lt;/p&gt;
&lt;p&gt;写到这，突然意识到，其实今天的内容与上个月写的东西完全一致，无非是老问题跟现实事件结合起来又重提说一遍。&lt;/p&gt;
&lt;h2&gt;结2&lt;/h2&gt;
&lt;p&gt;嘛，最后又要来预测点东西。既然开始走向市场，那么。。。就说说产品自身吧。&lt;/p&gt;
&lt;p&gt;在没有任何改变的情况下，市场出去了，将会源源不断的带回“个人需求”，按照现在的状态，我们（只能）认为“啊，这是一个丰富产品功能的需求”，“啊，这是一个弥补缺陷的需求”，不断进行下去；另一方面，由于团队对这个行业的认知，不足以快速地进行核心功能挖掘与迭代，一来为了“逃避现实”，二来为了“有事做”，便加重这个问题，以至于投入人力物力越来越大，却离目的越来越远。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“下一步”应该会很难踏出去，未来很长一段时期（半年？一年？）都将会原地踏步，甚至可能会出现忍不住了往后跳一步，旧阶段与新阶段并行的尴尬场面&lt;/strong&gt; &lt;em&gt;（苦笑&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;最近总有个既视感：会为了讨好医生，会不断出现类oa，类进销存，或现有系统中末端工作自动化替代品之类的“需求”，然后再灌上为了将用户“引导向科研”、“引导向产品核心”这种不负责任、自欺欺人且南辕北辙的借口。曾经见到不少的产品都是以这样的方式逃避现实的，号称曲线救国（hmmmm。&lt;/p&gt;</summary><category term="产品"></category></entry><entry><title>不靠谱产品日记（6）</title><link href="/2016/produce_diary_2016_10_28_23_12.html" rel="alternate"></link><updated>2016-10-28T23:12:00+08:00</updated><author><name>kai_kai03</name></author><id>tag:,2016-10-28:2016/produce_diary_2016_10_28_23_12.html</id><summary type="html">&lt;h1&gt;2016-10-28&lt;/h1&gt;
&lt;h2&gt;心态&lt;/h2&gt;
&lt;p&gt;产品功能设计告一段落，以及研发部分表面工作的开发近乎完成，于是应产品组要求，进行一次实际产品演示与体验会。这个会上面暴露出来严重的根本性问题。今天就来谈谈这个。&lt;/p&gt;
&lt;h3&gt;关于产品心态&lt;/h3&gt;
&lt;p&gt;产品演示过程中发现，先不说操作细节，产品组的其他人对功能分布，功能意义及目的，如果不详细说的话，就一头雾水，不明所以。明明大多数上层需求也是通过头脑风暴出来的，从原型设计到高保真原型（几乎和成品无异的设计图）都全员参与讨论与决策。全员对设计进行定型后才开始开发。拍板时间距今也才一个多月。&lt;/p&gt;
&lt;p&gt;前情提一下，就是产品组成员的根本定位是：每个人都是产品负责人，都均分地肩负的产品经理职责（相当于某些团队的产品总监）。&lt;/p&gt;
&lt;p&gt;在这种情况下出现“蒙圈”的情况，就意味着开发前的共同讨论、粗设计、拍版等同于毫无意义的工作，因为从事后看，每个人都不知道自己当时在说什么，在做什么，每看到一个事物是什么，每一个决定与想法的目的与意义是什么，纯粹的为开会而开会。&lt;/p&gt;
&lt;p&gt;同时也暴露出来了这个产品组团队的实际分工为［市场］与［项目设计、项目管理］两个部分，［产品经理］部分也因大伙都有责任变成大家都不去担责任。&lt;/p&gt;
&lt;p&gt;对于产品设计，产品组在等着市场带回来需求，项目组在等着产品组总结需求，但现状是市场等着先出产品，然后去找客户，让客户提意见才能总结需求。而目前市场计划在远未来，眼前却有项目设计及开发启动及结束节点。相当于逼迫着项目必须拿出东西。&lt;/p&gt;
&lt;p&gt;于是乎产品经理部分职责便直接包含于项目设计中，变成了两个项目经理负责“产品”设计，因为项目设计需要看起来合理，就必须去对需求进行猜测，并融合进项目设计中，否者项目就言之无物了。那么项目经理们为了完成自己的任务，只能硬着去编造需求了。&lt;/p&gt;
&lt;p&gt;拿着编造需求，开会讨论，既然没人上心，自然实际对设计无法进行正确判断，进一步，甚至无法理解当时在讨论的是什么，为了所谓的“赶时间，快速完成产品”，进行决策、拍板，“赶紧”开始进入开发。&lt;/p&gt;
&lt;p&gt;至此，在最后产品演示后出现“蒙圈”的情况也就合理了。&lt;/p&gt;
&lt;h4&gt;总结1&lt;/h4&gt;
&lt;p&gt;人人有责＝人人无责。我们正在亲身的在验证这个定理。&lt;/p&gt;
&lt;p&gt;大家都在完成着自己的工作，但是作为产品工作的核心－－产品组，即便不说所谓把产品当做“事业”、当做“养育孩子”这种常情，对产品完全不上心，这是一个多严重的问题。&lt;/p&gt;
&lt;p&gt;目前公司虽然情况在往“下”走，但还有余力，这个由产品组领导同时也是老板，在一开始埋下的问题，估计得到火烧眉毛、临近濒死的状况才有可能改正过来。极大可能结果是由老板跳出市场人员的自我定位，一肩担起领头羊的角色，之后才会有改善。&lt;/p&gt;
&lt;p&gt;为什么猜得那么极端，得到公司濒死才有可能发生转变，就是我接下来要说的另一个问题。&lt;/p&gt;
&lt;h3&gt;关于学习心态&lt;/h3&gt;
&lt;p&gt;做过人事招聘或带过团队的人应该都有这种结论：学习能力高于一切。学习能力0的人即便经验再丰富，都无法完全掌控所负责工作；学习能力强的人，即便是新人，也能很快上手并独当一面。&lt;/p&gt;
&lt;p&gt;这里不说学习能力，而是一切的前提－－关于学习方面的心态，心态不正，即便学习能力再强，也毫无意义。&lt;/p&gt;
&lt;p&gt;产品中有个模块是选择统计方法对数据进行描述，当然作为产品雏形，仅仅含有作为演示用的描述性方法，无非是显示计算一下均值、方差、中位数之类的。在体验演示过程中，一致提出了一个要求：要求培训统计方法。&lt;/p&gt;
&lt;p&gt;如果是在未来，集成比较进阶的数据处理方法，例如深层网络，升维降维，空间变换之类的，专门培训是有必要的。但目前这个情况，均值？方差？这种基础中的基础，说起来简单，同时也非常难，就像要跟高级人才讲明白1+1，反而不容易。这些基本的玩意，随便搜搜都一大片资料、文献、教材、甚至是别人总结的百科，根据自己理解去吸收才是正道。&lt;/p&gt;
&lt;p&gt;“没有资料”、“看不懂”、“买教材浪费钱”，“你既然都做了就教一下我们啊”。当时整个会议室充斥着&lt;code&gt;书非借不能读&lt;/code&gt;、&lt;code&gt;不教我们就不知道啦怎么办&lt;/code&gt;的二逼气氛。明明一个个都是名校理工科高材生，却都恬着脸让一个三流学院文科生去给他们准备理工科基础知识的培训。真是万万妹想到啊，原来名校的思维方式方面的培养也不怎么样啊。&lt;/p&gt;
&lt;h4&gt;总结2&lt;/h4&gt;
&lt;p&gt;对于公司，对于团队，现在面对的是一个完全全新的领域，甚至是整个行业从未涉及到的处女地。在这样的前提下，要走得下去，要在行业里划出一块地盘，最根本的技能便是－－自学，也是唯一的办法。行业的开垦，意味着，所要面对的是原行业的人都未触及东西，也就是说，没有人有（真正的）经验，只能靠自己，只有专业性比原行业的人高，才可能总结出”原系统框架漏洞“，针对性进行改进优化；再配合其他行业知识的整合，将”系统“升华，才有可能在新领域中站得住脚。&lt;/p&gt;
&lt;p&gt;然而现在团队中的学习主动性近乎为零，可以预见未来初期市场推广时的一大碰壁原因是无法交流。毕竟我们都离医疗科研非常远，却需要直接与医疗科研（临床）的一线人员进行沟通。不用医疗知识以及科研分析方法武装自己，太容易陷入牛头难对马嘴的境地。&lt;/p&gt;
&lt;h3&gt;真@总结&lt;/h3&gt;
&lt;p&gt;归根结底还是角色并不真正明确，带来的后果便是让人一点点的卸掉责任心，团队变得没有凝聚力。久而久之，大家都习惯原地等着工作的到来。没有人走在”产品“的前面，没有牵引力，团队就像失去动力的飞船，撞上拦路石才知道石头在哪，更别说穿梭的能力，只能随波逐流。&lt;/p&gt;
&lt;p&gt;哎呀呀，是不是搞数据预测多的人都有去预测未来的毛病？&lt;/p&gt;
&lt;p&gt;那最后，来做个预言做收尾：老板应该会是最先发现自己该补课啦，接着，未来某天，某次老板与市场出去跑客户后，结果老板看不下去，要求所有人（应该更偏向市场人员？）去补1.自己产品的课，2.医疗科研的课。&lt;/p&gt;</summary><category term="产品"></category></entry><entry><title>不靠谱产品日记（5）</title><link href="/2016/produce_diary_2016_10_19_20_27.html" rel="alternate"></link><updated>2016-10-19T20:27:00+08:00</updated><author><name>kai_kai03</name></author><id>tag:,2016-10-19:2016/produce_diary_2016_10_19_20_27.html</id><summary type="html">&lt;h1&gt;2016-10-19&lt;/h1&gt;
&lt;h2&gt;原地爆炸了&lt;/h2&gt;
&lt;p&gt;从开始记录产品进程，这是第一次这么及时写日记，以前都是拖一段时间来写总结，但今天发生的事情实在是让人想快点写下来。&lt;/p&gt;
&lt;h3&gt;数据的问题&lt;/h3&gt;
&lt;p&gt;这个问题在上上一篇日记中提到。这里不再废话，虽然有点想复制一份过来，但想想算了，过几天研究下pelican的artical之间的连接怎么做。&lt;/p&gt;
&lt;h3&gt;一定会推倒重做的（2）&lt;/h3&gt;
&lt;p&gt;因为数据存储、合并展示相关的问题一直没有结果，设计上直接是默认认为不是问题而没有进行设计，但研发开发到这一步了，发现无法做下去，拉上产品组进行讨论上边提到的问题。&lt;/p&gt;
&lt;p&gt;最后一次，也就是产品开发过程中的对这个问题进行的最后一次讨论，也是当前最后一次的调整。产品组做了一个对我来说可谓是感天憾地的决定。&lt;/p&gt;
&lt;p&gt;产品组长提出，一项研究只应该在一个表单内进行，而该表单的频率在最开始时就确定的。不可能出现两个表单联合进行分析，如果本来是要一起研究的，那么开始就不应该分成两个表单。所以一切都在最开始的时候就确定的，只需要一张数据表就够了。进一步，就医疗而言，不可能出现同时研究两种病，两种情况，一次研究就一个研究对象，混合起来是不可能的。&lt;/p&gt;
&lt;p&gt;的确，这个想法完美的解决非常多的问题。这突破常识的想法，相当于，确认了所有课题研究在一开始就是明确的，确定了所有的研究开始于数据数据开始收集，否认了所有关联性的研究，甚至也排除了部分研究过程中实施的对照组分析或双盲实验中某些验证步骤。&lt;/p&gt;
&lt;p&gt;要说这是外行人一次大胆、张开就来的探险，也仅仅是笑笑就过了。但接下来一名本身长期从事医疗科研的兼职顾问的附和让我真吓掉瓜子，研究顾问明确确认该方法可行。也就是他从多年研究经验出发，确认了医疗行业没有任何关联性的研究。&lt;/p&gt;
&lt;p&gt;这完全颠覆我的世界观，让我相信，的确，我对医疗知之甚少，特别是医疗科研这么有深度的行业，不能用一般世界的科研方法取看待，所有的惊讶来自于我的无知。&lt;/p&gt;
&lt;p&gt;自嘲的废话就写这么些，这是第二个可以断言的地方，等到本系统真正开始运作，这部分一定会推倒重新来，要不然这世界真的不会好。&lt;/p&gt;
&lt;h2&gt;最后的牢骚，也是给路过看客一点提醒&lt;/h2&gt;
&lt;p&gt;数据的原始性非常重要。非常重要。非常重要。&lt;/p&gt;
&lt;p&gt;不过这点很容易被大多数设计者忽略，很多时候并没有往更大更远的层面去考虑，因为设计者更多的只关心当前业务的实现，都可能忙不过来。&lt;/p&gt;
&lt;p&gt;大概是因为做金融数据分析的时候被数据坑了太多次，有几次被坑的是见血露肉的，所以对数据的原始性特别重视。&lt;/p&gt;
&lt;p&gt;为什么数据原始性重要呢？&lt;/p&gt;
&lt;p&gt;1.未来要对数据做什么，要怎么做，可以说是现在无法百分之百确定。保留最原始的数据就是为了应对未来的不确定。一旦出现意外，或者有其他想法，只要改变分析策略即可，因为数据还在。&lt;/p&gt;
&lt;p&gt;2.人为处理过（包括含有主观意识的筛选、过滤）的数据很可怕，比数据发生错误还可怕，数据错误的发生不过是产生噪声，跟白噪声一样的零均值单位方差的噪声。但人为处理过的数据一定是带偏的，有很强的指向性。如果未来的再对数据进行分析时，未意识到这个数据偏置，并进行消除，那么对结果将会带来毁灭性的打击。&lt;/p&gt;
&lt;p&gt;所以数据原则，未来在这个产品的项目设计上还是会继续提，不管是否听的进去，也算是尽责了。&lt;/p&gt;</summary><category term="产品"></category></entry><entry><title>不靠谱产品日记（4）</title><link href="/2016/produce_diary_2016_09_24_01_03.html" rel="alternate"></link><updated>2016-09-24T01:03:00+08:00</updated><author><name>kai_kai03</name></author><id>tag:,2016-09-24:2016/produce_diary_2016_09_24_01_03.html</id><summary type="html">&lt;h1&gt;2016-09-23&lt;/h1&gt;
&lt;h2&gt;前情&lt;/h2&gt;
&lt;p&gt;上一轮测试问题很多，bug很多，与此同时开发延期问题严重。引发了本次像拨洋葱似的，一层层的发现问题。&lt;/p&gt;
&lt;h3&gt;研发&lt;/h3&gt;
&lt;p&gt;研发是最开始暴露出问题的。因为研发人员分工明确，任务明确，一切按计划来，不管是研发自身有问题，还是计划有问题，肯定是第一个出问题的层面。&lt;/p&gt;
&lt;p&gt;出问题后，产品肯定问责，到底怎么回事。&lt;/p&gt;
&lt;p&gt;研发甩锅：需求不断修改；数据库表设计没有人确定都是研发自行解决，需要什么创建什么，一旦有工作交叉容易出问题；界面不周全；接口逻辑不周全。&lt;/p&gt;
&lt;h3&gt;项目、产品&lt;/h3&gt;
&lt;p&gt;先不说开发细节的质量，从项目组来看研发提出的问题都是不可否认其存在的。但是再整理，发现需求不断变更，跟产品组渐渐接触市场，对市场有新的认识，发现旧需求不满足有关，更进一步来说，产品的具体设计前期并没有明确的需求作为支撑。至于数据库表设计文档有问题，产品细节设计不清晰，业务逻辑不完整，项目也能找到甩锅的理由。&lt;/p&gt;
&lt;p&gt;先说说，本来是研发、项目、产品三方面的问题，但此处小标题却把产品和项目写到一块，原因是：产品组5人，其中3人的定位是市场服务人员，市场人员和，剩下2人负责产品设计、项目设计、项目管理。&lt;/p&gt;
&lt;p&gt;也就是说这两人如果在职责范围内，承担着从头至尾的工作，先从需求开始设计。注意，是需求设计，现在并没有明确给过来的需求。完整的需求设计既要考虑市场，考虑战略，同时还要考虑研发可行性。需求设计完了到产品设计，先设计系统，再设计功能。这公司还没有设计师（设计师是有的，但是他给自己的定位是美工，只关心颜色大小边距之类的，其他的需要产品组来给），这意味着在设计完功能后还要进行交互设计，再之后是界面设计。设计提交给产品组内反复确认，最后才确定了，再开始项目设计。&lt;/p&gt;
&lt;p&gt;与此同时，还需要承担来自市场的压力－－时间节点。无论复杂还是简单，无论需求是否明确，都必须在一个确定的时间交出设计、交出项目计划并且按照市场节点交出开发成品。&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;从现在的产品组架构来看，能够给出一套完整的产品设计和开发手册几乎是不可能的。虽然所谓的分工明确，但是基本就分为对内和对外，对内的把产品总监（部分），产品经理，结构策划，功能策划，设计师，项目经理等等的岗位进行整合。从精力上来看，需要关心的东西实在太多。&lt;/p&gt;
&lt;p&gt;在这种情况下还需要去关心细节，就成了不可能的任务。像一棵树一样，树干是最原始的需求，往上是需求分解、再上一层是产品设计、再往上......一层层往上，每一层的复杂度都以指数级展开，不用到细枝末节，几层过后就开始不在精力可控范围内了。&lt;/p&gt;
&lt;p&gt;那么设计者不去操这个心（准确的说是无法去操心），但问题是客观地在那摆着，不会消失，于是这些不明确引起的问题就会被摊到研发人员身上，带到研发过程中去，开发就会出岔子，接下来就是开篇的研发甩锅着么个循环。&lt;/p&gt;
&lt;p&gt;虽然在产品组例会上提出来，进行讨论，问题也被认可，但被一笔带过：这是现阶段没法解决的，人力不足，人才也不足。在近未来，这些问题还会不断的重复下去。&lt;/p&gt;</summary><category term="产品"></category></entry><entry><title>不靠谱产品日记（3）</title><link href="/2016/produce_diary_2016_09_10_23_58.html" rel="alternate"></link><updated>2016-09-10T23:58:00+08:00</updated><author><name>kai_kai03</name></author><id>tag:,2016-09-10:2016/produce_diary_2016_09_10_23_58.html</id><summary type="html">&lt;h1&gt;2016-09-10&lt;/h1&gt;
&lt;h2&gt;初版开发进程过半&lt;/h2&gt;
&lt;p&gt;虽说第一阶段开发完成，但是这是一个前不着村后不着店的节点。这个分段仅仅是为了让测试进场进行部分功能测试，目的是充分利用一个本来就很紧俏的资源——测试。&lt;/p&gt;
&lt;p&gt;在这个时候开一篇日记，原因是随着这个节点的抵达，意味着只要没有致命错误，不会再大手调整，是时候对早期设计进行盖棺定论了。&lt;/p&gt;
&lt;h2&gt;途中的小结&lt;/h2&gt;
&lt;h3&gt;设计的问题&lt;/h3&gt;
&lt;p&gt;太简陋了，完全是小学生级别的设计。&lt;/p&gt;
&lt;p&gt;由于我进场的时机，平台的大体框框都已经设计完成了。说实话，一切藏太深了，所有工作按模块并行排在菜单内，对于一个可能会用于日常工作的平台，这十分不合理，也不友好。&lt;/p&gt;
&lt;p&gt;当时发现还有挽救的余地，因为平台首页基本上完全空着，毫无作用，孤零零的放着几个数字指示器，也是没有多大意义的数字。&lt;/p&gt;
&lt;p&gt;我的意见是：将所有工作以数据的形式透到首页上，在首页上能够直接跳到对应的工作模块，简单的工作可以直接在首页上操作完成。&lt;/p&gt;
&lt;p&gt;根据不同工作角色，部分数据还进一步可以以图表进行展现，不光看到数据的变化，还能从结果跟踪数据的变化。&lt;/p&gt;
&lt;p&gt;这一点十分重要，因为在供分析的数据收集阶段，有一个重要的点是“我的数据什么时候收集算完成”：数据什么时候才符合心理预期；这数据带偏的，但好像在往好的方向移动；不对越来越偏离中心了；这个分布，得调整分析方式呢...等等，可以说数据收集工作是一个无法事前估计的无底洞，并且会带动研究者进行着变化。&lt;/p&gt;
&lt;p&gt;当然我认为大部分医生已经习惯了时候研究分析，那么上面所说的也就不那么重要了，因为这样一来就不考虑过程成本了呢。&lt;/p&gt;
&lt;p&gt;但同样的做法其实不光有益于过程，可以直接从结果出发，例如展现出这堆数据什么时候“能够证明研究者的预设结论”。因为能够达到这点的时候就是可以写论文的时候。&lt;/p&gt;
&lt;p&gt;这也意味着，我们不光把数据透出来，甚至把数据分析模块的功能都进行自动化处理，直接结合到日常上去了。再加上分析模块的可配置，让每个研究员都有自己工作台。&lt;/p&gt;
&lt;h3&gt;一定会推倒重做的&lt;/h3&gt;
&lt;p&gt;但上述更改建议被产品组否决了。
&lt;br&gt;理由是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;1.功能重复：功能模块已经能够做到的，没必要一个功能分两个地方。
2.太复杂了，一切从简。多做一点意味着问题也多一点。
3.市场等不及了，研发不能及时出东西你能负责么？
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;由少数服从多数的产品组工作原则，还是一切从简的好。&lt;/p&gt;
&lt;p&gt;但基本可以下断言，在未来某次产品演示后，一定会有市场人员或融资负责人回来拍桌子：这东西卖不出去。&lt;/p&gt;
&lt;p&gt;真的，现在这个设计真的太简陋了。&lt;/p&gt;
&lt;p&gt;ps：（T_T）不光工作平台，我全新设计的客户端也以同样的理由拔除了所有快捷工作功能。没办法，他们人多。&lt;/p&gt;
&lt;h3&gt;数据的问题&lt;/h3&gt;
&lt;p&gt;现在的产品设计目前还存在这么个问题：&lt;/p&gt;
&lt;p&gt;当数据表单频率不对等时，如果整合成一张表单来进行展示和分析。&lt;/p&gt;
&lt;p&gt;当然我认为这仅仅是展示层的问题，无非是取均值／中位数 进行合并，又或者按概率分布／回归方程 来进行插值生成 等等等等。但这些方式的选择应该由未来的研究员来完成。更准确的来说，应该是说由未来各自的分析方式来决定的，而不是程序偷偷的做掉。&lt;/p&gt;
&lt;p&gt;但不知道为什么，产品组一直执着于把这些问题规划为一个确定的解决办法和方式，设计进数据库，作为初期设计，定死在程序内。经过多次讨论，都无解而终，而我的建议每次一提出来话没几句就被塞上抹布，他们继续讨论着数据表的设计问题......然后，这个问题现在依旧还存在着，就等着研发测试碰到问题再推动了。&lt;/p&gt;
&lt;p&gt;数据原始性的原则，这个东西直接影响着未来，不管他们听不听得进去，我都会坚持下去，因为过去我在这上面吃过太多的亏。&lt;/p&gt;
&lt;h2&gt;待续&lt;/h2&gt;
&lt;p&gt;看来从现在就要开始做好产品开发完成后来自市场人员的冲击的心理准备了。（笑）&lt;/p&gt;</summary><category term="产品"></category></entry><entry><title>不靠谱产品日记（2）</title><link href="/2016/produce_diary_2016_08_24_22_40.html" rel="alternate"></link><updated>2016-08-24T22:40:00+08:00</updated><author><name>kai_kai03</name></author><id>tag:,2016-08-24:2016/produce_diary_2016_08_24_22_40.html</id><summary type="html">&lt;h1&gt;2016-08-24&lt;/h1&gt;
&lt;h2&gt;不靠谱的医疗科研&lt;/h2&gt;
&lt;p&gt;近一个月来，通过一个医疗外包项目的理解，大概掌握这个产品的思路和目的。&lt;/p&gt;
&lt;p&gt;虽然说不打算深入医疗科研这个行业，但论文——作为科研行为的第一个产出品，还是有必要去读一下。找了个医学生朋友借到个临时的医院vpn和数据库访问权限，简略的翻看了几百篇论文。不得不说，医疗圈，准确的是医疗科研圈，充斥着大量应付作品，从严谨程度上来说，甚至还不如一些为了应付毕业的本科论文。大量预设前提，沿着预设搞出几个无量冈量，通过这几个无量冈量直接就下结论；没有反向验证，少有宏观全局比对验证；还有一个感觉已经成为普遍共识的默契，就是无论怎样的数据都默认符合高斯分布，这点虽然有点像金融，但是很多情况下样本仅有几十例，上手不管怎样，直接用高斯分布为前提的分析方法，然后就得到结论。从数量上看，大量的医疗科研结论看起来比经济学的还要玄学。&lt;/p&gt;
&lt;p&gt;咳咳，上边哪个标题地图炮范围有点过大了。这段话针对的是国内中文期刊发表的论文，换句话就是说是低端科研部分几乎都是滥竽充数。当然往外文期刊发的质量还是挺高的。这也和了解到的行业状态吻合。&lt;/p&gt;
&lt;p&gt;医生日常工作，我们大致都知道是干嘛的。&lt;/p&gt;
&lt;p&gt;医生们还有一个任务：输出科研成果。这项工作从某种角度来讲，比“救死扶伤”还要重要，因为它关系到职称提高、职位晋升，当然还有收入。&lt;/p&gt;
&lt;p&gt;我们都知道的一个事实：资源问题，导致现在的医生们的长期工作负荷几乎远超所有行业，并且有些偶尔会超过健康工作负荷边界。&lt;/p&gt;
&lt;p&gt;一个眼前急需完成的工作，一个需要长时间准备的任务，在现在的行业背景下，自然而然的后项会被忽略，而等到deadline的时候突击完成（研究代做，论文代写、发布，已经成为一个行业，这个另说了）。&lt;/p&gt;
&lt;h2&gt;融资&lt;/h2&gt;
&lt;p&gt;本次产品早早启动融资行为，基于前段时间来自外部的行业分析资料，融资材料准备的非常顺利（虽然不是我处理的），所有东西看起来比之前做交通产品的材料看起来靠谱多了。&lt;/p&gt;
&lt;p&gt;资料准备完成之后，配合组长进行几次模拟路演练习，有公司内自我练习、修正，也有借助外部小路演进行练手。&lt;/p&gt;
&lt;p&gt;跑了几次路演后明显感觉到国内的融资环境跟前几年比冷淡了太多。真跌入L型经济的横部了（笑）？同时也感觉到，给一个完全行业外的人介绍一个业内的痛点，是一件多么难的事情。&lt;/p&gt;
&lt;p&gt;另外，一来没资深行业背景的人，即便是站台的人。二来这个产品描绘的链条太长：虽然从画饼的角度来说，未来能有很多事可做，可以从不同角度着手，利益空间也很大。但反过来就是说对链条的控制力，前期投资成本等方面也需要更大，投资回收风险更大。结合冷却了的融资环境，配合近几年都没几个医疗行业投资捷豹的背景....前路漫漫啊！&lt;/p&gt;
&lt;p&gt;也有值得安心的地方：路演场上见到的“对手”都太烂（笑&lt;/p&gt;</summary><category term="产品"></category></entry><entry><title>不靠谱产品日记</title><link href="/2016/produce_diary_2016_07_29_23_52.html" rel="alternate"></link><updated>2016-07-30T02:54:00+08:00</updated><author><name>kai_kai03</name></author><id>tag:,2016-07-29:2016/produce_diary_2016_07_29_23_52.html</id><summary type="html">&lt;h1&gt;2016-07-29&lt;/h1&gt;
&lt;h2&gt;前情&lt;/h2&gt;
&lt;p&gt;上一个产品，合奏直播舞台，作为争抢最后一波直播市场资本资源的产品，错过去年的窗口期，在今年年初基本已经宣告死亡。&lt;/p&gt;
&lt;p&gt;遗留的技术嘛，虽然心里已经“盖棺定论”的把这些当成（应该）沉默的成本了，但是领导的风格嘛，公司还是认为它在其他方面有用武之地，所以前半年一来完善技术方面的东西，另一方面在硬靠其他业务希望能盘活已经泼出去的水。于是过了个拖泥带水的半年。&lt;/p&gt;
&lt;p&gt;上上个月，最后一次技术的演示会，上个月唯一一个“全职”开发人员释放。合奏产品终于落下帷幕。&lt;/p&gt;
&lt;h2&gt;新征程&lt;/h2&gt;
&lt;h3&gt;医疗产品&lt;/h3&gt;
&lt;p&gt;随着合奏直播舞台的落幕，受公司之命，加入了公司的医疗产品组－－这是一个存在很长时间的“组织”，只不过之前并不是“组”，而是一种离散的存在，主要工作是负责外部医疗相关的项目建设，之前弄的webRtc相关技术也是为他们服务的。&lt;/p&gt;
&lt;p&gt;半年前，真正意义上的产品组才成立，原因是公司开始决定做自己的医疗产品。&lt;/p&gt;
&lt;p&gt;这是一款面向医疗科研，服务于医生科研工作的工具型产品，再辅以“人”的服务，“数据”的服务，来形成产品服务的全貌。这里面将会设计到统计学方法，数据聚合方法，科研课题立项方法，分析方法，以及数据采集手段等方面。细节就不说了，本日记无关，也涉及到商业上的问题。&lt;/p&gt;
&lt;h3&gt;震惊&lt;/h3&gt;
&lt;p&gt;为什么会有这么一个标题，因为我真的惊呆了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;“产品经理（总监）是谁？”
“每个人都是产品经理！”
“哦，。。。啊？？？？？”
“产品组所有成员都是产品经理，每人20%的智慧构成这个产品。”
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如上就是入组时产品时的对话。顺带一提，组长主要负责的是市场。&lt;/p&gt;
&lt;p&gt;没有一个懂医疗，没有一个接触过科研，没有一个会数值分析，甚至我还发现，居然连基本的“方差”都没一个人知道是什么东西，这样的一群人凑到一块来做一个医疗科研产品。当然这样本来也不是什么大问题，能找一个会的人来领导团队或甚至指定一个负责人，临时进行全面学习也行啊。但现在这团队对产品责任进行平分，人人都有都有责任，也就意味着人人都没有责任。&lt;/p&gt;
&lt;h3&gt;未来&lt;/h3&gt;
&lt;p&gt;团队请了商业咨询师做了份行业、市场分析报告。虽然目前的领导人在以前的接触中，发现其对资讯信息中的私货与煽动性文字接受程度相当高，但介于我也是对这个行业知之甚少，只能接受这个产品现在是有一个已确定光明的前景的说法。&lt;/p&gt;
&lt;p&gt;但对于产品研发之路来说，没有一个核心的需求设计着作为领头羊，现在已经可以预见到下面这些场景一定会发生。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;1.“为什么带帽子” 啪～；
  “为什么摘下帽子” 啪～；
2.“需求是什么？”
  “现在不知道，以后一定会知道。”
3.“这怎么办呢？”
  “先这样，这样，以后就知道怎么做了。”
4.“你们这个东西啊，拿不出手／人家看不上 啊”
  “。。。”
  “我们要从新设计，全面改进！”
  “怎么改进？”
  “。。。”
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;不靠谱产品日记&lt;/h2&gt;
&lt;p&gt;一来与产品组沟通下来的工作方向－－作为需求接受者为前提的设计及进度控制，二来生活上的一些问题，除去本职工作，也不再可能有额外精力去对一个完全无知的行业进行全面深入。&lt;/p&gt;
&lt;p&gt;斟酌了小半个月，此次工作，我对产品组最大的贡献应该是在数据科学方面给予支持和研究开展的基本原则把控，控制数据层面的产品不走歪路，毕竟这几年搞算法，sc和生物方面的论文读了不下千篇，加上长期收集、处理金融数据，相对于组内其他人，离科研工作的距离更近。但预计这同样也是件困难的事。因为“外行”往往靠直觉去判断事物，而越专业的事情，越反直觉，更可怕的是这样的人（合起来）对产品有绝对的话语权。&lt;/p&gt;
&lt;p&gt;产品本身是好产品，但基于以上，我认为这次能以一个完全第三人角度（尽量）去观察这个产品的发展，一群无头苍蝇的坎坷产品路：怎么从乱猜步入到醒悟，是什么契机让产品觉醒而达到那个光明的未来；又或者。。。。&lt;/p&gt;
&lt;p&gt;于是今天决定blog新增一个Category：“不靠谱产品日记”，用来记录这个产品的进程。&lt;/p&gt;</summary><category term="产品"></category></entry></feed>