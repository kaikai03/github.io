<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>kairns`s Blog</title><link href="/" rel="alternate"></link><link href="/feeds/pydev.atom.xml" rel="self"></link><id>/</id><updated>2016-01-08T17:48:00+08:00</updated><entry><title>圆形上标</title><link href="/2016/CircleBadge_2016_01_08_17_48.html" rel="alternate"></link><updated>2016-01-08T17:48:00+08:00</updated><author><name>kai_kai03</name></author><id>tag:,2016-01-08:2016/CircleBadge_2016_01_08_17_48.html</id><summary type="html">&lt;p&gt;就你们主页看到tag的数量（如果我还没把这块改掉的话），今天更新了下pelican，标签云出问题了，索性去掉tag_cloud插件，还原会最原始的tag读取方式，但样式看着太单调，于是把tag_cloud的badge改成圆形上标（第一反应就是这样，iOS用多了.....）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="nc"&gt;.tagcloud&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nc"&gt;.badge&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;vertical-align&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;font-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;text-align&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;text-indent&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;background-position&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-30px&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;display&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="JavaScript"></category><category term="CSS"></category></entry><entry><title>flask_socketio</title><link href="/2015/flask_socketio_2015_12_31_17_05.html" rel="alternate"></link><updated>2015-12-31T17:05:00+08:00</updated><author><name>kai_kai03</name></author><id>tag:,2015-12-31:2015/flask_socketio_2015_12_31_17_05.html</id><summary type="html">&lt;h2&gt;牢骚&lt;/h2&gt;
&lt;p&gt;因为在线舞台产品--咪啪中有一个弹幕的需求，平台开发的同事那边实在搞不定rtmp的信息流。为了效果演示，我先将就用html5的canvas来做一个临时的。&lt;/p&gt;
&lt;p&gt;这里面需要用到web通信，突然就想到年初做webRtc demo用的WebSocket了。&lt;/p&gt;
&lt;p&gt;之前WebSocket的后台用Node.js来做，而现在咪啪这个产品正式后台是java的、临时测试及调试后台是python的，于是去搜了搜，Flask加上Flask-SocketIO后可以支持WebSocket。前端用socket.io，可以简化开发。&lt;/p&gt;
&lt;h2&gt;正文&lt;/h2&gt;
&lt;p&gt;Flask-SocketIO用起来真是超方便。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;@socketio.on(&amp;#39;event&amp;#39;) #指定监听的时间
def foo(data): #data是前端发来的一个json
    pass
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;前端发来一个加入房间的事件消息&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;socket&lt;/span&gt;&lt;span class="nc"&gt;.emit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;join&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;平台这边通过设定时间监听，执行对应函数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;@socketio.on(&amp;#39;join&amp;#39;)
def on_join(data):
    # 加入到socketio提供的一个“用户列队”中
    join_room(data[&amp;#39;room&amp;#39;]) 
    # 返回消息，告知用户“你加入xxxx号房间成功”
    emit(&amp;#39;you have joined room&amp;#39;, {&amp;#39;data&amp;#39;: data[&amp;#39;room&amp;#39;]})
    # 广播一条消息，告知所有房间内的用户“谁谁谁来了”
    emit(&amp;#39;broadcast&amp;#39;,str(data[&amp;#39;id&amp;#39;]) + &amp;#39; has entered the room.&amp;#39;, room = data[&amp;#39;room&amp;#39;], broadcast = True)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;弹幕消息广播呢，我这么写，其实就比上面多一个&lt;code&gt;include_self&lt;/code&gt;,看过弹幕站的都知道，自己肯定可以看到自己的发言啦&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;@socketio.on(&amp;#39;say&amp;#39;)
def on_say(data):
    emit(&amp;#39;broadcast&amp;#39;, data[&amp;#39;content&amp;#39;], room = data[&amp;#39;room&amp;#39;], broadcast = True, include_self = True)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后用户掉线的时候别忘了用户退出或者掉线的时候，让用户“退出房间”&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;@socketio.on(&amp;#39;disconnect&amp;#39;)
@socketio.on(&amp;#39;leave&amp;#39;)
def on_leave(data):
    leave_room(data[&amp;#39;room&amp;#39;])
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;flask-socketio 开发手册&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://flask-socketio.readthedocs.org/en/latest/"&gt;地址&lt;/a&gt;&lt;/p&gt;</summary><category term="Flask-SocketIO"></category><category term="Flask"></category><category term="JavaScript"></category><category term="WebSocket"></category><category term="Web"></category><category term="Python"></category></entry><entry><title>PyCon 上海</title><link href="/2015/PyCon_2015_09_12_23_41.html" rel="alternate"></link><updated>2015-09-12T23:41:00+08:00</updated><author><name>kai_kai03</name></author><id>tag:,2015-09-12:2015/PyCon_2015_09_12_23_41.html</id><summary type="html">&lt;h2&gt;PyCon 可以改名成 AdCon 了&lt;/h2&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;嗯，在张江商业办公楼里，会场够大。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;起初的感觉是:不愧是收费的会议，还有一堆赞助商。
&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;结果，这么大个会场，这么烂的屏幕显示效果，而且还有屏幕两边大部分位置居然一直在播广告。fuck，这现场体验还没随便去个学校礼堂来得好。
&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;本来就指着这个是收费会议，而且今年还涨价了，能有点干货，结果听下来，全是广告宣讲，跟招聘会似的。没有好好做功课就跑过去我错了fuck。
&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;实在受不了午饭没吃就跑回来了，what a fucking day.&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;ps:听后来还在会场坚持的朋友说，下午那ES相关的内容，嗯，翻墙的电话会议，连接不稳定，又卡又断。
&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;这组织方，呵呵！！&lt;/p&gt;</summary><category term="PyCon"></category><category term="fuck"></category><category term="Python"></category></entry><entry><title>PEP 0498: Literal String Formatting</title><link href="/2015/Literal_String_Formatting_2015_08_28_10_20.html" rel="alternate"></link><updated>2015-08-28T10:20:00+08:00</updated><author><name>kai_kai03</name></author><id>tag:,2015-08-28:2015/Literal_String_Formatting_2015_08_28_10_20.html</id><summary type="html">&lt;h2&gt;PEP 0498: Literal String Formatting&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Fred&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;anniversary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1991&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;My name is {name}, my age next year is {age+1}, my anniversary is {anniversary:%A, %B &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;, %Y}.&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;My name is Fred, my age next year is 51, my anniversary is Saturday, October 12, 1991.&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;He said his name is {name!r}.&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;He said his name is &amp;#39;Fred&amp;#39;.&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;终于要加了么，在其他语言上用的感觉不错，简介的。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;嗯.....就在写这篇博文的时候突然想起来，现在你看到这个网页的生成模版就类似这样的。&lt;/p&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;但是3.x跟我无缘啊。&lt;/p&gt;</summary><category term="PEP"></category><category term="Python"></category></entry><entry><title>汉字转换问题</title><link href="/2015/Encoding_conversion_2015_06_02_19_41.html" rel="alternate"></link><updated>2015-06-02T19:41:00+08:00</updated><author><name>kai_kai03</name></author><id>tag:,2015-06-02:2015/Encoding_conversion_2015_06_02_19_41.html</id><summary type="html">&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;先判断类型&lt;br&gt;
&amp;#160; &amp;#160; &amp;#160; &amp;#160;如果是string，就按latin-1转为bytes，decode utf-8&lt;br&gt;
&amp;#160; &amp;#160; &amp;#160; &amp;#160;如果本身就是bytes，直接decode就行了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt;s=&amp;#39;\xe7\xa9\xbf\xe5\xb1\xb1\xe7\x94\xb2\xe5\x88\xb0\xe5\xba\x95\xe8\xaf\xb4\xe4\xba\x86\xe4\xbb\x80\xe4\xb9\x88\xef\xbc\x9f&amp;#39;
&amp;gt;&amp;gt;&amp;gt; s.encode(&amp;#39;latin-1&amp;#39;).decode(&amp;#39;utf-8&amp;#39;)
&amp;#39;穿山甲到底说了什么？&amp;#39;
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt;s=b&amp;#39;\xe7\xa9\xbf\xe5\xb1\xb1\xe7\x94\xb2\xe5\x88\xb0\xe5\xba\x95\xe8\xaf\xb4\xe4\xba\x86\xe4\xbb\x80\xe4\xb9\x88\xef\xbc\x9f&amp;#39;
&amp;gt;&amp;gt;&amp;gt; s.decode(&amp;#39;utf-8&amp;#39;)
&amp;#39;穿山甲到底说了什么？&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第一个s是string，第二个s是bytes&lt;/p&gt;
&lt;p&gt;错误的例子：    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt;s=&amp;#39;\xe7\xa9\xbf\xe5\xb1\xb1\xe7\x94\xb2\xe5\x88\xb0\xe5\xba\x95\xe8\xaf\xb4\xe4\xba\x86\xe4\xbb\x80\xe4\xb9\x88\xef\xbc\x9f&amp;#39;
&amp;gt;&amp;gt;&amp;gt;s.encode(&amp;#39;utf-8&amp;#39;).decode(&amp;#39;utf-8&amp;#39;)
&amp;#39;ç©¿å±±ç\x94²å\x88°åº\x95è¯´äº\x86ä»\x80ä¹\x88ï¼\x9f&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用 utf-8 或者 ascii 来 encode 都是不对的&lt;/p&gt;</summary><category term="encode"></category><category term="unicode"></category><category term="GBK"></category><category term="Python"></category></entry><entry><title>Flask Web Development(7)</title><link href="/2015/Flask_Web_Development_2015_04_25_00_26.html" rel="alternate"></link><updated>2015-04-25T00:26:00+08:00</updated><author><name>tangyefei</name></author><id>tag:,2015-04-25:2015/Flask_Web_Development_2015_04_25_00_26.html</id><summary type="html">&lt;h2&gt;《Flask Web Development》--第7章 大型应用程序架构&lt;/h2&gt;
&lt;p&gt;把一个小应用程序的代码都放在一起会很方便，但是不利于扩展，尤其当项目开始变大时在一个文件中工作就会带来一些问题。不像其他框架，Flask应用程序没有特定的组织方式，选择权完全交给了使用者。本章会介绍一种按照包和模块来组织大型应用程序的方法，并会在本书剩余的章节都采用这种结构。&lt;/p&gt;
&lt;h3&gt;项目结构&lt;/h3&gt;
&lt;p&gt;一个Flask应用程序的布局：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;|-flashy
  |-app/
    |-templates/
    |-static/
    |-main/
      |-__init__.py
      |-errors.py
      |-forms.py
      |-views.py
    |-__init__.py
    |-email.py
    |-models.py
  |-migrations/
  |-tests/
    |-__init__.py
    |-test*.py
  |-venv.
  |-requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;顶级有四个文件夹，分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Flask应用程序所在的包通常被命名为app&lt;/li&gt;
&lt;li&gt;数据库迁移相关的脚本被放置在migration&lt;/li&gt;
&lt;li&gt;单元测试写在在tests&lt;/li&gt;
&lt;li&gt;venv包含了Python的虚拟环境&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同样，增加了一些新的文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;requirements.txt 列举了依赖的包方便在新的电脑中对虚拟环境快速进行配置&lt;/li&gt;
&lt;li&gt;config.py 存储了应用程序的配置参数&lt;/li&gt;
&lt;li&gt;manage.py 用于启动应用程序以及做一些其他任务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了更好地理解这样的布局方式，后面的部分会介绍如何从一个只有hello.py的程序扩展到上图所示的结构。&lt;/p&gt;
&lt;h3&gt;配置选项&lt;/h3&gt;
&lt;p&gt;应用程序需要一些配置，比如对于开发、测试、产品会需要不同的数据库那样才不会相互影响。和单文件版本中在&lt;em&gt;hello.py&lt;/em&gt;中写所有的配置不同，我们能够用类层级的方式来组织配置：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;config.py&lt;/em&gt;: 
Application configuration&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="n"&gt;basedir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SECRET_KEY&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hard to guess string&amp;#39;&lt;/span&gt; 
    &lt;span class="n"&gt;SQLALCHEMY_COMMIT_ON_TEARDOWN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="n"&gt;FLASKY_MAIL_SUBJECT_PREFIX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[Flasky]&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;FLASKY_MAIL_SENDER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Flasky Admin &amp;lt;flasky@example.com&amp;gt;&amp;#39;&lt;/span&gt; 
    &lt;span class="n"&gt;FLASKY_ADMIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FLASKY_ADMIN&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;init_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
        &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DevelopmentConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="n"&gt;MAIL_SERVER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;smtp.googlemail.com&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;MAIL_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;587&lt;/span&gt;
    &lt;span class="n"&gt;MAIL_USE_TLS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="n"&gt;MAIL_USERNAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MAIL_USERNAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;MAIL_PASSWORD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MAIL_PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;SQLALCHEMY_DATABASE_URI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DEV_DATABASE_URL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; \
        &lt;span class="s1"&gt;&amp;#39;sqlite:///&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;basedir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;data-dev.sqlite&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestingConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="n"&gt;TESTING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="n"&gt;SQLALCHEMY_DATABASE_URI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;TEST_DATABASE_URL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; \ &lt;span class="s1"&gt;&amp;#39;sqlite:///&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;basedir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;data-test.sqlite&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProductionConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;SQLALCHEMY_DATABASE_URI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DATABASE_URL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; \
        &lt;span class="s1"&gt;&amp;#39;sqlite:///&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;basedir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;data.sqlite&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;development&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DevelopmentConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;testing&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TestingConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;production&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ProductionConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DevelopmentConfig&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Config基类包含了对所有配置通用的设置，不同的配置子类则定义了特有的设置。随需求变更还能增加其他配置子类。&lt;/p&gt;
&lt;p&gt;为了让配置更灵活、安全，一些配置参数可以从环境变量中导入，比如SECRET_KEY考虑到安全性，可以存储在环境变量中，并且在配置脚本中提供了一个默认值以防环境变量没有设置它。&lt;/p&gt;
&lt;p&gt;在三套不同的配置中，SQLALCHEMY_DATABASE_URI被赋予了不同的值，这样运行在三套不同配置下的应用程序都使用了不同的数据库。&lt;/p&gt;
&lt;p&gt;配置类定义了类方法&lt;code&gt;init_app()&lt;/code&gt;，它接受一个应用程序实例作为参数。这样特殊的配置就能够执行了（&lt;code&gt;注：原文是 Here configuration-specific initialization can performed 没明白init_app()这个方法跟特殊配置起不起作用有什么关系，至少在本章中的例子中没有体现出来&lt;/code&gt;）。当前，仅Config类实现了一个空的&lt;code&gt;init_app()&lt;/code&gt;方法。&lt;/p&gt;
&lt;p&gt;在配置文件的底部不同的配置被添加到了字典中，并且开发环境的配置被设置成了默认的。&lt;/p&gt;
&lt;h3&gt;应用程序包App&lt;/h3&gt;
&lt;p&gt;应用程序包app是所有应用程序代码、模板、静态资源文件存放的地方，当然你也可以根据项目需求取别的名字。模板和资源文件的文件夹都被放入了app中，数据库对应的models和邮件支持功能模块则分别对应&lt;em&gt; app/models.py&lt;/em&gt; 和 &lt;em&gt;app/email.py&lt;/em&gt;。&lt;/p&gt;
&lt;h3&gt;使用工厂方法来构建应用示例&lt;/h3&gt;
&lt;p&gt;在单文件版本中创建应用程序实例很方便，但是通常会有缺陷。因为应用程序实例在全局作用于下被创建，而实例被创建后是没办法动态修改配置的。 尤其在做单元测试时，因为要跑不同的数据库，所以我们要应用不同的配置。&lt;/p&gt;
&lt;p&gt;解决办法就是通过使用工厂方法延迟应用程序实例的创建，这样不仅仅是延迟了创建时间还让脚本有创建多个应用程序实例的能力，这对于测试尤其有用。&lt;/p&gt;
&lt;p&gt;app包导入了Flask目前会用到的扩展，但因为应用程序实例还没有被构建出来，它们都还没有被正确初始化。&lt;code&gt;create_app()&lt;/code&gt;这个工厂方法接受一个配置名称作为参数，通过使用Flask提供的app.config的&lt;code&gt;from_object()&lt;/code&gt;方法，我们就能从&lt;em&gt;config.py&lt;/em&gt;中导入所需要的配置。一旦应用程序实例被创建出来，扩展就能够通过调用&lt;code&gt;init_app()&lt;/code&gt;来完成初始化。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;app/&lt;strong&gt;init&lt;/strong&gt;.py&lt;/em&gt;: 
Application package constructor&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt; 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask.ext.bootstrap&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bootstrap&lt;/span&gt; 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask.ext.mail&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Mail&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask.ext.moment&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Moment&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask.ext.sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SQLAlchemy&lt;/span&gt; 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;

&lt;span class="n"&gt;bootstrap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Bootstrap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;mail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mail&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;moment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Moment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SQLAlchemy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;config_name&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; 
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;config_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;bootstrap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;moment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# attach routes and custom error pages here&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;工厂方法返回的应用程序实例还不完整，因它们没有包含路由和错误处理功能，下一节会介绍如何解决这个问题。&lt;/p&gt;
&lt;h3&gt;使用Blueprint来实现应用程实例的功能&lt;/h3&gt;
&lt;p&gt;用工厂方法构建应用程序实例会给路由设置带来一些麻烦。单脚本应用中，应用程序实例是全局的，路由能简单地用app.route decorator来定义。但是现在应用程序实例是运行时创建的，app.route decorator只在在create_app()以后才存在，除此之外app.errorhandler decorator也有同样的问题。&lt;/p&gt;
&lt;p&gt;Flask提供的解决方案是使用blueprints来解决这个问题。blueprints跟application类似，也能定义路由。不同之处是它的路由都处于休眠状态，直到它被注册到应用程序实例后路由才是它的一部分。&lt;/p&gt;
&lt;p&gt;blueprint在全局作用域下使用，因此我们完全可以像在单文件中那样使用路由。当然你既能通过单文件也能通过更加组织良好的方式。为了达到最大程度的便利性，一个子包结构被创建用于管理blueprint。Example 7-4展示了在这个main包中如何创建blueprint：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;app/main/init.py&lt;/em&gt;: 
Blueprint creation&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Blueprint&lt;/span&gt;
&lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Blueprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;main&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;blueprints被创建为Blueprint的实例对象，构造函数有两个参数：blueprint的名字和它所在的模块或者包，在这个应用程序中，Python的 __name__ 变量就是第二个参数所需要的值。&lt;/p&gt;
&lt;p&gt;应用程序的路由被存储在app/main/views.py模块中， 错误处理则在app/main/errors.py。导入这些模块以后，路由和错误处理就和blueprint关联起来了。&lt;/p&gt;
&lt;p&gt;有一点要注意路由和错误处理模块是在app/__init__.py的底部被导入的，因为&lt;em&gt;views.py &lt;/em&gt;和 &lt;em&gt;errors.py&lt;/em&gt;要导入main blueprint，所以为了避免循环依赖我们要等到main被创建出来才能够导入路由和错误处理。&lt;/p&gt;
&lt;p&gt;blueprint在&lt;code&gt;create_app()&lt;/code&gt;方法内被注册到应用程序实例中：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;app/&lt;strong&gt;init&lt;/strong&gt;.py&lt;/em&gt;: 
Blueprint registration&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;main&lt;/span&gt; 
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;main&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;main_blueprint&lt;/span&gt;      
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_blueprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main_blueprint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;错误处理&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;app/main/errors.py&lt;/em&gt;: 
Blueprint with error handlers&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt; 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="nd"&gt;@main.app_errorhandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;page_not_found&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;404.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;

&lt;span class="nd"&gt;@main.app_errorhandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;internal_server_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;500.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在blueprint使用错误处理，如果使用&lt;code&gt;@app.errorhandler&lt;/code&gt;，只有由blueprint定义的路由中导致的错误才会触发对应的handler，如果想要错误处理对整个应用程序可用，我们需要使用&lt;code&gt;@main.app_errorhandler&lt;/code&gt;。&lt;/p&gt;
&lt;h3&gt;使用blueprint方式的路由&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;app/main/views.py&lt;/em&gt;: 
Blueprint with application routes&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url_for&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.forms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;NameForm&lt;/span&gt; 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;..&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;..models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;

&lt;span class="nd"&gt;@main.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; 
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NameForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;validate_on_submit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="c1"&gt;# ...&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.index&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                           &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                           &lt;span class="n"&gt;known&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;known&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                           &lt;span class="n"&gt;current_time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在blueprint中使用视图方法跟之前有两个不同的地方。第一个是route是来自blueprint，即-使用&lt;code&gt;@main.route&lt;/code&gt;，第二个是&lt;code&gt;url_for()&lt;/code&gt;方法的使用。在前面介绍过&lt;code&gt;url_for()&lt;/code&gt;的参数默认是视图方法的名称，比如在单脚本应用中&lt;code&gt;index()&lt;/code&gt;这个视图方法的URL能够通过&lt;code&gt;url_for('index')&lt;/code&gt;获取到。&lt;/p&gt;
&lt;p&gt;在blueprints中区别在于所有的作用域都来自于blueprint（作用域就是blueprint的名称，即Blueprint构造函数的第一个参数），因此&lt;code&gt;index()&lt;/code&gt;视图方法需要通过&lt;code&gt;main.index&lt;/code&gt;来获取到URL，即&lt;code&gt;url_for('main.index')&lt;/code&gt;。&lt;code&gt;url_for()&lt;/code&gt;方法同样支持参数的更短形式，通过将blueprint名字省略，我们可以简写为&lt;code&gt;url_for('.index')&lt;/code&gt;。当然如果跨越不同的blueprints，blueprint的名字还是要加上的。&lt;/p&gt;
&lt;p&gt;为了完成应用程序，我们还需要在&lt;em&gt;app/main/forms.py&lt;/em&gt;模块导入form相关的一些对象。&lt;/p&gt;
&lt;h3&gt;启动脚本&lt;/h3&gt;
&lt;p&gt;在顶层文件夹下的&lt;em&gt;manage.py&lt;/em&gt;是用来启动application的：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;manage.py&lt;/em&gt;: 
Launch script&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;create_app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Role&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask.ext.script&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Manager&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Shell&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask.ext.migrate&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Migrate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MigrateCommand&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FLASK_CONFIG&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;manager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Manager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;migrate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Migrate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_shell_context&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Role&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Role&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;shell&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Shell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;make_context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;make_shell_context&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;db&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MigrateCommand&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;该脚本首先创建应用程序实例，然后从系统环境中读取&lt;code&gt;FLASK_CONFIG&lt;/code&gt;变量，如果该变量没有定义则使用默认值。然后&lt;code&gt;Flask-Script&lt;/code&gt;, &lt;code&gt;Flask-Migrate&lt;/code&gt;等扩展的实例都被初始化。为了方便在Unix-based系统下运行我们增加了第一行。&lt;/p&gt;
&lt;h3&gt;Requirements文件&lt;/h3&gt;
&lt;p&gt;Applications应该包含一个&lt;em&gt;requirements.txt&lt;/em&gt;，它记录了有着准确版本号的所有包依赖，这对以在其他电脑上初始化项目环境很重要。通过如下命令能够自动生成一个项目用到的包的&lt;em&gt;requirement.txt&lt;/em&gt;文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(venv) $ pip freeze &amp;gt;requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在一个新的环境中，你如果要复制虚拟环境中的安装包，只需要执行如下命令即可：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(venv) $ pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;该书示例中的requirement.txt中的包可能有一些已经过时了，你可以选择更加新版的包。如果因此遇到了什么问题，只要回退到老版本即可，因为老版本的都是通过了测试和应用程序兼容的。&lt;/p&gt;
&lt;h3&gt;单元测试&lt;/h3&gt;
&lt;p&gt;到目前应用程序还很小，几乎还没有什么要测试的，我们先来写一个小的测试例子：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;tests/test_basics.py&lt;/em&gt;: 
Unit tests&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;current_app&lt;/span&gt; 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;create_app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BasicsTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;testing&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app_context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app_context&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app_context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tearDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop_all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app_context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_app_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_app&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_app_is_testing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;TESTING&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;测试是按照Python包中的典型的单元测试的写法来构建的，&lt;code&gt;setUp()&lt;/code&gt; 和 &lt;code&gt;tearDown()&lt;/code&gt; 方法在每个测试方法执行前后都会运行，任何以&lt;code&gt;test_&lt;/code&gt; 开头的方法都会被当做测试方法来执行。关于使用Python包来做单元测试的更多信息可以查看official documentation。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;setUp()&lt;/code&gt;方法创建了测试所需的环境， 他首先创建了应用程序实例用作测试的山下文环境，这样就能确保测试拿到current_app, 然后新建了一个全新的数据库。数据库和应用程序实例最后都会在&lt;code&gt;tearDown()&lt;/code&gt; 方法被销毁。&lt;/p&gt;
&lt;p&gt;第一个测试确保了应用程序实例是存在的，第二个测试应用程序实例在测试配置下运行。为了确保测试文件夹有正确的包结构，我们需要添加一个&lt;em&gt;tests/&lt;strong&gt;init&lt;/strong&gt;.py&lt;/em&gt;文件（注：涉及Python包相关知识），这样单元测试包就能扫描所有在测试文件夹中的模块了。&lt;/p&gt;
&lt;p&gt;你可以把代码checkout到7a的历史节点，并且执行 pip install -r requirements.txt 来确保你安装了所需要的包。为了运行测试用例，还需要添加命令到manage.py中：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;manage.py&lt;/em&gt;: 
Unit test launcher command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@manager.command&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Run the unit tests.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;
    &lt;span class="n"&gt;tests&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestLoader&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;discover&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tests&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextTestRunner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;verbosity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;manager.command decorator&lt;/code&gt;所对应的方法名字就是命令的名字，并且方法的文档信息会被显示在help中，&lt;code&gt;test()&lt;/code&gt; 的实现调用了unittest package包的&lt;code&gt;test runner&lt;/code&gt;。如下是运行过程：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(venv) $ python manage.py test
test_app_exists (test_basics.BasicsTestCase) ... ok
test_app_is_testing (test_basics.BasicsTestCase) ... ok
.----------------------------------------------------------------------
Ran 2 tests in 0.001s
OK
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;数据库设置&lt;/h3&gt;
&lt;p&gt;重构后的应用程序使用了跟单文件本版本中完全不同的数据库。数据库URL会首先从环境变量中获取，然后把默认的SQLite数据库作为备选，在三个配置环境下数据库的名字是不同的。&lt;/p&gt;
&lt;p&gt;不论数据库的URL是什么，只要是转换到一个新的数据库数，据库表一定要被重新创建（&lt;code&gt;注：原文Regardless of the source of the database URL, the database tables must be created for the new database 不完全理解&lt;/code&gt;）。使用Flask-Migrate进行迁移管理的过程中，数据库表能够通过如下命令被新建或者upgrade：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(venv) $ python manage.py db upgrade
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第一部分的内容到此算是结束了，我们已经基本介绍了使用Flask来创建应用程序的所有知识，但是你也许仍旧不确定如何将他们捏合在一起。第二部分的目标就是帮助你完成一个应用程序的开发。&lt;/p&gt;</summary><category term="Flask"></category><category term="Python"></category><category term="Web"></category></entry><entry><title>Flask Web Development(6)</title><link href="/2015/Flask_Web_Development_2015_04_24_20_55.html" rel="alternate"></link><updated>2015-04-24T20:55:00+08:00</updated><author><name>tangyefei</name></author><id>tag:,2015-04-24:2015/Flask_Web_Development_2015_04_24_20_55.html</id><summary type="html">&lt;h2&gt;《Flask Web Development》--第6章 邮件&lt;/h2&gt;
&lt;p&gt;当某些事件被触发，应用程序通常需要通过邮件方式通知用户。Python的原生包smtplib能够被用于发送邮件，但是Flask的扩展Flask-Mail更好包装了smtplib能够方便地和Flask进行交互。&lt;/p&gt;
&lt;h3&gt;Flask-Mail提供的邮件支持&lt;/h3&gt;
&lt;p&gt;安装&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(venv) $ pip install flask-mail
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;配置server等参数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;app.config[&amp;#39;MAIL_SERVER&amp;#39;] = &amp;#39;smtp.googlemail.com&amp;#39;
app.config[&amp;#39;MAIL_PORT&amp;#39;] = 587
app.config[&amp;#39;MAIL_USE_TLS&amp;#39;] = True
app.config[&amp;#39;MAIL_USERNAME&amp;#39;] = os.environ.get(&amp;#39;MAIL_USERNAME&amp;#39;)
app.config[&amp;#39;MAIL_PASSWORD&amp;#39;] = os.environ.get(&amp;#39;MAIL_PASSWORD&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;配置所用到的用户名和密码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(venv) $ export MAIL_USERNAME=&amp;lt;Gmail username&amp;gt;
(venv) $ export MAIL_PASSWORD=&amp;lt;Gmail password&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过Python Shell发送邮件 mSending Email from the Python Shell&lt;/p&gt;
&lt;p&gt;为了测试上述配置是否有用，可以在shell中测试是否有用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;venv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask.ext.mail&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;index&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mail&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test subject&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;you@example.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;recipients&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;you@example.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text body&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;b&amp;gt;HTML&amp;lt;/b&amp;gt; body&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app_context&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;邮件和应用程序集成 ###&lt;/h3&gt;
&lt;p&gt;配置和定义send_mail：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;app.config[&amp;#39;FLASKY_MAIL_SUBJECT_PREFIX&amp;#39;] = &amp;#39;[Flasky]&amp;#39;
app.config[&amp;#39;FLASKY_MAIL_SENDER&amp;#39;] = &amp;#39;Flasky Admin flasky@example.com&amp;#39;

def send_email(to, subject, template, **kwargs):
    msg = Message(app.config[&amp;#39;FLASKY_MAIL_SUBJECT_PREFIX&amp;#39;] + subject,
                  sender=app.config[&amp;#39;FLASKY_MAIL_SENDER&amp;#39;], recipients=[to])
    msg.body = render_template(template + &amp;#39;.txt&amp;#39;, **kwargs)
    msg.html = render_template(template + &amp;#39;.html&amp;#39;, **kwargs)
    mail.send(msg)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;相应地改写view Function：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;app.config[&amp;#39;FLASKY_ADMIN&amp;#39;] = os.environ.get(&amp;#39;FLASKY_ADMIN&amp;#39;)
#...
@app.route(&amp;#39;/&amp;#39;, methods=[&amp;#39;GET&amp;#39;, &amp;#39;POST&amp;#39;])
def index():
    form = NameForm()
    if form.validate_on_submit():
        user = User.query.filter_by(username=form.name.data).first()
        if user is None:
            user = User(username=form.name.data)
            db.session.add(user)
            session[&amp;#39;known&amp;#39;] = False
            if app.config[&amp;#39;FLASKY_ADMIN&amp;#39;]:
                send_email(app.config[&amp;#39;FLASKY_ADMIN&amp;#39;], &amp;#39;New User&amp;#39;,
                           &amp;#39;mail/new_user&amp;#39;, user=user)
        else:
            session[&amp;#39;known&amp;#39;] = True

        session[&amp;#39;name&amp;#39;] = form.name.data
        form.name.data = &amp;#39;&amp;#39;

        return redirect(url_for(&amp;#39;index&amp;#39;))
    return render_template(&amp;#39;index.html&amp;#39;, form=form, name=session.get(&amp;#39;name&amp;#39;), known=session.get(&amp;#39;known&amp;#39;, False))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;配置系统环境变量：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(venv) $ export FLASKY_ADMIN=&amp;lt;your-email-address&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;发送异步邮件 ###&lt;/h3&gt;
&lt;p&gt;发送邮件的瞬间，页面是没有响应的，为了jiejeu这个问题，邮件发送可以交给后台线程来做：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_async_email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app_context&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FLASKY_MAIL_SUBJECT_PREFIX&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FLASKY_MAIL_SENDER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;recipients&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;thr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;send_async_email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;thr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;thr&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Flask"></category><category term="Python"></category><category term="Web"></category></entry><entry><title>Flask Web Development(4)</title><link href="/2015/Flask_Web_Development_2015_04_24_19_40.html" rel="alternate"></link><updated>2015-04-24T19:40:00+08:00</updated><author><name>tangyefei</name></author><id>tag:,2015-04-24:2015/Flask_Web_Development_2015_04_24_19_40.html</id><summary type="html">&lt;h2&gt;《Flask Web Development》--第4章 表单&lt;/h2&gt;
&lt;p&gt;为了解决表单验证之类的重复和繁琐的问题，可以引入Flask-WTF来让表单使用变得简单（注：如果不使用Flask自带的模板，而是用Angular.js等前端技术本章可以略过，因为表单验证是跟Jinjia2模板紧密关联在一起的）。通过pip安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(venv) $ pip install flask-wtf
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;CSRF&lt;/h3&gt;
&lt;p&gt;CSRF是Cross-Site Request Forgery Protection的缩写，通常发生在一个站点发送请求到另一个受害者登陆的站点时。&lt;/p&gt;
&lt;h3&gt;如何设置保护&lt;/h3&gt;
&lt;p&gt;Flask-WTF对所有表单请求提供保护，为了实现保护你需要像下面这样设置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;app = Flask(__name__)
app.config[&amp;#39;SECRET_KEY&amp;#39;] = &amp;#39;hard to guess string&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;关于上述代码的几点说明： app.config常备用来存储一些配置信息，甚至还能够从文件中导入配置；SECRET_KEY是常用来做加密的变量，它会被用来生成一个token，该token用于每次登陆时候的校验。&lt;/p&gt;
&lt;h3&gt;Form Classes&lt;/h3&gt;
&lt;p&gt;在Flask-WTF中每个表单是一个集成自Form的类，类里面定义了一些列的属性，每个属性又有一个或者多个的校验器。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask.ext.wtf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Form&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wtforms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StringField&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SubmitField&lt;/span&gt; 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wtforms.validators&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Required&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NameForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StringField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;What is your name?&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;validators&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Required&lt;/span&gt;&lt;span class="p"&gt;()])&lt;/span&gt; 
    &lt;span class="n"&gt;submit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SubmitField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Submit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如上，有几点要说明的:&lt;/p&gt;
&lt;p&gt;（1）导入部分有点奇怪，可以参考原文帮助理解 “The Flask-WTF extension is a Flask integration wrapper around the framework-agnostic WTForms package” &lt;/p&gt;
&lt;p&gt;（2）属性部分，StringField会被转换为input[type="field",label="What is your name?"]，提交之前会执Require的validator，其他的属性类也类似对应到HTML的其他组件。&lt;/p&gt;
&lt;p&gt;更具体的组件类和校验器的使用，请参考书籍相应部分或文档。&lt;/p&gt;
&lt;h3&gt;HTML渲染表单&lt;/h3&gt;
&lt;p&gt;将构建的NameForm对象form传递给页面以后，就可以按照下面这种方式是用Form：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;form.name.label&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt; &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;form.name&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my-text-field&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt; 
    &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;form.submit&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过添加id或者class你就可以给这些组件添加样式了，但是要完全使用
Bootstrap的样式，可以导入helper调用wtf.quick_form(form)来快速实现Form的布局：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;templates/index.html&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;extends&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;commonBase.html&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bootstrap/wtf.html&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;wtf&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;Flasky&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;endblock&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="n"&gt;page_content&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;page-header&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}{{&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}}{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;Stranger&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;endif&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;wtf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quick_form&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;endblock&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;index.py&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask.ext.wtf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Form&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wtforms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StringField&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SubmitField&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wtforms.validators&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Required&lt;/span&gt;
&lt;span class="c1"&gt;#...&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SECRET_KEY&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hard to guess string&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;#...&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NameForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StringField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;What is your name?&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;validators&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Required&lt;/span&gt;&lt;span class="p"&gt;()])&lt;/span&gt;
    &lt;span class="n"&gt;submit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SubmitField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Submit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#...&lt;/span&gt;
&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NameForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;表单响应&lt;/h3&gt;
&lt;p&gt;阅读如下这段代码，看看当第一进入页面时候；输入空值时候；输入部位空值的时候各是什么效果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;@app.route(&amp;#39;/&amp;#39;, methods=[&amp;#39;GET&amp;#39;, &amp;#39;POST&amp;#39;])
def index():
    name = None
    form = NameForm()
    if form.validate_on_submit():
        name = form.name.data
        form.name.data = &amp;#39;&amp;#39;
    return render_template(&amp;#39;index.html&amp;#39;, form=form, name=name)
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;重定向和Session&lt;/h3&gt;
&lt;p&gt;在之前的例子中用户进入页面时候发送的是get请求，填写name提交标案以后是post请求，提交完后刷新页面，页面会提示是否离开当前页面。这是因为之前的请求是post的，刷新会导致重新发送该请求（个人电脑上实验没有发生这样的情况）。&lt;/p&gt;
&lt;p&gt;由此引入重定向来解决这个问题，为了防止重定向以后的数据丢失，我们要讲数据存储在session中， index.py改写部分的代码如下所示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url_for&lt;/span&gt;
&lt;span class="c1"&gt;#...&lt;/span&gt;
&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NameForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;validate_on_submit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;消息提示&lt;/h3&gt;
&lt;p&gt;对于错误、确认、警告信息，Flask提供了&lt;code&gt;flash()&lt;/code&gt;方法。使用分为python中调用&lt;code&gt;flask()&lt;/code&gt;和在模板中呈现message两部分；&lt;/p&gt;
&lt;p&gt;&lt;em&gt;index.py&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;#...&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flash&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NameForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;validate_on_submit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;old_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;old_name&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;old_name&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Looks like you have changed your name!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;
        &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;仅在名字发生了更新的时候调用&lt;code&gt;flash()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;templates/commonBase.html&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;get_flashed_messages&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;alert alert-warning&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;button&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;close&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-dismiss=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;alert&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;×&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
        &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
            &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;page_content&lt;/span&gt; &lt;span class="cp"&gt;%}{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之所以选择在commonBase.html是因为flash messages的普遍性，&lt;code&gt;get_flashed_messages()&lt;/code&gt;遍历的是一个请求处理中可能的多个flash调用，新的请求会清除之前请求flash的message。&lt;/p&gt;
&lt;p&gt;在Flask中的表单提交的数据可以通过request.form获取到。&lt;/p&gt;</summary><category term="Flask"></category><category term="Python"></category><category term="Web"></category></entry><entry><title>Flask Web Development(3)</title><link href="/2015/Flask_Web_Development_2015_04_24_17_01.html" rel="alternate"></link><updated>2015-04-24T17:01:00+08:00</updated><author><name>tangyefei</name></author><id>tag:,2015-04-24:2015/Flask_Web_Development_2015_04_24_17_01.html</id><summary type="html">&lt;h2&gt;《Flask Web Development》--第3章 模板&lt;/h2&gt;
&lt;p&gt;View Function有两个任务：（1）处理业务逻辑 （2）返回响应内容。将两者分开管理能够使代码更好容易维护，模板起的就是这么一个作用。本章介绍的模板引擎Jinjia2。&lt;/p&gt;
&lt;h3&gt;Jinjia模板引擎&lt;/h3&gt;
&lt;p&gt;模板只是一些包含文本的字符串，设置的变量标记位最终会被模板引擎用数据替换。要使用Jinjia模板，第一步是定义模板，Jinjia2默然会到templates子目录中寻找模板，所以在该目录下定义两个模板文件：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;templates/index.html:&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello World!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;templates/user.html：&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello &lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;渲染模板&lt;/h3&gt;
&lt;p&gt;如下例子导入渲染模板的方法，然后调用模板方法去注入模板：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;index.py&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/index&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;lt;name&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;启动server以后可以分别访问相对路径&lt;code&gt;/index&lt;/code&gt;和&lt;code&gt;/&amp;lt;name&amp;gt;&lt;/code&gt;索引来查看页面内容结果。&lt;/p&gt;
&lt;h3&gt;变量类型&lt;/h3&gt;
&lt;p&gt;模板中除了接受普通变量，还能接收复杂的数据结构，比如dict、list、obj，修改后的模板如下：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;templates/user.html:&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;A value from a dictionary: &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;mydict&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;key&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;A value from a list: &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;mylist&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;A value from a list, with a variable index: &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;mylist&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;myintvar&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;A value from an object&amp;#39;s method: &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;myobj.somemethod&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;那么对应的在python就要定义一些数据结构：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;index.py&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Human&lt;/span&gt;():
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;somemethod&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;what the fucking world!&amp;#39;&lt;/span&gt;

&lt;span class="nv"&gt;@app&lt;/span&gt;.&lt;span class="n"&gt;route&lt;/span&gt;(&lt;span class="s"&gt;&amp;#39;/&amp;lt;name&amp;gt;&amp;#39;&lt;/span&gt;)
&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;(&lt;span class="nb"&gt;name&lt;/span&gt;):
    &lt;span class="n"&gt;mydict&lt;/span&gt; = {&lt;span class="s"&gt;&amp;quot;key&amp;quot;&lt;/span&gt;: &lt;span class="s"&gt;&amp;quot;To Be or Not To Be&amp;quot;&lt;/span&gt;}
    &lt;span class="n"&gt;mylist&lt;/span&gt; = [&lt;span class="s"&gt;&amp;#39;it&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;is&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;problem&amp;#39;&lt;/span&gt;]
    &lt;span class="n"&gt;myintvar&lt;/span&gt; = &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;myobj&lt;/span&gt; = &lt;span class="n"&gt;Human&lt;/span&gt;()

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;(&lt;span class="s"&gt;&amp;#39;user.html&amp;#39;&lt;/span&gt;, &lt;span class="nb"&gt;name&lt;/span&gt;=&lt;span class="nb"&gt;name&lt;/span&gt;, &lt;span class="n"&gt;mydict&lt;/span&gt;=&lt;span class="n"&gt;mydict&lt;/span&gt;, &lt;span class="n"&gt;mylist&lt;/span&gt;=&lt;span class="n"&gt;mylist&lt;/span&gt;, &lt;span class="n"&gt;myintvar&lt;/span&gt;=&lt;span class="n"&gt;myintvar&lt;/span&gt;, &lt;span class="n"&gt;myobj&lt;/span&gt;=&lt;span class="n"&gt;myobj&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以执行index.py来查看运行结果。&lt;/p&gt;
&lt;p&gt;除了使用复杂的数据结构以外，模板中还能使用&lt;a href="http://jinja.pocoo.org/docs/dev/templates/#builtin-filters"&gt;过滤器&lt;/a&gt;对内容进行过滤，下面是一个将字符内容变为大写的例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;Hello, &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;capitalize&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;控制结构&lt;/h3&gt;
&lt;p&gt;Jinjia2能够使用常见的控制流，如下是常用的集中控制流的简要介绍：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If控制流&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;index.py&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;@app.route(&amp;#39;/flow&amp;#39;)
def flow():
    user = &amp;#39;tangyefei&amp;#39;

    return render_template(&amp;#39;flow.html&amp;#39;, user=user)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;templates/flow.html&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;user&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    Hello, &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;user&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    Hello, stranger&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Loop控制流&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;index.py&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;@app.route(&amp;#39;/loop&amp;#39;)
def loop():
    comments = [&amp;quot;To Be&amp;quot;, &amp;quot;Or&amp;quot;, &amp;quot;Not To Be&amp;quot;]

    return render_template(&amp;#39;loop.html&amp;#39;, comments=comments)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;templates/loop.html&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;comment&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;comments&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;comment&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Macro&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;index.py&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;@app.route(&amp;#39;/macro&amp;#39;)
def macro():
    comments = [&amp;quot;To Be&amp;quot;, &amp;quot;Or&amp;quot;, &amp;quot;Not To Be&amp;quot;]

    return render_template(&amp;#39;macro.html&amp;#39;, comments=comments)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;templates/macro.html&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;macro&lt;/span&gt; &lt;span class="nv"&gt;render_comment&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;comment&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;comment&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endmacro&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
     &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;comment&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;comments&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt;
        &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;macro.render_comment&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;comment&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;外部导入Macro&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;index.py&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;@app.route(&amp;#39;/comments&amp;#39;)
def comments():
    comments = [&amp;quot;To Be&amp;quot;, &amp;quot;Or&amp;quot;, &amp;quot;Not To Be&amp;quot;]

    return render_template(&amp;#39;comments.html&amp;#39;, comments=comments)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;templates/macro.html&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;macro&lt;/span&gt; &lt;span class="n"&gt;render_comment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;endmacro&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;templates&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;comments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;macro.html&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;macro&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;comment&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;comments&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;macro&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render_comment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;endfor&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;模板继承&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;index.py&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;@app.route(&amp;#39;/extends&amp;#39;)
def extends():
    return render_template(&amp;#39;child.html&amp;#39;)

/templates/base.html

&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;head&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;
            &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="cp"&gt;%}{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt;- My Application
        &lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;body&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;/templates/child.html&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;base.html&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt;
    Index
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;head&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;body&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Helll, World!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;集成Bootstrap&lt;/h3&gt;
&lt;p&gt;要使用Bootstrap，最直观的办法是引入对应的css和js文件，在Flask中只需要安装Flask-Bootstrap，然后在模板中继承&lt;em&gt;base.html&lt;/em&gt;就可以使用Bootstrap。如下为安装和使用的一个详细的例子：&lt;/p&gt;
&lt;p&gt;第一步，安装flask-bootstrap&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(venv) $ pip install flask-bootstrap
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第二步，Python文件中使用Bootstrap&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# 引入flask-bootstrap&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask.ext.bootstrap&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bootstrap&lt;/span&gt;

&lt;span class="c1"&gt;# 包裹app&lt;/span&gt;
&lt;span class="n"&gt;bootstrap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Bootstrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 定义View Function&lt;/span&gt;
&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/bootstrap/&amp;lt;name&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bootstrap.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第三步，构建模板覆写提供的三个block&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bootstrap/base.html&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt; Flasky &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;navbar&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;navbar navbar-inverse&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;navigation&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;navbar-header&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;button&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;navbar-toggle&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;data-toggle=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;collapse&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-target=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.navbar-collapse&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sr-only&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Toggle navigation&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;icon-bar&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;icon-bar&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;icon-bar&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;navbar-brand&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Flasky&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;navbar-collapse collapse&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nav navbar-nav&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;page-header&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello, &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Bootstrap还定义了一些其他的Block能够被覆写的，比如下面的例子是一个覆写block script的例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;scripts&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;my-script.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;定制错误页面&lt;/h3&gt;
&lt;p&gt;Flask允许我们基于template来定制错误页面：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;@app.errorhandler(404)
def page_not_found(e):
    return render_template(&amp;#39;404.html&amp;#39;), 404

@app.errorhandler(500)
def internal_server_error(e):
    return render_template(&amp;#39;500.html&amp;#39;), 500
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因为我们引入了Bootstrap，为了保证界面一致性你可能会想直接拷贝Bootstrap的base.html页面来修改一个 404.html。但是更简单的做法是，基于Bootstrap的base.html定制一个tempates/base.html，将一些项目通用的内容放在里面，然后项目页面比如 404.html基础都以此为基础：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;templates/base.html&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bootstrap/base.html&amp;quot;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;Flasky&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;navbar&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;navbar navbar-inverse&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;navigation&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;navbar-header&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;button&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;navbar-toggle&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-toggle=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;collapse&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-target=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.navbar-collapse&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sr-only&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Toggle navigation&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;icon-bar&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;icon-bar&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;icon-bar&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;navbar-brand&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Flasky&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;navbar-collapse collapse&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nav navbar-nav&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;page_content&lt;/span&gt; &lt;span class="cp"&gt;%}{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;templates/404.html&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;commonBase.html&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt; Page Not Found&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;page-header&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Not Found&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以尝试访问一个不存在的地址，看页面是否定位到了我们定制的404页面。
请求跳转&lt;/p&gt;
&lt;p&gt;在代码中我们可能会想获取某个路由，因为很多路由都有参数，一旦路由参数发生变化，直接获取路由的代码就需要更新来保证仍能正常工作。&lt;/p&gt;
&lt;p&gt;为此Flask提供了一个工具方法 &lt;code&gt;url_for&lt;/code&gt; 用来做获取View Function所对应的路由，注意该方法只是用来获取url而不是做跳转的方法:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;url_for(&amp;#39;user&amp;#39;, name=&amp;#39;john&amp;#39;, _external=True)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;该方法会将多余参数凭借到url后面：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# would return /?page=2.
url_for(&amp;#39;index&amp;#39;, page=2)
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;静态文件&lt;/h3&gt;
&lt;p&gt;在Flask中，静态文件会从根目录中的static下去寻找。如下是一个使用图片作为浏览器Tab的Icon的例子，图片可以在Flasky项目中找：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;templates/base.html&lt;/em&gt; 添加代码片段&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;head&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;link rel=&amp;quot;shortcut icon&amp;quot; href=&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;url_for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;static&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;favicon.ico&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; type=&amp;quot;image/x-icon&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;link rel=&amp;quot;icon&amp;quot; href=&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;url_for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;static&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;favicon.ico&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; type=&amp;quot;image/x-icon&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;本地化时间和日期&lt;/p&gt;
&lt;p&gt;用户遍及在世界各地，因此统一用UTC来表示时间日期。但是在每个客户端，用户所看到的时间格式应该有所不同。这个工作最适合交给客户端-浏览器来做，因为浏览器能获取到用户的地区和语言设置。&lt;/p&gt;
&lt;p&gt;有这么一个客户端的js库叫moment.js实现了很多时间日期处理相关的方法，在Flask中可以通过安装flask-moment来使用它。如下是使用的例子：&lt;/p&gt;
&lt;p&gt;第一步，安装&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(venv)$ pip install flask-moment
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第二步，在Python中导入&lt;/p&gt;
&lt;p&gt;&lt;em&gt;index.py&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# 导入moment和local的datetime&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask.ext.moment&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Moment&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;span class="c1"&gt;#...&lt;/span&gt;
&lt;span class="n"&gt;moment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Moment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#...&lt;/span&gt;
&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第三步，在页面中引入和使用&lt;/p&gt;
&lt;p&gt;&lt;em&gt;templates/base.html&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;scripts&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;moment.include_moment&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;templates/index.html&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;The local date and time is &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;moment&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;current_time&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;.format&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;LLL&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;That was &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;moment&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;current_time&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;.fromNow&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;refresh&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;True&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://momentjs.com/docs/#/displaying/"&gt;moment.js&lt;/a&gt;实现了format()、fromNow()、 fromTime()等方法，使用这些方法基本能够构建出友好的客户端代码了。&lt;/p&gt;</summary><category term="Flask"></category><category term="Python"></category><category term="Web"></category></entry><entry><title>Flask Web Development(2)</title><link href="/2015/Flask_Web_Development_2015_04_22_14_56.html" rel="alternate"></link><updated>2015-04-22T14:56:00+08:00</updated><author><name>tangyefei</name></author><id>tag:,2015-04-22:2015/Flask_Web_Development_2015_04_22_14_56.html</id><summary type="html">&lt;h2&gt;《Flask Web Development》--第2章 基础应用的结构&lt;/h2&gt;
&lt;p&gt;本章将开始熟悉一个最基本的Flask应用的不同部分，并自己动手构建一个Flask Web应用。&lt;/p&gt;
&lt;h3&gt;初始化&lt;/h3&gt;
&lt;p&gt;所有Flask的应用程序必须构建一个Flask的对象，然后通过协议将从客户端收到的所有请求交给这个实例进行处理：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="n"&gt;Flask&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;关于Flask中参数的说明：Flask的构造函数只接收一个参数，这里是__name__会指向该程序片段所在的模块。目前只需要知道使用__name__就够了。&lt;/p&gt;
&lt;h3&gt;路由和函数&lt;/h3&gt;
&lt;p&gt;Web客户端请求的链接地址不同，后台会通过route来决定每个链接对应的哪块处理代码。最简单的做法就是使用Flask实例中提供的方法app.route来注册一个方法到路由上：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;@app.route(&amp;#39;/&amp;#39;) 
def index():
return &amp;#39;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello World!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Flask路由上是可以配置动态参数的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;@app.route(&amp;#39;/user/&amp;lt;name&amp;gt;&amp;#39;) 
def user(name):
return &amp;#39;&amp;lt;h1&amp;gt;Hello, %s!&amp;lt;\h1&amp;gt;&amp;#39; % name
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在上例中，尖括号中间的内容是动态的，任何匹配了该形式的URL会映射到这个路由上，然后调用对应的View Function。默认的，传递的参数被当做string处理，当然你也可以执行它们 比如&lt;code&gt;@app.route /user/&amp;lt;int:id&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Server启动&lt;/h3&gt;
&lt;p&gt;应用程序实例有一个run方法用于启动Flask所集成的Web服务器：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;if __name__ == &amp;#39;__main__&amp;#39;: 
    app.run(debug=True)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;if判定条件是为了保证：只有该script被直接执行的时候才去启动server，因为如果该script是被当做模块引入的，那么很可能在其他的script中已经启动过server了。&lt;/p&gt;
&lt;p&gt;启动过后server会一直轮巡检查是否收到有客户端的请求，Mac OS下可以通过ctrl+c 停止server。run方法有很多可选参数可以配置，比如设置&lt;code&gt;debug=True&lt;/code&gt;能够进入调试模式方便查看调试信息。 &lt;/p&gt;
&lt;h3&gt;一个完整的应用&lt;/h3&gt;
&lt;p&gt;在前面的代码片段已经说明了该例子的各个部分，可以尝试在自己的编辑器上构建这么一个hello.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;Hello World!&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;确保保证你是在虚拟环境下运行&lt;em&gt;hello.py&lt;/em&gt;，最后访问 &lt;a href="http://127.0.0.1:5000/"&gt;http://127.0.0.1:5000/&lt;/a&gt; 即可看到Hello World页面。&lt;/p&gt;
&lt;h3&gt;请求的生命周期&lt;/h3&gt;
&lt;h6&gt;应用与请求上下文&lt;/h6&gt;
&lt;p&gt;每个来自客户端的请求处理过程都需要构建一些对象，比如request对象。&lt;/p&gt;
&lt;p&gt;为了将处理请求需要的参数传递给View Function，我们可以给View Function的链接中增加动态参数，但是那样参数一多久会显得混乱了。Flask采用了Context中保存对象的做法，request对象会从context中获取属于当前请求的参数，以方便全局访问一些对象，如下就是一个例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;user_agent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;User-Agent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;p&amp;gt;Your browser is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;user_agent&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当然不同的请求访问到的是不同的request对象，因为Flask中采用了一定的机制保证获取对象的正确获取，逻辑不复杂有兴趣可以细看相应章节。&lt;/p&gt;
&lt;p&gt;在Flask中使用了一个map结构来保存Route和View Function的对应关系，如下示例代码可以查看该map的存储键值对：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;venv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;hello&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url_map&lt;/span&gt;
&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Rule&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HEAD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OPTIONS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Rule&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/static/&amp;lt;filename&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HEAD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OPTIONS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;static&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Rule&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/user/&amp;lt;name&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HEAD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OPTIONS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h6&gt;钩子函数&lt;/h6&gt;
&lt;p&gt;于面向切面编程概念中，我们通常希望请求前、后可能希望做一些通用的处理，在Flask中可以使用一些钩子函数来达到这个目的，Flask提供了四个钩子函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;before_first_request&lt;/li&gt;
&lt;li&gt;before_request&lt;/li&gt;
&lt;li&gt;after_request&lt;/li&gt;
&lt;li&gt;teardown_request&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;钩子函数的一个典型的应用场景是：在第一次请求中通过&lt;code&gt;before_first_reques&lt;/code&gt;t来获取到用户数据存储到Context中，以后请求就可以直接从Context中直接取用户数据了。&lt;/p&gt;
&lt;h6&gt;响应结果&lt;/h6&gt;
&lt;p&gt;返回给前台的数据可以是一个字符串，还可以携带第二个甚至第三个参数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;@app.route(&amp;#39;/&amp;#39;) 
def index():
    return &amp;#39;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Bad Request&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;&amp;#39;, 400
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更好的做法是返回一个response对象：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;make_response&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;This document carries a cookie!&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_cookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;answer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;42&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;还有其他一种方式是直接定位到另一个地址：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://www.example.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;有一中特殊的用法，就是abort，用来再页面处理错误直接返回404：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;abort&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/user/&amp;lt;id&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;Hello, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Flask的扩展&lt;/h3&gt;
&lt;h6&gt;带命令行选项的Flask-Script&lt;/h6&gt;
&lt;p&gt;Flask有大量的用于不同目的的扩展可以使用，如果这些还不满足要求你还可以开发自己的扩展。该部分会介绍如何集成一个用于加强命令行的功能的扩展，使命令行能携带参数。&lt;/p&gt;
&lt;p&gt;第一步，使用pip安装该扩展：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(venv) $ pip install flask-script
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第二步，基于hello.py修改代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="n"&gt;rom&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ext&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Manager&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;manager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Manager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;Hello World!&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第三步，命令行执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(venv) $ python hello.py
usage: hello.py [-?] {shell,runserver} ...

positional arguments:
  {shell,runserver}
    shell            Runs a Python shell inside Flask application context.
    runserver        Runs the Flask development server i.e. app.run()

optional arguments:
      -?, --help         show this help message and exit
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如上，必选参数为runserver/shell, 这里我们要做的是run server。要查看runserver有哪些参数，可以如下方式查看：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(venv) $ python hello.py runserver --help
usage: hello.py runserver [-h] [-t HOST] [-p PORT] [--threaded]
                          [--processes PROCESSES] [--passthrough-errors] [-d]
                          [-r]
Runs the Flask development server i.e. app.run()

optional arguments:
    -h, --help
    -t HOST, --host HOST
    -p PORT, --port PORT
    --threaded
    --processes PROCESSES
    --passthrough-errors
    -d, --no-debug
    -r, --no-reload
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在能够基于命令行直接设置server的host和port等参数了，可以将主机地址设置为0.0.0.0看看：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(venv) $ python hello.py runserver --host 0.0.0.0
* Running on http://0.0.0.0:5000/
* Restarting with reloader
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Flask"></category><category term="Python"></category><category term="Web"></category></entry><entry><title>Python Garbage Collection</title><link href="/2014/Python_Garbage_Collection_2014_10_02_13_03.html" rel="alternate"></link><updated>2014-10-02T13:03:00+08:00</updated><author><name>wklken</name></author><id>tag:,2014-10-02:2014/Python_Garbage_Collection_2014_10_02_13_03.html</id><summary type="html">&lt;h2&gt;Python 垃圾回收机制 ##&lt;/h2&gt;
&lt;h3&gt;概述&lt;/h3&gt;
&lt;p&gt;无论何种垃圾收集机制, 一般都是两阶段: 垃圾检测和垃圾回收.&lt;/p&gt;
&lt;p&gt;在Python中, 大多数对象的生命周期都是通过对象的引用计数来管理的.&lt;/p&gt;
&lt;p&gt;问题: 但是存在循环引用的问题: a 引用 b, b 引用 a, 导致每一个对象的引用计数都不为0, 所占用的内存永远不会被回收&lt;/p&gt;
&lt;p&gt;要解决循环引用: 必需引入其他垃圾收集技术来打破循环引用. Python中使用了标记-清除以及分代收集&lt;/p&gt;
&lt;p&gt;即, Python 中垃圾回收机制: 引用计数(主要), 标记清除, 分代收集(辅助)&lt;/p&gt;
&lt;h3&gt;引用计数&lt;/h3&gt;
&lt;p&gt;引用计数, 意味着必须在每次分配和释放内存的时候, 加入管理引用计数的动作&lt;/p&gt;
&lt;p&gt;引用计数的优点: 最直观最简单, 实时性, 任何内存, 一旦没有指向它的引用, 就会立即被回收&lt;/p&gt;
&lt;h4&gt;计数存储&lt;/h4&gt;
&lt;p&gt;回顾 Python 的对象&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/Python_Garbage_Collection_2014_10_02_13_03/PyObject.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/Python_Garbage_Collection_2014_10_02_13_03/PyVarObject.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;e.g. 引用计数增加以及减少&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;getrefcount&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getrefcount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getrefcount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getrefcount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;计数增加&lt;/h4&gt;
&lt;p&gt;增加对象引用计数, refcnt incr&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#define Py_INCREF(op) (                         \
  _Py_INC_REFTOTAL  _Py_REF_DEBUG_COMMA       \
  ((PyObject*)(op))-&amp;gt;ob_refcnt++)
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;计数减少&lt;/h4&gt;
&lt;p&gt;减少对象引用计数, refcnt desc&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#define _Py_DEC_REFTOTAL        _Py_RefTotal--
#define _Py_REF_DEBUG_COMMA     ,

#define Py_DECREF(op)                                   \
  do {                                                \
      if (_Py_DEC_REFTOTAL  _Py_REF_DEBUG_COMMA       \
      --((PyObject*)(op))-&amp;gt;ob_refcnt != 0)            \
          _Py_CHECK_REFCNT(op)                        \
      else                                            \
      _Py_Dealloc((PyObject *)(op));                  \
  } while (0)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;即, 发现refcnt变成0的时候, 会调用&lt;code&gt;_Py_Dealloc&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
#define _Py_REF_DEBUG_COMMA     ,

#define _Py_Dealloc(op) (                               \
  _Py_INC_TPFREES(op) _Py_COUNT_ALLOCS_COMMA          \
  (*Py_TYPE(op)-&amp;gt;tp_dealloc)((PyObject *)(op)))
#endif /* !Py_TRACE_REFS */
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;会调用各自类型的&lt;code&gt;tp_dealloc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;例如dict&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;PyTypeObject PyDict_Type = {
    PyVarObject_HEAD_INIT(&amp;amp;PyType_Type, 0)
    &amp;quot;dict&amp;quot;,
    sizeof(PyDictObject),
    0,
    (destructor)dict_dealloc,                   /* tp_dealloc */
    ....
}

static void
dict_dealloc(register PyDictObject *mp)
{
    .....
    // 如果满足条件, 放入到缓冲池freelist中
    if (numfree &amp;lt; PyDict_MAXFREELIST &amp;amp;&amp;amp; Py_TYPE(mp) == &amp;amp;PyDict_Type)
        free_list[numfree++] = mp;
    // 否则, 调用tp_free
    else
        Py_TYPE(mp)-&amp;gt;tp_free((PyObject *)mp);
    Py_TRASHCAN_SAFE_END(mp)
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python基本类型的&lt;code&gt;tp_dealloc&lt;/code&gt;, 通常都会与各自的缓冲池机制相关, 释放会优先放入缓冲池中(对应的分配会优先从缓冲池取). 这个内存分配与回收同缓冲池机制相关&lt;/p&gt;
&lt;p&gt;当无法放入缓冲池时, 会调用各自类型的&lt;code&gt;tp_free&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;int, 比较特殊&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;// int, 通用整数对象缓冲池机制
(freefunc)int_free,                         /* tp_free */
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;string&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;// string
PyObject_Del,                               /* tp_free */
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;dict/tuple/list&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;PyObject_GC_Del,                            /* tp_free */
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后, 我们再回头看, 自定义对象的&lt;code&gt;tp_free&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;PyTypeObject PyType_Type = {
    PyVarObject_HEAD_INIT(&amp;amp;PyType_Type, 0)
    &amp;quot;type&amp;quot;,                                     /* tp_name */
    ...
    PyObject_GC_Del,                            /* tp_free */
};
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;即, 最终, 当计数变为0, 触发内存回收动作. 涉及函数&lt;code&gt;PyObject_Del&lt;/code&gt;和&lt;code&gt;PyObject_GC_Del&lt;/code&gt;, 并且, 自定义类以及容器类型(dict/list/tuple/set等)使用的都是后者&lt;code&gt;PyObject_GC_Del&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;内存回收 PyObject_Del / PyObject_GC_Del&lt;/h4&gt;
&lt;p&gt;如果引用计数=0:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;放入缓冲池&lt;/li&gt;
&lt;li&gt;真正销毁, PyObject_Del/PyObject_GC_Del内存操作&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这两个操作都是进行内存级别的操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PyObject_Del&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;PyObject_Del(op) releases the memory allocated for an object. It does not run a destructor -- it only frees the memory. PyObject_Free is identical.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这块删除, &lt;code&gt;PyObject_Free&lt;/code&gt; 涉及到了Python底层内存的分配和管理机制, 具体见前面的博文&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;PyObject_GC_Del&lt;/p&gt;
&lt;p&gt;void
PyObject_GC_Del(void &lt;em&gt;op)
{
    PyGC_Head &lt;/em&gt;g = AS_GC(op);&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;// Returns true if a given object is tracked
if (IS_TRACKED(op))
    // 从跟踪链表中移除
    gc_list_remove(g);
if (generations[0].count &amp;gt; 0) {
    generations[0].count--;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;PyObject_FREE(g);
}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;IS_TRACKED&lt;/code&gt; 涉及到标记-清除的机制&lt;/p&gt;
&lt;p&gt;&lt;code&gt;generations&lt;/code&gt; 涉及到了分代回收&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PyObject_FREE&lt;/code&gt;, 则和Python底层内存池机制相关&lt;/p&gt;
&lt;h3&gt;标记-清除&lt;/h3&gt;
&lt;h4&gt;问题: 什么对象可能产生循环引用?&lt;/h4&gt;
&lt;p&gt;只需要关注关注可能产生循环引用的对象&lt;/p&gt;
&lt;p&gt;PyIntObject/PyStringObject等不可能&lt;/p&gt;
&lt;p&gt;Python中的循环引用总是发生在container对象之间, 所谓containser对象即是内部可持有对其他对象的引用: list/dict/class/instance等等&lt;/p&gt;
&lt;p&gt;垃圾收集带来的开销依赖于container对象的数量, 必需跟踪所创建的每一个container对象, 并将这些对象组织到一个集合中.&lt;/p&gt;
&lt;h4&gt;可收集对象链表&lt;/h4&gt;
&lt;p&gt;可收集对象链表: 将需要被收集和跟踪的container, 放到可收集的链表中&lt;/p&gt;
&lt;p&gt;任何一个python对象都分为两部分: &lt;code&gt;PyObject_HEAD&lt;/code&gt; + 对象本身数据&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* PyObject_HEAD defines the initial segment of every PyObject. */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;define&lt;span class="w"&gt; &lt;/span&gt;PyObject_HEAD&lt;span class="w"&gt;                   &lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;_PyObject_HEAD_EXTRA&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;Py_ssize_t&lt;span class="w"&gt; &lt;/span&gt;ob_refcnt&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;struct&lt;span class="w"&gt; &lt;/span&gt;_typeobject&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;ob_type&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="o"&gt;//----------------------------------------------------&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;define&lt;span class="w"&gt; &lt;/span&gt;_PyObject_HEAD_EXTRA&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;struct&lt;span class="w"&gt; &lt;/span&gt;_object&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;_ob_next&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;struct&lt;span class="w"&gt; &lt;/span&gt;_object&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;_ob_prev&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;双向链表结构&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;垃圾回收&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可收集对象链表&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Modules/gcmodule.c&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; /* GC information is stored BEFORE the object structure. */
  typedef union _gc_head {
      struct {
          // 建立链表需要的前后指针
          union _gc_head *gc_next;
          union _gc_head *gc_prev;
          // 在初始化时会被初始化为 GC_UNTRACED
          Py_ssize_t gc_refs;
      } gc;
      long double dummy;  /* force worst-case alignment */
  } PyGC_Head;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;创建container的过程: &lt;code&gt;container对象 = pyGC_Head | PyObject_HEAD | Container Object&lt;/code&gt;&lt;/p&gt;
&lt;p PyObject="PyObject" _="
" _op="*op"&gt;PyObject &lt;em&gt;
_PyObject_GC_New(PyTypeObject &lt;/em&gt;tp)&lt;/p&gt;
&lt;p&gt;=&amp;gt; _PyObject_GC_Malloc&lt;/p&gt;
&lt;h1&gt;define _PyGC_REFS_UNTRACKED                    (-2)&lt;/h1&gt;
&lt;h1&gt;define GC_UNTRACKED                    _PyGC_REFS_UNTRACKED&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;PyObject *
_PyObject_GC_Malloc(size_t basicsize)
{
    PyObject *op;
    PyGC_Head *g;
    if (basicsize &amp;gt; PY_SSIZE_T_MAX - sizeof(PyGC_Head))
        return PyErr_NoMemory();

    // 为 对象本身+PyGC_Head申请内存, 注意分配的size
    g = (PyGC_Head *)PyObject_MALLOC(
        sizeof(PyGC_Head) + basicsize);
    if (g == NULL)
        return PyErr_NoMemory();

    // 初始化 GC_UNTRACED
    g-&amp;gt;gc.gc_refs = GC_UNTRACKED;
    generations[0].count++; /* number of allocated GC objects */

    // 如果大于阈值, 执行分代回收
    if (generations[0].count &amp;gt; generations[0].threshold &amp;amp;&amp;amp;
        enabled &amp;amp;&amp;amp;
        generations[0].threshold &amp;amp;&amp;amp;
        !collecting &amp;amp;&amp;amp;
        !PyErr_Occurred()) {

        collecting = 1;
        collect_generations();
        collecting = 0;
    }
    op = FROM_GC(g);
    return op;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;PyObject_HEAD and PyGC_HEAD&lt;/h4&gt;
&lt;p&gt;注意, &lt;code&gt;FROM_GC&lt;/code&gt;和&lt;code&gt;AS_GC&lt;/code&gt;用于 &lt;code&gt;PyObject_HEAD &amp;lt;=&amp;gt; PyGC_HEAD&lt;/code&gt;地址相互转换&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Modules/gcmodule.c&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; /* Get an object&amp;#39;s GC head */
  #define AS_GC(o) ((PyGC_Head *)(o)-1)

  /* Get the object given the GC head */
  #define FROM_GC(g) ((PyObject *)(((PyGC_Head *)g)+1))

objimpl.h

#define _Py_AS_GC(o) ((PyGC_Head *)(o)-1)
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;问题: 什么时候将container放到这个对象链表中&lt;/h4&gt;
&lt;p&gt;e.g list&lt;/p&gt;
&lt;p&gt;&lt;em&gt;listobject.c&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;PyObject *
PyList_New(Py_ssize_t size)
{
    PyListObject *op;
    op = PyObject_GC_New(PyListObject, &amp;amp;PyList_Type);
    _PyObject_GC_TRACK(op);
    return (PyObject *) op;
}

// =&amp;gt;  _PyObject_GC_TRACK

// objimpl.h
// 加入到可收集对象链表中

#define _PyObject_GC_TRACK(o) do { \
    PyGC_Head *g = _Py_AS_GC(o); \
    if (g-&amp;gt;gc.gc_refs != _PyGC_REFS_UNTRACKED) \
        Py_FatalError(&amp;quot;GC object already tracked&amp;quot;); \
    g-&amp;gt;gc.gc_refs = _PyGC_REFS_REACHABLE; \
    g-&amp;gt;gc.gc_next = _PyGC_generation0; \
    g-&amp;gt;gc.gc_prev = _PyGC_generation0-&amp;gt;gc.gc_prev; \
    g-&amp;gt;gc.gc_prev-&amp;gt;gc.gc_next = g; \
    _PyGC_generation0-&amp;gt;gc.gc_prev = g; \
    } while (0);
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;问题: 什么时候将container从这个对象链表中摘除&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;// Objects/listobject.c

static void
list_dealloc(PyListObject *op)
{
    Py_ssize_t i;
    PyObject_GC_UnTrack(op);
    .....
}

// =&amp;gt; PyObject_GC_UnTrack =&amp;gt; _PyObject_GC_UNTRACK

// 对象销毁的时候
#define _PyObject_GC_UNTRACK(o) do { \
    PyGC_Head *g = _Py_AS_GC(o); \
    assert(g-&amp;gt;gc.gc_refs != _PyGC_REFS_UNTRACKED); \
    g-&amp;gt;gc.gc_refs = _PyGC_REFS_UNTRACKED; \
    g-&amp;gt;gc.gc_prev-&amp;gt;gc.gc_next = g-&amp;gt;gc.gc_next; \
    g-&amp;gt;gc.gc_next-&amp;gt;gc.gc_prev = g-&amp;gt;gc.gc_prev; \
    g-&amp;gt;gc.gc_next = NULL; \
    } while (0);
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;问题: 如何进行标记-清除&lt;/h4&gt;
&lt;p&gt;现在, 我们得到了一个链表&lt;/p&gt;
&lt;p&gt;Python将自己的垃圾收集限制在这个链表上, 循环引用一定发生在这个链表的一群独享之间.&lt;/p&gt;
&lt;h5&gt;概览&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;_PyObject_GC_Malloc&lt;/code&gt; 分配内存时, 发现超过阈值, 此时, 会触发gc, &lt;code&gt;collect_generation&lt;/code&gt;s 然后调用collect, collect包含标记-清除逻辑&lt;/p&gt;
&lt;p&gt;&lt;em&gt;gcmodule.c&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  /* This is the main function.  Read this to understand how the
   * collection process works. */
  static Py_ssize_t
  collect(int generation)
  {
    // 第1步: 将所有比 当前代 年轻的代中的对象 都放到 当前代 的对象链表中
    /* merge younger generations with one we are currently collecting */
    for (i = 0; i &amp;lt; generation; i++) {
        gc_list_merge(GEN_HEAD(i), GEN_HEAD(generation));
    }


    // 第2步
    update_refs(young);
    // 第3步
    subtract_refs(young);

    // 第4步
    gc_list_init(&amp;amp;unreachable);
    move_unreachable(young, &amp;amp;unreachable);

    // 第5步
      /* Move reachable objects to next generation. */
      if (young != old) {
          if (generation == NUM_GENERATIONS - 2) {
              long_lived_pending += gc_list_size(young);
          }
          gc_list_merge(young, old);
      }
      else {
          /* We only untrack dicts in full collections, to avoid quadratic
             dict build-up. See issue #14775. */
          untrack_dicts(young);
          long_lived_pending = 0;
          long_lived_total = gc_list_size(young);
      }

    // 第6步
      delete_garbage(&amp;amp;unreachable, old);

  }
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;第一步: gc_list_merge #####&lt;/h5&gt;
&lt;p&gt;将所有比 当前代 年轻的代中的对象 都放到 当前代 的对象链表中&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;=&amp;gt; gc_list_merge

// 执行拷贝而已
/* append list `from` onto list `to`; `from` becomes an empty list */
static void
gc_list_merge(PyGC_Head *from, PyGC_Head *to)
{
    PyGC_Head *tail;
    assert(from != to);
    if (!gc_list_is_empty(from)) {
        tail = to-&amp;gt;gc.gc_prev;
        tail-&amp;gt;gc.gc_next = from-&amp;gt;gc.gc_next;
        tail-&amp;gt;gc.gc_next-&amp;gt;gc.gc_prev = tail;
        to-&amp;gt;gc.gc_prev = from-&amp;gt;gc.gc_prev;
        to-&amp;gt;gc.gc_prev-&amp;gt;gc.gc_next = to;
    }
    // 清空
    gc_list_init(from);
}

=&amp;gt;

static void
gc_list_init(PyGC_Head *list)
{
    list-&amp;gt;gc.gc_prev = list;
    list-&amp;gt;gc.gc_next = list;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;即, 此刻, 所有待进行处理的对象都集中在同一个链表中&lt;/p&gt;
&lt;p&gt;处理,&lt;/p&gt;
&lt;p&gt;其逻辑是, 要去除循环引用, 得到有效引用计数&lt;/p&gt;
&lt;p&gt;有效引用计数: 将循环引用的计数去除, 最终得到的 =&amp;gt; 将环从引用中摘除, 各自引用计数数值-1&lt;/p&gt;
&lt;p&gt;实际操作, 并不要直接修改对象的 &lt;code&gt;ob_refcnt&lt;/code&gt;, 而是修改其副本, &lt;code&gt;PyGC_Head中的gc.gc_ref&lt;/code&gt;&lt;/p&gt;
&lt;h5&gt;第二步: update_refs&lt;/h5&gt;
&lt;p&gt;遍历对象链表, 将每个对象的&lt;code&gt;gc.gc_ref&lt;/code&gt;值设置为&lt;code&gt;ob_refcnt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;gcmodule.c&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;static void
update_refs(PyGC_Head *containers)
{
    PyGC_Head *gc = containers-&amp;gt;gc.gc_next;
    for (; gc != containers; gc = gc-&amp;gt;gc.gc_next) {
        assert(gc-&amp;gt;gc.gc_refs == GC_REACHABLE);
        gc-&amp;gt;gc.gc_refs = Py_REFCNT(FROM_GC(gc));
        /* Python&amp;#39;s cyclic gc should never see an incoming refcount
         * of 0:  if something decref&amp;#39;ed to 0, it should have been
         * deallocated immediately at that time.
         * Possible cause (if the assert triggers):  a tp_dealloc
         * routine left a gc-aware object tracked during its teardown
         * phase, and did something-- or allowed something to happen --
         * that called back into Python.  gc can trigger then, and may
         * see the still-tracked dying object.  Before this assert
         * was added, such mistakes went on to allow gc to try to
         * delete the object again.  In a debug build, that caused
         * a mysterious segfault, when _Py_ForgetReference tried
         * to remove the object from the doubly-linked list of all
         * objects a second time.  In a release build, an actual
         * double deallocation occurred, which leads to corruption
         * of the allocator&amp;#39;s internal bookkeeping pointers.  That&amp;#39;s
         * so serious that maybe this should be a release-build
         * check instead of an assert?
         */
        assert(gc-&amp;gt;gc.gc_refs != 0);
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;第三步: 计算有效引用计数&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  /* A traversal callback for subtract_refs. */
  static int
  visit_decref(PyObject *op, void *data)
  {
      assert(op != NULL);
      // 判断op指向的对象是否是被垃圾收集监控的, 对象的type对象中有Py_TPFLAGS_HAVE_GC符号
      if (PyObject_IS_GC(op)) {
          PyGC_Head *gc = AS_GC(op);
          /* We&amp;#39;re only interested in gc_refs for objects in the
           * generation being collected, which can be recognized
           * because only they have positive gc_refs.
           */
          assert(gc-&amp;gt;gc.gc_refs != 0); /* else refcount was too small */
          if (gc-&amp;gt;gc.gc_refs &amp;gt; 0)
              gc-&amp;gt;gc.gc_refs--;  // -1
      }
      return 0;
  }


  /* Subtract internal references from gc_refs.  After this, gc_refs is &amp;gt;= 0
   * for all objects in containers, and is GC_REACHABLE for all tracked gc
   * objects not in containers.  The ones with gc_refs &amp;gt; 0 are directly
   * reachable from outside containers, and so can&amp;#39;t be collected.
   */
  static void
  subtract_refs(PyGC_Head *containers)
  {
      traverseproc traverse;
      PyGC_Head *gc = containers-&amp;gt;gc.gc_next;
      // 遍历链表
      for (; gc != containers; gc=gc-&amp;gt;gc.gc_next) {
          // 与特定的类型相关, 得到类型对应的traverse函数
          traverse = Py_TYPE(FROM_GC(gc))-&amp;gt;tp_traverse;
          // 调用
          (void) traverse(FROM_GC(gc),
                         (visitproc)visit_decref, // 回调形式传入
                         NULL);
      }
  }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们可以看看dictobject的traverse函数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  static int
  dict_traverse(PyObject *op, visitproc visit, void *arg)
  {
      Py_ssize_t i = 0;
      PyObject *pk;
      PyObject *pv;

      // 遍历所有键和值
      while (PyDict_Next(op, &amp;amp;i, &amp;amp;pk, &amp;amp;pv)) {
          Py_VISIT(pk);
          Py_VISIT(pv);
      }
      return 0;
  }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;逻辑大概是: 遍历容器对象里面的所有对象, 通过&lt;code&gt;visit_decref&lt;/code&gt;将这些对象的引用计数都-1,&lt;/p&gt;
&lt;p&gt;最终, 遍历完链表之后, 整个可收集对象链表中所有container对象之间的循环引用都被去掉了&lt;/p&gt;
&lt;h5&gt;第四步: 垃圾标记&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;move_unreachable&lt;/code&gt;, 将可收集对象链表中, 根据有效引用计数 不等于0(root对象) 和 等于0(非root对象, 垃圾, 可回收), 一分为二&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; /* Move the unreachable objects from young to unreachable.  After this,
   * all objects in young have gc_refs = GC_REACHABLE, and all objects in
   * unreachable have gc_refs = GC_TENTATIVELY_UNREACHABLE.  All tracked
   * gc objects not in young or unreachable still have gc_refs = GC_REACHABLE.
   * All objects in young after this are directly or indirectly reachable
   * from outside the original young; and all objects in unreachable are
   * not.
   */
  static void
  move_unreachable(PyGC_Head *young, PyGC_Head *unreachable)
  {
      PyGC_Head *gc = young-&amp;gt;gc.gc_next;

      /* Invariants:  all objects &amp;quot;to the left&amp;quot; of us in young have gc_refs
       * = GC_REACHABLE, and are indeed reachable (directly or indirectly)
       * from outside the young list as it was at entry.  All other objects
       * from the original young &amp;quot;to the left&amp;quot; of us are in unreachable now,
       * and have gc_refs = GC_TENTATIVELY_UNREACHABLE.  All objects to the
       * left of us in &amp;#39;young&amp;#39; now have been scanned, and no objects here
       * or to the right have been scanned yet.
       */

      while (gc != young) {
          PyGC_Head *next;

          // 对于root object,
          if (gc-&amp;gt;gc.gc_refs) {
              /* gc is definitely reachable from outside the
               * original &amp;#39;young&amp;#39;.  Mark it as such, and traverse
               * its pointers to find any other objects that may
               * be directly reachable from it.  Note that the
               * call to tp_traverse may append objects to young,
               * so we have to wait until it returns to determine
               * the next object to visit.
               */
              PyObject *op = FROM_GC(gc);
              traverseproc traverse = Py_TYPE(op)-&amp;gt;tp_traverse;
              assert(gc-&amp;gt;gc.gc_refs &amp;gt; 0);
              // 设置其gc-&amp;gt;gc.gc_refs = GC_REACHABLE
              gc-&amp;gt;gc.gc_refs = GC_REACHABLE;

              // 注意这里逻辑, visit_reachable, 意图是?
              (void) traverse(op,
                              (visitproc)visit_reachable,
                              (void *)young);
              next = gc-&amp;gt;gc.gc_next;
              if (PyTuple_CheckExact(op)) {
                  _PyTuple_MaybeUntrack(op);
              }
          }
          // 有效引用计数=0, 非root对象, 移动到unreachable链表中
          else {
              /* This *may* be unreachable.  To make progress,
               * assume it is.  gc isn&amp;#39;t directly reachable from
               * any object we&amp;#39;ve already traversed, but may be
               * reachable from an object we haven&amp;#39;t gotten to yet.
               * visit_reachable will eventually move gc back into
               * young if that&amp;#39;s so, and we&amp;#39;ll see it again.
               */
              next = gc-&amp;gt;gc.gc_next;
              gc_list_move(gc, unreachable);
              gc-&amp;gt;gc.gc_refs = GC_TENTATIVELY_UNREACHABLE;
          }
          gc = next;
      }
  }
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;第五步: 将存活对象放入下一代&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  /* Move reachable objects to next generation. */
  if (young != old) {
      if (generation == NUM_GENERATIONS - 2) {
          long_lived_pending += gc_list_size(young);
      }
      gc_list_merge(young, old);
  }
  else {
      /* We only untrack dicts in full collections, to avoid quadratic
         dict build-up. See issue #14775. */
      untrack_dicts(young);
      long_lived_pending = 0;
      long_lived_total = gc_list_size(young);
  }
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;第六步: 执行回收&lt;/h5&gt;
&lt;p&gt;&lt;em&gt;gcmoudle.c&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  static int
  gc_list_is_empty(PyGC_Head *list)
  {
      return (list-&amp;gt;gc.gc_next == list);
  }


  /* Break reference cycles by clearing the containers involved.  This is
   * tricky business as the lists can be changing and we don&amp;#39;t know which
   * objects may be freed.  It is possible I screwed something up here.
   */
  static void
  delete_garbage(PyGC_Head *collectable, PyGC_Head *old)
  {
      inquiry clear;

      // 遍历
      while (!gc_list_is_empty(collectable)) {
          PyGC_Head *gc = collectable-&amp;gt;gc.gc_next;
          // 得到对象
          PyObject *op = FROM_GC(gc);

          assert(IS_TENTATIVELY_UNREACHABLE(op));
          if (debug &amp;amp; DEBUG_SAVEALL) {
              PyList_Append(garbage, op);
          }
          else {
              // 清引用
              if ((clear = Py_TYPE(op)-&amp;gt;tp_clear) != NULL) {
                  Py_INCREF(op);
                  // 这个操作会调整container对象中每个引用所有对象的引用计数, 从而完成打破循环的最终目标
                  clear(op);
                  Py_DECREF(op);
              }
          }

          // 重新送回到reachable链表.
          // 原因: 在进行clear动作, 如果成功, 会把自己从垃圾收集机制维护的链表中摘除, 由于某些原因, 对象可能在clear的时候, 没有成功完成必要动作, 还不能被销毁, 所以放回去
          if (collectable-&amp;gt;gc.gc_next == gc) {
              /* object is still alive, move it, it may die later */
              gc_list_move(gc, old);
              gc-&amp;gt;gc.gc_refs = GC_REACHABLE;
          }
      }
  }

=&amp;gt; 来看下, list的clear

static int
list_clear(PyListObject *a)
{
    Py_ssize_t i;
    PyObject **item = a-&amp;gt;ob_item;
    if (item != NULL) {
        /* Because XDECREF can recursively invoke operations on
           this list, we make it empty first. */
        i = Py_SIZE(a);
        Py_SIZE(a) = 0;
        a-&amp;gt;ob_item = NULL;
        a-&amp;gt;allocated = 0;
        while (--i &amp;gt;= 0) {
            // 减引用
            Py_XDECREF(item[i]);
        }
        PyMem_FREE(item);
    }
    /* Never fails; the return value can be ignored.
       Note that there is no guarantee that the list is actually empty
       at this point, because XDECREF may have populated it again! */
    return 0;
}


// e.g. 处理list3, 调用其list_clear, 减少list4的引用计数, list4.ob_refcnt=0, 引发对象销毁, 调用list4的list_dealloc


static void
list_dealloc(PyListObject *op)
{
    Py_ssize_t i;
    PyObject_GC_UnTrack(op);  //  从可收集对象链表中去除, 会影响到list4所引用所有对象的引用计数, =&amp;gt; list3.refcnt=0, list3的销毁动作也被触发

    Py_TRASHCAN_SAFE_BEGIN(op)
    if (op-&amp;gt;ob_item != NULL) {
        /* Do it backwards, for Christian Tismer.
           There&amp;#39;s a simple test case where somehow this reduces
           thrashing when a *very* large list is created and
           immediately deleted. */
        i = Py_SIZE(op);
        while (--i &amp;gt;= 0) {
            Py_XDECREF(op-&amp;gt;ob_item[i]);
        }
        PyMem_FREE(op-&amp;gt;ob_item);
    }
    if (numfree &amp;lt; PyList_MAXFREELIST &amp;amp;&amp;amp; PyList_CheckExact(op))
        free_list[numfree++] = op;
    else
        Py_TYPE(op)-&amp;gt;tp_free((PyObject *)op);
    Py_TRASHCAN_SAFE_END(op)
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;gc逻辑&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;分配内存
-&amp;gt; 发现超过阈值了
-&amp;gt; 触发垃圾回收
-&amp;gt; 将所有可收集对象链表放到一起
-&amp;gt; 遍历, 计算有效引用计数
-&amp;gt; 分成 有效引用计数=0 和 有效引用计数 &amp;gt; 0 两个集合
-&amp;gt; 大于0的, 放入到更老一代
-&amp;gt; =0的, 执行回收
-&amp;gt; 回收遍历容器内的各个元素, 减掉对应元素引用计数(破掉循环引用)
-&amp;gt; 执行-1的逻辑, 若发现对象引用计数=0, 触发内存回收
-&amp;gt; python底层内存管理机制回收内存
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;分代回收&lt;/h3&gt;
&lt;p&gt;分代收集: 以空间换时间&lt;/p&gt;
&lt;p&gt;思想: 将系统中的所有内存块根据其存货的时间划分为不同的集合, 每个集合就成为一个"代", 垃圾收集的频率随着"代"的存活时间的增大而减小(活得越长的对象, 就越不可能是垃圾, 就应该减少去收集的频率)&lt;/p&gt;
&lt;p&gt;Python中, 引入了分代收集, 总共三个"代". Python 中, 一个代就是一个链表, 所有属于同一"代"的内存块都链接在同一个链表中&lt;/p&gt;
&lt;h4&gt;表头数据结构&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;gcmodule.c&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  struct gc_generation {
      PyGC_Head head;
      int threshold; /* collection threshold */  // 阈值
      int count; /* count of allocations or collections of younger
                    generations */    // 实时个数
  };
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;三个代的定义&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;  #define NUM_GENERATIONS 3&lt;/span&gt;
&lt;span class="x"&gt;  #define GEN_HEAD(n) (&amp;amp;generations[n].head)&lt;/span&gt;

&lt;span class="x"&gt;  //  三代都放到这个数组中&lt;/span&gt;
&lt;span class="x"&gt;  /* linked lists of container objects */&lt;/span&gt;
&lt;span class="x"&gt;  static struct gc_generation generations[NUM_GENERATIONS] = {&lt;/span&gt;
&lt;span class="x"&gt;      /* PyGC_Head,                               threshold,      count */&lt;/span&gt;
&lt;span class="x"&gt;      &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;GEN_HEAD&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="nv"&gt;GEN_HEAD&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;,           700,            0},    //700个container, 超过立即触发垃圾回收机制&lt;/span&gt;
&lt;span class="x"&gt;      &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;GEN_HEAD&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="nv"&gt;GEN_HEAD&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;,           10,             0},    // 10个&lt;/span&gt;
&lt;span class="x"&gt;      &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;GEN_HEAD&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="nv"&gt;GEN_HEAD&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;,           10,             0},    // 10个&lt;/span&gt;
&lt;span class="x"&gt;  };&lt;/span&gt;

&lt;span class="x"&gt;  PyGC_Head *_PyGC_generation0 = GEN_HEAD(0);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;超过阈值, 触发垃圾回收&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; PyObject *
  _PyObject_GC_Malloc(size_t basicsize)
  {
      // 执行分配
      ....
      generations[0].count++; /* number of allocated GC objects */  //增加一个
      if (generations[0].count &amp;gt; generations[0].threshold &amp;amp;&amp;amp; // 发现大于预支了
          enabled &amp;amp;&amp;amp;
          generations[0].threshold &amp;amp;&amp;amp;
          !collecting &amp;amp;&amp;amp;
          !PyErr_Occurred())
          {
              collecting = 1;
              collect_generations();  //  执行收集
              collecting = 0;
          }
      op = FROM_GC(g);
      return op;
  }

=&amp;gt; collect_generations

  static Py_ssize_t
  collect_generations(void)
  {
      int i;
      Py_ssize_t n = 0;

      /* Find the oldest generation (highest numbered) where the count
       * exceeds the threshold.  Objects in the that generation and
       * generations younger than it will be collected. */

      // 从最老的一代, 开始回收
      for (i = NUM_GENERATIONS-1; i &amp;gt;= 0; i--) {  // 遍历所有generation
          if (generations[i].count &amp;gt; generations[i].threshold) {  // 如果超过了阈值
              /* Avoid quadratic performance degradation in number
                 of tracked objects. See comments at the beginning
                 of this file, and issue #4074.
              */
              if (i == NUM_GENERATIONS - 1
                  &amp;amp;&amp;amp; long_lived_pending &amp;lt; long_lived_total / 4)
                  continue;
              n = collect(i); // 执行收集
              break;  // notice: break了
          }
      }
      return n;
  }
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Python 中的gc模块&lt;/h3&gt;
&lt;p&gt;gc模块, 提供了观察和手动使用gc的接口&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;gc&lt;/span&gt;

&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG_STATS&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG_LEAK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意&lt;code&gt;__del__&lt;/code&gt;给gc带来的影响&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;版权声明：自由转载-非商用-非衍生-保持署名 | &lt;a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"&gt;Creative Commons BY-NC-ND 3.0&lt;/a&gt;&lt;/p&gt;</summary><category term="GC"></category><category term="Features"></category><category term="Python"></category></entry><entry><title>Python Memory Management(2)</title><link href="/2014/Python_Memory_Management_2014_09_10_23_17.html" rel="alternate"></link><updated>2014-09-10T23:17:00+08:00</updated><author><name>wklken</name></author><id>tag:,2014-09-10:2014/Python_Memory_Management_2014_09_10_23_17.html</id><summary type="html">&lt;h2&gt;Python 的内存分配策略&lt;/h2&gt;
&lt;h3&gt;arena&lt;/h3&gt;
&lt;p&gt;多个pool聚合的结果。&lt;/p&gt;
&lt;h3&gt;arena size&lt;/h3&gt;
&lt;p&gt;pool的大小默认值位4KB&lt;/p&gt;
&lt;p&gt;arena的大小默认值256KB, 能放置 256/4=64 个pool&lt;/p&gt;
&lt;p&gt;&lt;em&gt;obmalloc.c&lt;/em&gt;中代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#define ARENA_SIZE              (256 &amp;lt;&amp;lt; 10)     /* 256KB */
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;arena 结构&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;一个完整的arena = arena_object + pool集合&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;typedef uchar block;

/* Record keeping for arenas. */
struct arena_object {
    /* The address of the arena, as returned by malloc.  Note that 0
     * will never be returned by a successful malloc, and is used
     * here to mark an arena_object that doesn&amp;#39;t correspond to an
     * allocated arena.
     */
    uptr address;

    /* Pool-aligned pointer to the next pool to be carved off. */
    block* pool_address;

    /* The number of available pools in the arena:  free pools + never-
     * allocated pools.
     */
    uint nfreepools;

    /* The total number of pools in the arena, whether or not available. */
    uint ntotalpools;

    /* Singly-linked list of available pools. */
    // 单链表, 可用pool集合
    struct pool_header* freepools;

    /* Whenever this arena_object is not associated with an allocated
     * arena, the nextarena member is used to link all unassociated
     * arena_objects in the singly-linked `unused_arena_objects` list.
     * The prevarena member is unused in this case.
     *
     * When this arena_object is associated with an allocated arena
     * with at least one available pool, both members are used in the
     * doubly-linked `usable_arenas` list, which is maintained in
     * increasing order of `nfreepools` values.
     *
     * Else this arena_object is associated with an allocated arena
     * all of whose pools are in use.  `nextarena` and `prevarena`
     * are both meaningless in this case.
     */
    // arena链表
    struct arena_object* nextarena;
    struct arena_object* prevarena;
};
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;arena_object的作用:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;与其他arena连接, 组成双向链表&lt;/li&gt;
&lt;li&gt;维护arena中可用的pool, 单链表&lt;/li&gt;
&lt;li&gt;其他信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;pool_header&lt;/code&gt; 与 &lt;code&gt;arena_object&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pool_header和管理的blocks内存是一块连续的内存 =&amp;gt; pool_header被申请时, 其管理的block集合的内存一并被申请&lt;/li&gt;
&lt;li&gt;arena_object和其管理的内存是分离的 =&amp;gt; arena_object被申请时, 其管理的pool集合的内存没有被申请, 而是在某一时刻建立的联系&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/Python_Memory_Management_2014_09_10_23_17/python-memory-arena.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;arena的两种状态&lt;/h3&gt;
&lt;p&gt;arena存在两种状态: 未使用(没有建立联系)/可用(建立了联系)&lt;/p&gt;
&lt;p&gt;全局由两个链表维护着&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* The head of the singly-linked, NULL-terminated list of available&lt;/span&gt;
&lt;span class="cm"&gt; * arena_objects.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;单链表&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
static&lt;span class="w"&gt; &lt;/span&gt;struct&lt;span class="w"&gt; &lt;/span&gt;arena_object&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;unused_arena_objects&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;NULL&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cm"&gt;/* The head of the doubly-linked, NULL-terminated at each end, list of&lt;/span&gt;
&lt;span class="cm"&gt; * arena_objects associated with arenas that have pools available.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;双向链表&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
static&lt;span class="w"&gt; &lt;/span&gt;struct&lt;span class="w"&gt; &lt;/span&gt;arena_object&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;usable_arenas&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;NULL&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;arena的初始化&lt;/h3&gt;
&lt;p&gt;首先, 来看下初始化相关的一些参数定义
代码&lt;em&gt;obmalloc.c&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* Array of objects used to track chunks of memory (arenas). */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;arena_object&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;数组&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
static&lt;span class="w"&gt; &lt;/span&gt;struct&lt;span class="w"&gt; &lt;/span&gt;arena_object&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;arenas&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;NULL&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cm"&gt;/* Number of slots currently allocated in the `arenas` vector. */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;当前&lt;/span&gt;arenas&lt;span class="err"&gt;中管理的&lt;/span&gt;arena_object&lt;span class="err"&gt;的个数&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;初始化时&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
static&lt;span class="w"&gt; &lt;/span&gt;uint&lt;span class="w"&gt; &lt;/span&gt;maxarenas&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cm"&gt;/* How many arena_objects do we initially allocate?&lt;/span&gt;
&lt;span class="cm"&gt; * 16 = can allocate 16 arenas = 16 * ARENA_SIZE = 4MB before growing the&lt;/span&gt;
&lt;span class="cm"&gt; * `arenas` vector.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;初始化时申请的&lt;/span&gt;arena_object&lt;span class="err"&gt;个数&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;define&lt;span class="w"&gt; &lt;/span&gt;INITIAL_ARENA_OBJECTS&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;16&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cm"&gt;/* Number of arenas allocated that haven&amp;#39;t been free()&amp;#39;d. */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
static&lt;span class="w"&gt; &lt;/span&gt;size_t&lt;span class="w"&gt; &lt;/span&gt;narenas_currently_allocated&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;


&lt;span class="cm"&gt;/* The head of the singly-linked, NULL-terminated list of available&lt;/span&gt;
&lt;span class="cm"&gt; * arena_objects.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;未使用状态&lt;/span&gt;arena&lt;span class="err"&gt;的单链表&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
static&lt;span class="w"&gt; &lt;/span&gt;struct&lt;span class="w"&gt; &lt;/span&gt;arena_object&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;unused_arena_objects&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;NULL&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cm"&gt;/* The head of the doubly-linked, NULL-terminated at each end, list of&lt;/span&gt;
&lt;span class="cm"&gt; * arena_objects associated with arenas that have pools available.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;可用状态&lt;/span&gt;arena&lt;span class="err"&gt;的双向链表&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
static&lt;span class="w"&gt; &lt;/span&gt;struct&lt;span class="w"&gt; &lt;/span&gt;arena_object&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;usable_arenas&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;NULL&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后, 看下&lt;em&gt;obmalloc.c&lt;/em&gt;中arena初始化的代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/*&lt;/span&gt; Allocate a new arena.  If we run out of memory&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;return&lt;/span&gt; NULL.  Else
 &lt;span class="o"&gt;*&lt;/span&gt; allocate a new arena&lt;span class="p"&gt;,&lt;/span&gt; and &lt;span class="kr"&gt;return&lt;/span&gt; the address of an arena_object
 &lt;span class="o"&gt;*&lt;/span&gt; describing the new arena.  It&lt;span class="s"&gt;&amp;#39;s expected that the caller will set&lt;/span&gt;
&lt;span class="s"&gt; * `usable_arenas` to the return value.&lt;/span&gt;
&lt;span class="s"&gt; */&lt;/span&gt;
&lt;span class="s"&gt;static struct arena_object*&lt;/span&gt;
&lt;span class="s"&gt;new_arena(void)&lt;/span&gt;
&lt;span class="s"&gt;{&lt;/span&gt;
&lt;span class="s"&gt;    struct arena_object* arenaobj;&lt;/span&gt;
&lt;span class="s"&gt;    uint excess;        /* number of bytes above pool alignment */&lt;/span&gt;
&lt;span class="s"&gt;    void *address;&lt;/span&gt;
&lt;span class="s"&gt;    int err;&lt;/span&gt;

&lt;span class="s"&gt;    // 判断是否需要扩充&amp;quot;未使用&amp;quot;的arena_object列表&lt;/span&gt;
&lt;span class="s"&gt;    if (unused_arena_objects == NULL) {&lt;/span&gt;
&lt;span class="s"&gt;        uint i;&lt;/span&gt;
&lt;span class="s"&gt;        uint numarenas;&lt;/span&gt;
&lt;span class="s"&gt;        size_t nbytes;&lt;/span&gt;

&lt;span class="s"&gt;        /* Double the number of arena objects on each allocation.&lt;/span&gt;
&lt;span class="s"&gt;         * Note that it&amp;#39;&lt;/span&gt;s possible &lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="sb"&gt;`numarenas`&lt;/span&gt; to overflow.
         &lt;span class="o"&gt;*/&lt;/span&gt;
        &lt;span class="o"&gt;//&lt;/span&gt; 确定需要申请的个数&lt;span class="p"&gt;,&lt;/span&gt; 首次初始化&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 之后每次翻倍
        numarenas &lt;span class="o"&gt;=&lt;/span&gt; maxarenas &lt;span class="o"&gt;?&lt;/span&gt; maxarenas &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; INITIAL_ARENA_OBJECTS&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;numarenas &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; maxarenas&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                &lt;span class="o"&gt;/*&lt;/span&gt; overflow &lt;span class="o"&gt;*/&lt;/span&gt;  &lt;span class="o"&gt;//&lt;/span&gt;溢出了

        &lt;span class="m"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;...&lt;/span&gt;

        nbytes &lt;span class="o"&gt;=&lt;/span&gt; numarenas &lt;span class="o"&gt;*&lt;/span&gt; sizeof&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;arenas&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;//&lt;/span&gt; 申请内存
        arenaobj &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;struct arena_object &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;realloc&lt;span class="p"&gt;(&lt;/span&gt;arenas&lt;span class="p"&gt;,&lt;/span&gt; nbytes&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;arenaobj &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        arenas &lt;span class="o"&gt;=&lt;/span&gt; arenaobj&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="o"&gt;/*&lt;/span&gt; We might need to fix pointers that were copied.  However&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="o"&gt;*&lt;/span&gt; new_arena only gets called when all the pages &lt;span class="kr"&gt;in&lt;/span&gt; the
         &lt;span class="o"&gt;*&lt;/span&gt; previous arenas are full.  Thus&lt;span class="p"&gt;,&lt;/span&gt; there are &lt;span class="o"&gt;*&lt;/span&gt;no&lt;span class="o"&gt;*&lt;/span&gt; pointers
         &lt;span class="o"&gt;*&lt;/span&gt; into the old array. Thus&lt;span class="p"&gt;,&lt;/span&gt; we don&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;t have to worry about&lt;/span&gt;
         &lt;span class="o"&gt;*&lt;/span&gt; invalid pointers.  Just to be sure&lt;span class="p"&gt;,&lt;/span&gt; some asserts&lt;span class="o"&gt;:&lt;/span&gt;
         &lt;span class="o"&gt;*/&lt;/span&gt;
        assert&lt;span class="p"&gt;(&lt;/span&gt;usable_arenas &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        assert&lt;span class="p"&gt;(&lt;/span&gt;unused_arena_objects &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="o"&gt;//&lt;/span&gt; 初始化
        &lt;span class="o"&gt;/*&lt;/span&gt; Put the new arenas on the unused_arena_objects list. &lt;span class="o"&gt;*/&lt;/span&gt;
        &lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;i &lt;span class="o"&gt;=&lt;/span&gt; maxarenas&lt;span class="p"&gt;;&lt;/span&gt; i &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; numarenas&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;i&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            arenas&lt;span class="p"&gt;[&lt;/span&gt;i&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="m"&gt;.&lt;/span&gt;address &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;              &lt;span class="o"&gt;/*&lt;/span&gt; mark as unassociated &lt;span class="o"&gt;*/&lt;/span&gt;
            &lt;span class="o"&gt;//&lt;/span&gt; 新申请的一律为&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 标识着这个arena处于&lt;span class="s"&gt;&amp;quot;未使用&amp;quot;&lt;/span&gt;
            arenas&lt;span class="p"&gt;[&lt;/span&gt;i&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="m"&gt;.&lt;/span&gt;nextarena &lt;span class="o"&gt;=&lt;/span&gt; i &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; numarenas &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt;
                                   &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;arenas&lt;span class="p"&gt;[&lt;/span&gt;i&lt;span class="m"&gt;+1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="o"&gt;//&lt;/span&gt; 将其放入unused_arena_objects链表中
        &lt;span class="o"&gt;//&lt;/span&gt; unused_arena_objects 为新分配内存空间的开头
        &lt;span class="o"&gt;/*&lt;/span&gt; Update globals. &lt;span class="o"&gt;*/&lt;/span&gt;
        unused_arena_objects &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;arenas&lt;span class="p"&gt;[&lt;/span&gt;maxarenas&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="o"&gt;//&lt;/span&gt; 更新数量
        maxarenas &lt;span class="o"&gt;=&lt;/span&gt; numarenas&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;/*&lt;/span&gt; Take the &lt;span class="kr"&gt;next&lt;/span&gt; available arena object off the head of the list. &lt;span class="o"&gt;*/&lt;/span&gt;
    assert&lt;span class="p"&gt;(&lt;/span&gt;unused_arena_objects &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="o"&gt;//&lt;/span&gt; 从unused_arena_objects中&lt;span class="p"&gt;,&lt;/span&gt; 获取一个未使用的object
    arenaobj &lt;span class="o"&gt;=&lt;/span&gt; unused_arena_objects&lt;span class="p"&gt;;&lt;/span&gt;
    unused_arena_objects &lt;span class="o"&gt;=&lt;/span&gt; arenaobj&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;nextarena&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; 更新链表

    &lt;span class="o"&gt;//&lt;/span&gt; 开始处理这个 arenaobject

    assert&lt;span class="p"&gt;(&lt;/span&gt;arenaobj&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;address &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;//&lt;/span&gt; 申请内存&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;256&lt;/span&gt;KB&lt;span class="p"&gt;,&lt;/span&gt; 内存地址赋值给arena的address. 这块内存可用
&lt;span class="c1"&gt;#ifdef ARENAS_USE_MMAP&lt;/span&gt;
    address &lt;span class="o"&gt;=&lt;/span&gt; mmap&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; ARENA_SIZE&lt;span class="p"&gt;,&lt;/span&gt; PROT_READ&lt;span class="o"&gt;|&lt;/span&gt;PROT_WRITE&lt;span class="p"&gt;,&lt;/span&gt;
                   MAP_PRIVATE&lt;span class="o"&gt;|&lt;/span&gt;MAP_ANONYMOUS&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    err &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;address &lt;span class="o"&gt;==&lt;/span&gt; MAP_FAILED&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;#else&lt;/span&gt;
    address &lt;span class="o"&gt;=&lt;/span&gt; malloc&lt;span class="p"&gt;(&lt;/span&gt;ARENA_SIZE&lt;span class="p"&gt;);&lt;/span&gt;
    err &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;address &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;#endif&lt;/span&gt;
    &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;err&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;/*&lt;/span&gt; The allocation failed&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;NULL&lt;/span&gt; after putting the
         &lt;span class="o"&gt;*&lt;/span&gt; arenaobj back.
         &lt;span class="o"&gt;*/&lt;/span&gt;
        arenaobj&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;nextarena &lt;span class="o"&gt;=&lt;/span&gt; unused_arena_objects&lt;span class="p"&gt;;&lt;/span&gt;
        unused_arena_objects &lt;span class="o"&gt;=&lt;/span&gt; arenaobj&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    arenaobj&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;address &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;uptr&lt;span class="p"&gt;)&lt;/span&gt;address&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="o"&gt;++&lt;/span&gt;narenas_currently_allocated&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="o"&gt;//&lt;/span&gt; 设置pool集合相关信息
    arenaobj&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;freepools &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="o"&gt;//&lt;/span&gt; 设置为&lt;span class="kc"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 只有在释放一个pool的时候才有用
    &lt;span class="o"&gt;/*&lt;/span&gt; pool_address &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; first pool&lt;span class="o"&gt;-&lt;/span&gt;aligned address &lt;span class="kr"&gt;in&lt;/span&gt; the arena
       nfreepools &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; number of whole pools that fit after alignment &lt;span class="o"&gt;*/&lt;/span&gt;
    arenaobj&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;pool_address &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;block&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;arenaobj&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;address&lt;span class="p"&gt;;&lt;/span&gt;
    arenaobj&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;nfreepools &lt;span class="o"&gt;=&lt;/span&gt; ARENA_SIZE &lt;span class="o"&gt;/&lt;/span&gt; POOL_SIZE&lt;span class="p"&gt;;&lt;/span&gt;

    assert&lt;span class="p"&gt;(&lt;/span&gt;POOL_SIZE &lt;span class="o"&gt;*&lt;/span&gt; arenaobj&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;nfreepools &lt;span class="o"&gt;==&lt;/span&gt; ARENA_SIZE&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="o"&gt;//&lt;/span&gt; 将pool的起始地址调整为系统页的边界
    &lt;span class="o"&gt;//&lt;/span&gt; 申请到 &lt;span class="m"&gt;256&lt;/span&gt;KB&lt;span class="p"&gt;,&lt;/span&gt; 放弃了一些内存&lt;span class="p"&gt;,&lt;/span&gt; 而将可使用的内存边界pool_address调整到了与系统页对齐
    excess &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;uint&lt;span class="p"&gt;)(&lt;/span&gt;arenaobj&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;address &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; POOL_SIZE_MASK&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;excess &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;--&lt;/span&gt;arenaobj&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;nfreepools&lt;span class="p"&gt;;&lt;/span&gt;
        arenaobj&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;pool_address &lt;span class="o"&gt;+=&lt;/span&gt; POOL_SIZE &lt;span class="o"&gt;-&lt;/span&gt; excess&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    arenaobj&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;ntotalpools &lt;span class="o"&gt;=&lt;/span&gt; arenaobj&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;nfreepools&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kr"&gt;return&lt;/span&gt; arenaobj&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;图示: 初始化arenas数组, 初始化后的所有arena都在&lt;code&gt;unused_arena_objects&lt;/code&gt;单链表里面
&lt;center&gt;&lt;img alt="" src="/article_img/Python_Memory_Management_2014_09_10_23_17/python-memory-arena2.png" /&gt;&lt;/center&gt;
图示: 从arenas取一个arena进行初始化
&lt;center&gt;&lt;img alt="" src="/article_img/Python_Memory_Management_2014_09_10_23_17/python-memory-arena3.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;没有可用的arena?&lt;/h3&gt;
&lt;p&gt;此时&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;// 判断成立
if (unused_arena_objects == NULL) {
    ....
    // 确定需要申请的个数, 首次初始化, 16, 之后每次翻倍
    numarenas = maxarenas ? maxarenas &amp;lt;&amp;lt; 1 : INITIAL_ARENA_OBJECTS;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后, 假设第一次分配了16个, 发现没有arena之后, 第二次处理结果: &lt;code&gt;numarenas = 32&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;即, 数组扩大了一倍。&lt;/p&gt;
&lt;h3&gt;arena分配&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;new&lt;/code&gt;了一个全新的 arena之后,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  void *
  PyObject_Malloc(size_t nbytes)
  {
    // 刚开始没有可用的arena
    if (usable_arenas == NULL) {
        // new一个, 作为双向链表的表头
        usable_arenas = new_arena();
        if (usable_arenas == NULL) {
            UNLOCK();
            goto redirect;
        }

        usable_arenas-&amp;gt;nextarena =
                  usable_arenas-&amp;gt;prevarena = NULL;

    }

    .......

    // 从arena中获取一个pool
    pool = (poolp)usable_arenas-&amp;gt;pool_address;
    assert((block*)pool &amp;lt;= (block*)usable_arenas-&amp;gt;address +
                                 ARENA_SIZE - POOL_SIZE);
    pool-&amp;gt;arenaindex = usable_arenas - arenas;
    assert(&amp;amp;arenas[pool-&amp;gt;arenaindex] == usable_arenas);
    pool-&amp;gt;szidx = DUMMY_SIZE_IDX;

    // 更新 pool_address 向下一个节点
    usable_arenas-&amp;gt;pool_address += POOL_SIZE;
    // 可用节点数量-1
    --usable_arenas-&amp;gt;nfreepools;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;图示: 从全新的arena中获取一个pool&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/Python_Memory_Management_2014_09_10_23_17/python-memory-arena4.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;假设arena是旧的, 怎么分配的pool&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pool = usable_arenas-&amp;gt;freepools;
if (pool != NULL) {
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个arena-&amp;gt;freepools是何方神圣?&lt;/p&gt;
&lt;p&gt;当arena中一整块pool被释放的时候:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;void
PyObject_Free(void *p)
{
    struct arena_object* ao;
    uint nf;  /* ao-&amp;gt;nfreepools */

    /* Link the pool to freepools.  This is a singly-linked
    * list, and pool-&amp;gt;prevpool isn&amp;#39;t used there.
    */
    ao = &amp;amp;arenas[pool-&amp;gt;arenaindex];
    pool-&amp;gt;nextpool = ao-&amp;gt;freepools;
    ao-&amp;gt;freepools = pool;
    nf = ++ao-&amp;gt;nfreepools;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也就是说, 在pool整块被释放的时候, 会将pool加入到&lt;code&gt;arena-&amp;gt;freepools&lt;/code&gt;作为单链表的表头, 然后, 在从非全新arena中分配pool时, 优先从&lt;code&gt;arena-&amp;gt;freepools&lt;/code&gt;里面取, 如果取不到, 再从arena内存块里面获取。&lt;/p&gt;
&lt;p&gt;图示&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/Python_Memory_Management_2014_09_10_23_17/python-memory-arena5.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;一个arena满了之后呢&lt;/h3&gt;
&lt;p&gt;很自然, 从下一个arena中获取&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;void *
PyObject_Malloc(size_t nbytes)
{
    // 当发现用完了最后一个pool!!!!!!!!!!!
    // nfreepools = 0
    if (usable_arenas-&amp;gt;nfreepools == 0) {
    assert(usable_arenas-&amp;gt;nextarena == NULL || usable_arenas-&amp;gt;nextarena-&amp;gt;prevarena == usable_arenas);
    /* Unlink the arena:  it is completely allocated. */

    // 找到下一个节点!
    usable_arenas = usable_arenas-&amp;gt;nextarena;
    // 右下一个
    if (usable_arenas != NULL) {
        usable_arenas-&amp;gt;prevarena = NULL; // 更新下一个节点的prevarens
        assert(usable_arenas-&amp;gt;address != 0);
    }
    // 没有下一个, 此时 usable_arenas = NULL, 下次进行内存分配的时候, 就会从arenas数组中取一个
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意: 这里有个逻辑, 就是每分配一个pool, 就检查是不是用到了最后一个, 如果是, 需要变更&lt;code&gt;usable_arenas&lt;/code&gt;到下一个可用的节点, 如果没有可用的, 那么下次进行内存分配的时候, 会判定从arenas数组中取一个。&lt;/p&gt;
&lt;h3&gt;arena回收&lt;/h3&gt;
&lt;p&gt;内存分配和回收最小单位是block, 当一个block被回收的时候, 可能触发pool被回收, pool被回收, 将会触发arena的回收机制。&lt;/p&gt;
&lt;p&gt;四种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;arena中所有pool都是闲置的(empty), 将arena内存释放, 返回给操作系统。&lt;/li&gt;
&lt;li&gt;如果arena中之前所有的pool都是占用的(used), 现在释放了一个pool(empty), 需要将 arena加入到usable_arenas, 会加入链表表头。&lt;/li&gt;
&lt;li&gt;如果arena中empty的pool个数n, 则从useable_arenas开始寻找可以插入的位置. 将arena插入。 (useable_arenas是一个有序链表, 按empty pool的个数, 保证empty pool数量越多, 被使用的几率越小, 最终被整体释放的机会越大)&lt;/li&gt;
&lt;li&gt;其他情况, 不对arena 进行处理。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;具体可以看&lt;code&gt;PyObject_Free&lt;/code&gt;的代码。&lt;/p&gt;
&lt;h2&gt;内存分配步骤&lt;/h2&gt;
&lt;p&gt;好的, 到这里, 我们已经知道了block和pool的关系(包括pool怎么管理block的), 以及arena和pool的关系(怎么从arena中拉到可用的pool)&lt;/p&gt;
&lt;p&gt;那么, 在分析&lt;code&gt;PyObject_Malloc(size_t nbytes)&lt;/code&gt;如何进行内存分配的时候, 我们就刨除掉这些管理代码。&lt;/p&gt;
&lt;p&gt;关注: 如何寻找得到一块可用的nbytes的block内存。&lt;/p&gt;
&lt;p&gt;其实代码那么多, 寻址得到对应的block也就这么几行代码, 其他代码都是pool没有, 找arena, 申请arena, arena没有, 找arenas, 最终的到一块pool, 初始化, 返回第一个block。&lt;/p&gt;
&lt;p&gt;如果有的情况, 用现成的:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pool = usedpools[size + size];
if pool可用:
    pool 没满, 取一个block返回
    pool 满了, 从下一个pool取一个block返回
否则:
    获取arena, 从里面初始化一个pool, 拿到第一个block, 返回
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从上面这个判断逻辑来看, 内存分配其实主要操作的是pool, 跟arena并不是基本的操作单元(只是用来管理pool的)&lt;/p&gt;
&lt;p&gt;结论: 进行内存分配和销毁, 所有操作都是在pool上进行的。
&lt;code&gt;usedpools&lt;/code&gt; 是什么鬼? 其实是可用pool缓冲池, 后面说。&lt;/p&gt;
&lt;h2&gt;内存池&lt;/h2&gt;
&lt;h3&gt;arena 内存池的大小&lt;/h3&gt;
&lt;p&gt;取决于用户, Python提供的编译符号, 用于决定是否控制。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;obmalloc.c&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#ifdef WITH_MEMORY_LIMITS&lt;/span&gt;
&lt;span class="cp"&gt;#ifndef SMALL_MEMORY_LIMIT&lt;/span&gt;
&lt;span class="cp"&gt;#define SMALL_MEMORY_LIMIT      (64 * 1024 * 1024)      &lt;/span&gt;&lt;span class="cm"&gt;/* 64 MB -- more? */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;

&lt;span class="cp"&gt;#ifdef WITH_MEMORY_LIMITS&lt;/span&gt;
&lt;span class="cp"&gt;#define MAX_ARENAS              (SMALL_MEMORY_LIMIT / ARENA_SIZE)&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;具体使用中, python并不直接与arenas和arena打交道, 当Python申请内存时, 最基本的操作单元并不是arena, 而是pool。&lt;/p&gt;
&lt;p&gt;问题: pool中所有block的size一样, 但是在arena中, 每个pool的size都可能不一样, 那么最终这些pool是怎么维护的? 怎么根据大小找到需要的block所在的pool? =&amp;gt; usedpools&lt;/p&gt;
&lt;h3&gt;pool在内存池中的三种状态&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;used状态: pool中至少有一个block已经被使用, 并且至少有一个block未被使用. 这种状态的pool受控于Python内部维护的usedpool数组。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;full状态: pool中所有的block都已经被使用, 这种状态的pool在arena中, 但不在arena的freepools链表中
处于full的pool各自独立, 不会被链表维护起来。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;empty状态: pool中所有block都未被使用, 处于这个状态的pool的集合通过其pool_header中的nextpool构成一个链表, 链表的表头是arena_object中的freepools。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;usedpools&lt;/h3&gt;
&lt;p&gt;usedpools数组: 维护着所有处于used状态的pool, 当申请内存的时候, 会通过usedpools寻找到一块可用的(处于used状态的)pool, 从中分配一个block。&lt;/p&gt;
&lt;p&gt;结构:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  #define SMALL_REQUEST_THRESHOLD 512
  // 512/8 = 64
  #define NB_SMALL_SIZE_CLASSES   (SMALL_REQUEST_THRESHOLD / ALIGNMENT)

  #define PTA(x)  ((poolp )((uchar *)&amp;amp;(usedpools[2*(x)]) - 2*sizeof(block *)))
  #define PT(x)   PTA(x), PTA(x)

  // 2 * ((64 + 7) / 8) * 8 = 128, 大小为128的数组
  static poolp usedpools[2 * ((NB_SMALL_SIZE_CLASSES + 7) / 8) * 8] = {
      PT(0), PT(1), PT(2), PT(3), PT(4), PT(5), PT(6), PT(7)
  #if NB_SMALL_SIZE_CLASSES &amp;gt; 8
      , PT(8), PT(9), PT(10), PT(11), PT(12), PT(13), PT(14), PT(15)
  #if NB_SMALL_SIZE_CLASSES &amp;gt; 16
      , PT(16), PT(17), PT(18), PT(19), PT(20), PT(21), PT(22), PT(23)
  #if NB_SMALL_SIZE_CLASSES &amp;gt; 24
      , PT(24), PT(25), PT(26), PT(27), PT(28), PT(29), PT(30), PT(31)
  #if NB_SMALL_SIZE_CLASSES &amp;gt; 32
      , PT(32), PT(33), PT(34), PT(35), PT(36), PT(37), PT(38), PT(39)
  #if NB_SMALL_SIZE_CLASSES &amp;gt; 40
      , PT(40), PT(41), PT(42), PT(43), PT(44), PT(45), PT(46), PT(47)
  #if NB_SMALL_SIZE_CLASSES &amp;gt; 48
      , PT(48), PT(49), PT(50), PT(51), PT(52), PT(53), PT(54), PT(55)
  #if NB_SMALL_SIZE_CLASSES &amp;gt; 56
      , PT(56), PT(57), PT(58), PT(59), PT(60), PT(61), PT(62), PT(63)
  #if NB_SMALL_SIZE_CLASSES &amp;gt; 64
  #error &amp;quot;NB_SMALL_SIZE_CLASSES should be less than 64&amp;quot;
  #endif /* NB_SMALL_SIZE_CLASSES &amp;gt; 64 */
  #endif /* NB_SMALL_SIZE_CLASSES &amp;gt; 56 */
  #endif /* NB_SMALL_SIZE_CLASSES &amp;gt; 48 */
  #endif /* NB_SMALL_SIZE_CLASSES &amp;gt; 40 */
  #endif /* NB_SMALL_SIZE_CLASSES &amp;gt; 32 */
  #endif /* NB_SMALL_SIZE_CLASSES &amp;gt; 24 */
  #endif /* NB_SMALL_SIZE_CLASSES &amp;gt; 16 */
  #endif /* NB_SMALL_SIZE_CLASSES &amp;gt;  8 */
  };

  即

  // 得到usedpools数组
static poolp usedpools[128] = {
   PTA(0), PTA(0), PTA(1), PTA(1), PTA(2), PTA(2), PTA(3), PTA(3),
   ....
   PTA(63), PTA(63)
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;解开看(&lt;em&gt;obmalloc.c&lt;/em&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  typedef uchar block;

  /* Pool for small blocks. */
  struct pool_header {
      union { block *_padding;
              uint count; } ref;          /* number of allocated blocks    */
      block *freeblock;                   /* pool&amp;#39;s free list head         */
      struct pool_header *nextpool;       /* next pool of this size class  */
      struct pool_header *prevpool;       /* previous pool       &amp;quot;&amp;quot;        */
      uint arenaindex;                    /* index into arenas of base adr */
      uint szidx;                         /* block size class index        */
      uint nextoffset;                    /* bytes to virgin block         */
      uint maxnextoffset;                 /* largest valid nextoffset      */
  };
  typedef struct pool_header *poolp;
  usedpools[0] = PTA(0) = ((poolp )((uchar *)&amp;amp;(usedpools[0]) - 2*sizeof(block *)))
  usedpools[1] = PTA(0) = ((poolp )((uchar *)&amp;amp;(usedpools[0]) - 2*sizeof(block *)))



  *p = usedpools[0] =&amp;gt; p-&amp;gt;nextpool and p-&amp;gt;prevpool are both p
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;为了看懂这步的trick, 心好累&amp;gt;_&amp;lt;#&lt;/p&gt;
&lt;p&gt;直接上图：&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/Python_Memory_Management_2014_09_10_23_17/python-memory-usedpool.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;new一个pool时维护&lt;/h3&gt;
&lt;p&gt;init获得的情况, 其实就是将刚刚从arena中获取的pool加入到 usedpools 对应的双向链表中, 然后初始化, 然后返回block。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;     init_pool:
          /* Frontlink to used pools. */

          // 1. 获取得到usedpools链表头
          next = usedpools[size + size]; /* == prev */

          // 2. 将新的pool加入到双向链表
          pool-&amp;gt;nextpool = next;
          pool-&amp;gt;prevpool = next;
          next-&amp;gt;nextpool = pool;
          next-&amp;gt;prevpool = pool;
          pool-&amp;gt;ref.count = 1;

          // 3. 后面的是具体pool和block的了
          if (pool-&amp;gt;szidx == size) {
              /* Luckily, this pool last contained blocks
               * of the same size class, so its header
               * and free list are already initialized.
               */
              bp = pool-&amp;gt;freeblock;
              pool-&amp;gt;freeblock = *(block **)bp;
              UNLOCK();
              return (void *)bp;
          }
          /*
           * Initialize the pool header, set up the free list to
           * contain just the second block, and return the first
           * block.
           */
          pool-&amp;gt;szidx = size;
          size = INDEX2SIZE(size);
          bp = (block *)pool + POOL_OVERHEAD;
          pool-&amp;gt;nextoffset = POOL_OVERHEAD + (size &amp;lt;&amp;lt; 1);
          pool-&amp;gt;maxnextoffset = POOL_SIZE - size;
          pool-&amp;gt;freeblock = bp + size;
          *(block **)(pool-&amp;gt;freeblock) = NULL;
          UNLOCK();
          return (void *)bp;   // here
      }
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;从现有pool中获取block&lt;/h3&gt;
&lt;p&gt;从现有的pool, 其实就是 usedpools得到双向链表头部, 判断是不是空链表, 不是的话代表有可用的pool, 直接从里面获取。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  if ((nbytes - 1) &amp;lt; SMALL_REQUEST_THRESHOLD) {
      LOCK();
      /*
       * Most frequent paths first
       */
      size = (uint)(nbytes - 1) &amp;gt;&amp;gt; ALIGNMENT_SHIFT;
      pool = usedpools[size + size];

      // 注意这里的判断, pool != pool-&amp;gt; nextpool 表示得到的链表不是空的
      if (pool != pool-&amp;gt;nextpool) {
          /*
           * There is a used pool for this size class.
           * Pick up the head block of its free list.
           */
          ++pool-&amp;gt;ref.count;
          bp = pool-&amp;gt;freeblock;
          assert(bp != NULL);
          if ((pool-&amp;gt;freeblock = *(block **)bp) != NULL) {
              UNLOCK();
              return (void *)bp;
          }
          /*
           * Reached the end of the free list, try to extend it.
           */
          if (pool-&amp;gt;nextoffset &amp;lt;= pool-&amp;gt;maxnextoffset) {
              /* There is room for another block. */
              pool-&amp;gt;freeblock = (block*)pool +
                                pool-&amp;gt;nextoffset;
              pool-&amp;gt;nextoffset += INDEX2SIZE(size);
              *(block **)(pool-&amp;gt;freeblock) = NULL;
              UNLOCK();
              return (void *)bp;
          }
          /* Pool is full, unlink from used pools. */
          next = pool-&amp;gt;nextpool;
          pool = pool-&amp;gt;prevpool;
          next-&amp;gt;prevpool = pool;
          pool-&amp;gt;nextpool = next;
          UNLOCK();
          return (void *)bp;   // here
      }
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;全局结构&lt;/h3&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/Python_Memory_Management_2014_09_10_23_17/python-memory-usedpool2.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;先这样吧, Python中整个内存池基本结构和机制大概如此, 是不是发现有好多数组/链表等等, 在分配/回收上处理下做成各种池.....
后面还有内存相关的就是垃圾收集了, 后面再说了吧wklken2015-08-29&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;版权声明：自由转载-非商用-非衍生-保持署名 | Creative Commons BY-NC-ND 3.0 &lt;/p&gt;</summary><category term="Memory"></category><category term="Features"></category><category term="Python"></category></entry><entry><title>Python Memory Management(1)</title><link href="/2014/Python_Memory_Management_2014_09_09_20_04.html" rel="alternate"></link><updated>2014-09-09T20:04:00+08:00</updated><author><name>wklken</name></author><id>tag:,2014-09-09:2014/Python_Memory_Management_2014_09_09_20_04.html</id><summary type="html">&lt;h2&gt;Python的内存管理架构&lt;/h2&gt;
&lt;h3&gt;基本分层&lt;/h3&gt;
&lt;p&gt;在Objects/obmalloc.c源码中, 给了一个分层划分&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    _____   ______   ______       ________
   [ int ] [ dict ] [ list ] ... [ string ]       Python core         |
+3 | &amp;lt;----- Object-specific memory -----&amp;gt; | &amp;lt;-- Non-object memory --&amp;gt; |
    _______________________________       |                           |
   [   Python&amp;#39;s object allocator   ]      |                           |
+2 | ####### Object memory ####### | &amp;lt;------ Internal buffers ------&amp;gt; |
    ______________________________________________________________    |
   [          Python&amp;#39;s raw memory allocator (PyMem_ API)          ]   |
+1 | &amp;lt;----- Python memory (under PyMem manager&amp;#39;s control) ------&amp;gt; |   |
    __________________________________________________________________
   [    Underlying general-purpose allocator (ex: C library malloc)   ]
 0 | &amp;lt;------ Virtual memory allocated for the python process -------&amp;gt; |

   =========================================================================
    _______________________________________________________________________
   [                OS-specific Virtual Memory Manager (VMM)               ]
-1 | &amp;lt;--- Kernel dynamic storage allocation &amp;amp; management (page-based) ---&amp;gt; |
    __________________________________   __________________________________
   [                                  ] [                                  ]
-2 | &amp;lt;-- Physical memory: ROM/RAM --&amp;gt; | | &amp;lt;-- Secondary storage (swap) --&amp;gt; |
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;layer 3: Object-specific memory(int/dict/list/string....)
         Python 实现并维护
         更高抽象层次的内存管理策略, 主要是各类特定对象的缓冲池机制. 具体见前面几篇涉及的内存分配机制

layer 2: Python&amp;#39;s object allocator
         Python 实现并维护
         实现了创建/销毁Python对象的接口(PyObject_New/Del), 涉及对象参数/引用计数等

layer 1: Python&amp;#39;s raw memory allocator (PyMem_ API)
         Python 实现并维护, 包装了第0层的内存管理接口, 提供统一的raw memory管理接口
         封装的原因: 不同操作系统 C 行为不一定一致, 保证可移植性, 相同语义相同行为

layer 0: Underlying general-purpose allocator (ex: C library malloc)
         操作系统提供的内存管理接口, 由操作系统实现并管理, Python不能干涉这一层的行为
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第三层layer 3前面已经介绍过了, 几乎每种常用的数据类型都伴有一套缓冲池机制。&lt;/p&gt;
&lt;p&gt;在这里, 我们关注的是layer 2/1，&lt;/p&gt;
&lt;p&gt;简要介绍下layer 1, 然后重点关注layer 2, 这才是重点。&lt;/p&gt;
&lt;h3&gt;layer 1: PyMem_ API&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;PyMem_ API&lt;/code&gt;是对操作系统内存管理接口进行的封装&lt;/p&gt;
&lt;p&gt;查看pymem.h可以看到&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;// Raw memory interface
// 这里存在三个宏定义, 宏可以避免一次函数调用的开销, 提高运行效率
// 不允许非配空间大小为0的内存空间
#define PyMem_MALLOC(n)     ((size_t)(n) &amp;gt; (size_t)PY_SSIZE_T_MAX ? NULL \
                : malloc((n) ? (n) : 1))


#define PyMem_REALLOC(p, n) ((size_t)(n) &amp;gt; (size_t)PY_SSIZE_T_MAX  ? NULL \
                : realloc((p), (n) ? (n) : 1))
#define PyMem_FREE      free

// 这里做了三个函数的声明, 平台独立的 malloc/realloc/free
PyAPI_FUNC(void *) PyMem_Malloc(size_t);
PyAPI_FUNC(void *) PyMem_Realloc(void *, size_t);
PyAPI_FUNC(void) PyMem_Free(void *);

// ============================================================

// Type-oriented memory interface
// 这里还有三个类型相关的内存接口, 批量分配/重分配 n 个 类型为 type内存
#define PyMem_New(type, n) \
  ( ((size_t)(n) &amp;gt; PY_SSIZE_T_MAX / sizeof(type)) ? NULL :  \
    ( (type *) PyMem_Malloc((n) * sizeof(type)) ) )
#define PyMem_NEW(type, n) \
  ( ((size_t)(n) &amp;gt; PY_SSIZE_T_MAX / sizeof(type)) ? NULL :  \
    ( (type *) PyMem_MALLOC((n) * sizeof(type)) ) )

#define PyMem_Resize(p, type, n) \
  ( (p) = ((size_t)(n) &amp;gt; PY_SSIZE_T_MAX / sizeof(type)) ? NULL :    \
    (type *) PyMem_Realloc((p), (n) * sizeof(type)) )
#define PyMem_RESIZE(p, type, n) \
  ( (p) = ((size_t)(n) &amp;gt; PY_SSIZE_T_MAX / sizeof(type)) ? NULL :    \
    (type *) PyMem_REALLOC((p), (n) * sizeof(type)) )
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后&lt;code&gt;object.c&lt;/code&gt;中, 我们关注实现, 三个实现的函数调用了对应的宏&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;// 使用 C 写Python扩展模块时使用函数而不是对应的宏
void *
PyMem_Malloc(size_t nbytes)
{
    return PyMem_MALLOC(nbytes);
}

void *
PyMem_Realloc(void *p, size_t nbytes)
{
    return PyMem_REALLOC(p, nbytes);
}

void
PyMem_Free(void *p)
{
    PyMem_FREE(p);
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这些接口都相对简单&lt;/p&gt;
&lt;p&gt;好了, 结束, 开始关注layer 2: Python's object allocator。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Python 的内存分配策略&lt;/h2&gt;
&lt;p&gt;先来看Objects/obmalloc.c中的一段注释&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * &amp;quot;Memory management is where the rubber meets the road -- if we do the wrong&lt;/span&gt;
&lt;span class="cm"&gt; * thing at any level, the results will not be good. And if we don&amp;#39;t make the&lt;/span&gt;
&lt;span class="cm"&gt; * levels work well together, we are in serious trouble.&amp;quot; (1)&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * (1) Paul R. Wilson, Mark S. Johnstone, Michael Neely, and David Boles,&lt;/span&gt;
&lt;span class="cm"&gt; *    &amp;quot;Dynamic Storage Allocation: A Survey and Critical Review&amp;quot;,&lt;/span&gt;
&lt;span class="cm"&gt; *    in Proc. 1995 Int&amp;#39;l. Workshop on Memory Management, September 1995.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python引入了内存池机制, 用于管理对小块内存的申请和释放&lt;/p&gt;
&lt;p&gt;逻辑&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果要分配的内存空间大于 SMALL_REQUEST_THRESHOLD bytes(512 bytes), 将直接使用layer 1的内存分配接口进行分配&lt;/li&gt;
&lt;li&gt;否则, 使用不同的block来满足分配需求&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;整个小块内存池可以视为一个层次结构&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;内存池(概念上的, 标识Python对于整个小块内存分配和释放的内存管理机制)&lt;/li&gt;
&lt;li&gt;arena&lt;/li&gt;
&lt;li&gt;pool&lt;/li&gt;
&lt;li&gt;block&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;block&lt;/h3&gt;
&lt;p&gt;Python内存的最小单位, 所有block长度都是8字节对齐的。&lt;/p&gt;
&lt;p&gt;注意这里block只是一个概念, 在源代码中并没有实体存在。&lt;/p&gt;
&lt;p&gt;不同类型block, 对应不同内存大小, 这个内存大小的值被称为size class。&lt;/p&gt;
&lt;p&gt;不同长度的block：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; * Request in bytes     Size of allocated block      Size class idx
 * ----------------------------------------------------------------
 *        1-8                     8                       0
 *        9-16                   16                       1
 *       17-24                   24                       2
 *       25-32                   32                       3
 *       33-40                   40                       4
 *       41-48                   48                       5
 *       49-56                   56                       6
 *       57-64                   64                       7
 *       65-72                   72                       8
 *        ...                   ...                     ...
 *      497-504                 504                      62
 *      505-512                 512                      63
 *
 *      0, SMALL_REQUEST_THRESHOLD + 1 and up: routed to the underlying
 *      allocator.
 */
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;例如&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;申请一块大小28字节的内存, 实际从内存中划到32字节的一个block (从size class index为3的pool里面划出)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/Python_Memory_Management_2014_09_09_20_04/python-memory-blocks.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;注意: 这里有个&lt;code&gt;Size class idx&lt;/code&gt;, 这个主要为了后面pool中用到。&lt;/p&gt;
&lt;p&gt;size class和size class index之间的转换&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#define ALIGNMENT               8               /* must be 2^N */
#define ALIGNMENT_SHIFT         3
#define ALIGNMENT_MASK          (ALIGNMENT - 1)

// size class index =&amp;gt; size class
#define INDEX2SIZE(I) (((uint)(I) + 1) &amp;lt;&amp;lt; ALIGNMENT_SHIFT)

/* 即
    (0+1) * 8 = 8
    (1+1) * 8 = 16
*/

// size class =&amp;gt; size class index
size = (uint)(nbytes - 1) &amp;gt;&amp;gt; ALIGNMENT_SHIFT;

/* 即
    (8 - 1) / 8 = 0
    (16 - 8) / 8 = 1
*/
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;pool&lt;/h3&gt;
&lt;p&gt;pool管理block, 一个pool管理着一堆有固定大小的内存块&lt;/p&gt;
&lt;p&gt;本质: pool管理着一大块内存, 它有一定的策略, 将这块大的内存划分为多个大小一致的小块内存。&lt;/p&gt;
&lt;h3&gt;pool size&lt;/h3&gt;
&lt;p&gt;在Python中, 一个pool的大小通常为一个系统内存页， 4kB。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;obmalloc.c&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#define SYSTEM_PAGE_SIZE        (4 * 1024)
#define SYSTEM_PAGE_SIZE_MASK   (SYSTEM_PAGE_SIZE - 1)

#define POOL_SIZE               SYSTEM_PAGE_SIZE        /* must be 2^N */
#define POOL_SIZE_MASK          SYSTEM_PAGE_SIZE_MASK
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;pool组成&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;pool的4kB内存 = pool_header + block集合(N多大小一样的block)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;pool_header
    /&lt;em&gt; Pool for small blocks. &lt;/em&gt;/
    struct pool_header {
        union { block &lt;em&gt;_padding;
                uint count; } ref;          /&lt;/em&gt; number of allocated blocks    &lt;em&gt;/
        block &lt;/em&gt;freeblock;                   /&lt;em&gt; pool's free list head         &lt;/em&gt;/
        struct pool_header &lt;em&gt;nextpool;       /&lt;/em&gt; next pool of this size class  &lt;em&gt;/
        struct pool_header &lt;/em&gt;prevpool;       /&lt;em&gt; previous pool       ""        &lt;/em&gt;/
        uint arenaindex;                    /&lt;em&gt; index into arenas of base adr &lt;/em&gt;/
        uint szidx;                         /&lt;em&gt; block size class index        &lt;/em&gt;/ - size class index
        uint nextoffset;                    /&lt;em&gt; bytes to virgin block         &lt;/em&gt;/
        uint maxnextoffset;                 /&lt;em&gt; largest valid nextoffset      &lt;/em&gt;/
    };&lt;/p&gt;
&lt;p&gt;pool_header的作用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;与其他pool链接, 组成双向链表&lt;/li&gt;
&lt;li&gt;维护pool中可用的block, 单链表&lt;/li&gt;
&lt;li&gt;保存 szidx , 这个和该pool中block的大小有关系, (block size=8, szidx=0), (block size=16, szidx=1)...用于内存分配时匹配到拥有对应大小block的pool&lt;/li&gt;
&lt;li&gt;arenaindex, 后面说&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结构图: &lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/Python_Memory_Management_2014_09_09_20_04/python-memory-pools.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;pool初始化&lt;/h3&gt;
&lt;p&gt;从内存中初始化一个全新的空的&lt;code&gt;pool&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Objects/obmalloc.c&lt;/em&gt;的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;void *
PyObject_Malloc(size_t nbytes)
{
  ...
    init_pool:
    // 1. 连接到 used_pools 双向链表, 作为表头
    // 注意, 这里 usedpools[0] 保存着 block size = 8 的所有used_pools的表头
    /* Frontlink to used pools. */
    next = usedpools[size + size]; /* == prev */
    pool-&amp;gt;nextpool = next;
    pool-&amp;gt;prevpool = next;
    next-&amp;gt;nextpool = pool;
    next-&amp;gt;prevpool = pool;
    pool-&amp;gt;ref.count = 1;

    // 如果已经初始化过了...这里看初始化, 跳过
    if (pool-&amp;gt;szidx == size) {
    /* Luckily, this pool last contained blocks
    * of the same size class, so its header
    * and free list are already initialized.
    */
        bp = pool-&amp;gt;freeblock;
        pool-&amp;gt;freeblock = *(block **)bp;
        UNLOCK();
        return (void *)bp;
    }


    /*
     * Initialize the pool header, set up the free list to
     * contain just the second block, and return the first
     * block.
     */
    // 开始初始化pool_header
    // 这里 size = (uint)(nbytes - 1) &amp;gt;&amp;gt; ALIGNMENT_SHIFT;  其实是Size class idx, 即szidx

    pool-&amp;gt;szidx = size;

    // 计算获得每个block的size
    size = INDEX2SIZE(size);

    // 注意 #define POOL_OVERHEAD           ROUNDUP(sizeof(struct pool_header))
    // bp =&amp;gt; 初始化为pool + pool_header size,  跳过pool_header的内存
    bp = (block *)pool + POOL_OVERHEAD;

    // 计算偏移量, 这里的偏移量是绝对值
    // #define POOL_SIZE               SYSTEM_PAGE_SIZE        /* must be 2^N */
    // POOL_SIZE = 4kb, POOL_OVERHEAD = pool_header size
    // 下一个偏移位置: pool_header size + 2 * size

    pool-&amp;gt;nextoffset = POOL_OVERHEAD + (size &amp;lt;&amp;lt; 1);
    // 4kb - size
    pool-&amp;gt;maxnextoffset = POOL_SIZE - size;

    // freeblock指向 bp + size = pool_header size + size
    pool-&amp;gt;freeblock = bp + size;

    // 赋值NULL
    *(block **)(pool-&amp;gt;freeblock) = NULL;
    UNLOCK();
    return (void *)bp;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;初始化后的图&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/Python_Memory_Management_2014_09_09_20_04/python-memory-pools2.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;pool进行block分配 - 0 总体代码&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; if (pool != pool-&amp;gt;nextpool) {   //
    /*
    * There is a used pool for this size class.
    * Pick up the head block of its free list.
    */
    ++pool-&amp;gt;ref.count;
    bp = pool-&amp;gt;freeblock; // 指针指向空闲block起始位置
    assert(bp != NULL);

    // 代码-1
    // 调整 pool-&amp;gt;freeblock (假设A节点)指向链表下一个, 即bp首字节指向的下一个节点(假设B节点) , 如果此时!= NULL
    // 表示 A节点可用, 直接返回
    if ((pool-&amp;gt;freeblock = *(block **)bp) != NULL) {
        UNLOCK();
        return (void *)bp;
    }

    // 代码-2
    /*
    * Reached the end of the free list, try to extend it.
    */
    // 有足够的空间, 分配一个, pool-&amp;gt;freeblock 指向后移
    if (pool-&amp;gt;nextoffset &amp;lt;= pool-&amp;gt;maxnextoffset) {
        /* There is room for another block. */
        // 变更位置信息
        pool-&amp;gt;freeblock = (block*)pool +
                              pool-&amp;gt;nextoffset;
        pool-&amp;gt;nextoffset += INDEX2SIZE(size);


        *(block **)(pool-&amp;gt;freeblock) = NULL; // 注意, 指向NULL
        UNLOCK();

        // 返回bp
        return (void *)bp;
    }

    // 代码-3
    /* Pool is full, unlink from used pools. */  // 满了, 需要从下一个pool获取
    next = pool-&amp;gt;nextpool;
    pool = pool-&amp;gt;prevpool;
    next-&amp;gt;prevpool = pool;
    pool-&amp;gt;nextpool = next;
    UNLOCK();
    return (void *)bp;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;pool进行block分配 - 1 刚开始&lt;/h3&gt;
&lt;p&gt;内存块尚未分配完, 且此时不存在回收的block, 全新进来的时候, 分配第一块block。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(pool-&amp;gt;freeblock = *(block **)bp) == NULL
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所以进入的逻辑是代码-2&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;bp = pool-&amp;gt;freeblock; // 指针指向空闲block起始位置

.....


// 代码-2
/*
 * Reached the end of the free list, try to extend it.
 */
// 有足够的空间, 分配一个, pool-&amp;gt;freeblock 指向后移
if (pool-&amp;gt;nextoffset &amp;lt;= pool-&amp;gt;maxnextoffset) {
    /* There is room for another block. */
    // 变更位置信息
    pool-&amp;gt;freeblock = (block*)pool +
    pool-&amp;gt;nextoffset;
    pool-&amp;gt;nextoffset += INDEX2SIZE(size);

    *(block **)(pool-&amp;gt;freeblock) = NULL; // 注意, 指向NULL
    UNLOCK();

    // 返回bp
    return (void *)bp;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;结果图示：&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/Python_Memory_Management_2014_09_09_20_04/python-memory-pools3.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;pool进行block分配 - 2 回收了某几个block&lt;/h3&gt;
&lt;p&gt;回收涉及的代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;void
PyObject_Free(void *p)
{
    poolp pool;
    block *lastfree;
    poolp next, prev;
    uint size;

    pool = POOL_ADDR(p);
    if (Py_ADDRESS_IN_RANGE(p, pool)) {
        /* We allocated this address. */
        LOCK();
        /* Link p to the start of the pool&amp;#39;s freeblock list.  Since
         * the pool had at least the p block outstanding, the pool
         * wasn&amp;#39;t empty (so it&amp;#39;s already in a usedpools[] list, or
         * was full and is in no list -- it&amp;#39;s not in the freeblocks
         * list in any case).
         */
        assert(pool-&amp;gt;ref.count &amp;gt; 0);            /* else it was empty */
        // p被释放, p的第一个字节值被设置为当前freeblock的值
        *(block **)p = lastfree = pool-&amp;gt;freeblock;
        // freeblock被更新为指向p的首地址
        pool-&amp;gt;freeblock = (block *)p;

        // 相当于往list中头插入了一个节点

     ...
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;没释放一个block, 该block就会变成 &lt;code&gt;pool-&amp;gt;freeblock&lt;/code&gt; 的头节点, 而单链表一个节点如何指向下一个节点呢? 通过赋值, 节点内存空间保存着下个节点的地址, 最后一个节点指向NULL(知道上面代码-1的判断条件了吧&amp;gt;_&amp;lt;#)&lt;/p&gt;
&lt;p&gt;假设已经连续分配了5块, 第1块和第4块被释放&lt;/p&gt;
&lt;p&gt;此时内存图示：&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/Python_Memory_Management_2014_09_09_20_04/python-memory-pools4.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;此时再一个block分配调用进来, 执行分配, 进入的逻辑是代码-1&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;bp = pool-&amp;gt;freeblock; // 指针指向空闲block起始位置
// 代码-1
// 调整 pool-&amp;gt;freeblock (假设A节点)指向链表下一个, 即bp首字节指向的下一个节点(假设B节点) , 如果此时!= NULL
// 表示 A节点可用, 直接返回
if ((pool-&amp;gt;freeblock = *(block **)bp) != NULL) {
    UNLOCK();
    return (void *)bp;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;center&gt;&lt;img alt="" src="/article_img/Python_Memory_Management_2014_09_09_20_04/python-memory-pools5.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;pool进行block分配 - 3 pool用完了&lt;/h3&gt;
&lt;p&gt;pool中内存空间都用完了, 进入代码-3&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;bp = pool-&amp;gt;freeblock; // 指针指向空闲block起始位置


// 代码-3
/* Pool is full, unlink from used pools. */  // 满了, 需要从下一个pool获取
next = pool-&amp;gt;nextpool;
pool = pool-&amp;gt;prevpool;
next-&amp;gt;prevpool = pool;
pool-&amp;gt;nextpool = next;
UNLOCK();
return (void *)bp;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;获取下一个pool(链表上每个pool的block size都是一致的)
好了, pool到此位置。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;版权声明：自由转载-非商用-非衍生-保持署名 | &lt;a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh"&gt;Creative Commons BY-NC-ND 3.0&lt;/a&gt;&lt;/p&gt;</summary><category term="Memory"></category><category term="Features"></category><category term="Python"></category></entry><entry><title>函数缓存</title><link href="/2014/Python_Cache_2014_04_19_22_07.html" rel="alternate"></link><updated>2014-04-19T22:07:00+08:00</updated><author><name>kai_kai03</name></author><id>tag:,2014-04-19:2014/Python_Cache_2014_04_19_22_07.html</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hashlib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pickle&lt;/span&gt;

&lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_obsolete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;duration&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;compute_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pickle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sha1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;memoize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_memorize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__memorize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;compute_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;is_obsolete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;we got a winner&amp;#39;&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;__memorize&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_memorize&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里memoize就是一个装饰器，duration是缓存过期时间。compute_key函数合并调用的函数的名称、参数并计算出key。&lt;/p&gt;</summary><category term="Decorator"></category><category term="cache"></category><category term="Python"></category></entry><entry><title>Python with</title><link href="/2014/Python_with_2014_02_08_20_31.html" rel="alternate"></link><updated>2014-02-08T20:31:00+08:00</updated><author><name>kai_kai03</name></author><id>tag:,2014-02-08:2014/Python_with_2014_02_08_20_31.html</id><summary type="html">&lt;h2&gt;with语句是什么？&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Python’s with statement provides a very convenient way of dealing with the situation where you have to do a setup and teardown to make something happen. A very good example for this is the situation where you want to gain a handler to a file, read data from the file and the close the file handler.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有一些任务，可能事先需要设置，事后做清理工作。对于这种场景，Python的with语句提供了一种非常方便的处理方式。一个很好的例子是文件处理，你需要获取一个文件句柄，从文件中读取数据，然后关闭文件句柄。&lt;/p&gt;
&lt;p&gt;如果不用with语句，代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;file = open(&amp;quot;/tmp/foo.txt&amp;quot;)
data = file.read()
file.close()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里有两个问题。一是可能忘记关闭文件句柄；二是文件读取数据发生异常，没有进行任何处理。下面是处理异常的加强版本：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;file = open(&amp;quot;/tmp/foo.txt&amp;quot;)
try:
    data = file.read()
finally:
    file.close()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;虽然这段代码运行良好，但是太冗长了。这时候就是with一展身手的时候了。除了有更优雅的语法，with还可以很好的处理上下文环境产生的异常。下面是with版本的代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;with open(&amp;quot;/tmp/foo.txt&amp;quot;)
 as file:
    data = file.read()
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;with如何工作？&lt;/h3&gt;
&lt;p&gt;这看起来充满魔法，但不仅仅是魔法，Python对with的处理还很聪明。基本思想是with所求值的对象必须有一个__enter__()方法，一个__exit__()方法。&lt;/p&gt;
&lt;p&gt;紧跟with后面的语句被求值后，返回对象的__enter__()方法被调用，这个方法的返回值将被赋值给as后面的变量。当with后面的代码块全部被执行完之后，将调用前面返回对象的__exit__()方法。&lt;/p&gt;
&lt;p&gt;下面例子可以具体说明with如何工作：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;#!/usr/bin/env
 python
#
 with_example01.py


class Sample:
    def __enter__(self):
        print &amp;quot;In
 __enter__()&amp;quot;
        return &amp;quot;Foo&amp;quot;

    def __exit__(self, type,
 value, trace):
        print &amp;quot;In
 __exit__()&amp;quot;


def get_sample():
    return Sample()


with
 get_sample() as sample:
    print &amp;quot;sample:&amp;quot;,
 sample
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;运行代码，输出如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;bash-3.2$
 ./with_example01.py
In
 __enter__()
sample:
 Foo
In
 __exit__()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;正如你看到的&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;__enter__()方法被执行&lt;/li&gt;
&lt;li&gt;__enter__()方法返回的值 - 这个例子中是"Foo"，赋值给变量'sample'&lt;/li&gt;
&lt;li&gt;执行代码块，打印变量"sample"的值为 "Foo"&lt;/li&gt;
&lt;li&gt;__exit__()方法被调用&lt;/li&gt;
&lt;li&gt;with真正强大之处是它可以处理异常。可能你已经注意到Sample类的__exit__方法有三个参数- val, type 和 trace。 这些参数在异常处理中相当有用。我们来改一下代码，看看具体如何工作的。&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;#!/usr/bin/env
 python
#
 with_example02.py

class Sample:
    def __enter__(self):
        return self

    def __exit__(self, type, value, trace):
        print &amp;quot;type:&amp;quot;, type
        print &amp;quot;value:&amp;quot;, value
        print &amp;quot;trace:&amp;quot;, trace

    def do_something(self):
        bar = 1/0
        return bar + 10
with
    Sample() as sample:
    sample.do_something()
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个例子中，with后面的get_sample()变成了Sample()。这没有任何关系，只要紧跟with后面的语句所返回的对象有__enter__()和__exit__()方法即可。此例中，Sample()的__enter__()方法返回新创建的Sample对象，并赋值给变量sample。&lt;/p&gt;
&lt;p&gt;代码执行后：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;bash-3.2$
 ./with_example02.py
type:
 &amp;lt;type &amp;#39;exceptions.ZeroDivisionError&amp;#39;&amp;gt;
value:
 integer division or modulo
 by zero
trace:
 &amp;lt;traceback object at 0x1004a8128&amp;gt;
Traceback
 (most recent call last):
  File &amp;quot;./with_example02.py&amp;quot;,
 line 19, in &amp;lt;module&amp;gt;
    sample.do_something()
  File &amp;quot;./with_example02.py&amp;quot;,
 line 15, in do_something
    bar = 1/0
ZeroDivisionError:
 integer division or modulo
 by zero
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;实际上，在with后面的代码块抛出任何异常时，__exit__()方法被执行。正如例子所示，异常抛出时，与之关联的type，value和stack trace传给__exit__()方法，因此抛出的ZeroDivisionError异常被打印出来了。开发库时，清理资源，关闭文件等等操作，都可以放在__exit__方法当中。&lt;/p&gt;
&lt;p&gt;因此，Python的with语句是提供一个有效的机制，让代码更简练，同时在异常产生时，清理工作更简单。&lt;/p&gt;</summary><category term="Memory"></category><category term="Features"></category><category term="Python"></category></entry></feed>